
ZemiakovySkrob_VRS6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007848  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  080079d8  080079d8  000179d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e40  08007e40  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  08007e40  08007e40  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e40  08007e40  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e40  08007e40  00017e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e44  08007e44  00017e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  08007e48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d0  2**0
                  CONTENTS
 10 .bss          00000174  200001d0  200001d0  000201d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000344  20000344  000201d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 14 .debug_info   000063d7  00000000  00000000  00020243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001bda  00000000  00000000  0002661a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000858  00000000  00000000  000281f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005ff  00000000  00000000  00028a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00017a71  00000000  00000000  0002904f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00007df9  00000000  00000000  00040ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000771b7  00000000  00000000  000488b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003584  00000000  00000000  000bfa70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  000c2ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d0 	.word	0x200001d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080079c0 	.word	0x080079c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	080079c0 	.word	0x080079c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf8:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <__NVIC_GetPriorityGrouping+0x18>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	0a1b      	lsrs	r3, r3, #8
 8000cfe:	f003 0307 	and.w	r3, r3, #7
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	db0b      	blt.n	8000d3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	f003 021f 	and.w	r2, r3, #31
 8000d28:	4907      	ldr	r1, [pc, #28]	; (8000d48 <__NVIC_EnableIRQ+0x38>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	095b      	lsrs	r3, r3, #5
 8000d30:	2001      	movs	r0, #1
 8000d32:	fa00 f202 	lsl.w	r2, r0, r2
 8000d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000e100 	.word	0xe000e100

08000d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	6039      	str	r1, [r7, #0]
 8000d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	db0a      	blt.n	8000d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	490c      	ldr	r1, [pc, #48]	; (8000d98 <__NVIC_SetPriority+0x4c>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	0112      	lsls	r2, r2, #4
 8000d6c:	b2d2      	uxtb	r2, r2
 8000d6e:	440b      	add	r3, r1
 8000d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d74:	e00a      	b.n	8000d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	4908      	ldr	r1, [pc, #32]	; (8000d9c <__NVIC_SetPriority+0x50>)
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	f003 030f 	and.w	r3, r3, #15
 8000d82:	3b04      	subs	r3, #4
 8000d84:	0112      	lsls	r2, r2, #4
 8000d86:	b2d2      	uxtb	r2, r2
 8000d88:	440b      	add	r3, r1
 8000d8a:	761a      	strb	r2, [r3, #24]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000e100 	.word	0xe000e100
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b089      	sub	sp, #36	; 0x24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	f1c3 0307 	rsb	r3, r3, #7
 8000dba:	2b04      	cmp	r3, #4
 8000dbc:	bf28      	it	cs
 8000dbe:	2304      	movcs	r3, #4
 8000dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	2b06      	cmp	r3, #6
 8000dc8:	d902      	bls.n	8000dd0 <NVIC_EncodePriority+0x30>
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3b03      	subs	r3, #3
 8000dce:	e000      	b.n	8000dd2 <NVIC_EncodePriority+0x32>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43da      	mvns	r2, r3
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	401a      	ands	r2, r3
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	fa01 f303 	lsl.w	r3, r1, r3
 8000df2:	43d9      	mvns	r1, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	4313      	orrs	r3, r2
         );
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3724      	adds	r7, #36	; 0x24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
	...

08000e08 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e12:	695a      	ldr	r2, [r3, #20]
 8000e14:	4907      	ldr	r1, [pc, #28]	; (8000e34 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e1e:	695a      	ldr	r2, [r3, #20]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4013      	ands	r3, r2
 8000e24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e26:	68fb      	ldr	r3, [r7, #12]
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	40021000 	.word	0x40021000

08000e38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f7ff ffe3 	bl	8000e08 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000e42:	f7ff ff57 	bl	8000cf4 <__NVIC_GetPriorityGrouping>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ffa7 	bl	8000da0 <NVIC_EncodePriority>
 8000e52:	4603      	mov	r3, r0
 8000e54:	4619      	mov	r1, r3
 8000e56:	2010      	movs	r0, #16
 8000e58:	f7ff ff78 	bl	8000d4c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000e5c:	2010      	movs	r0, #16
 8000e5e:	f7ff ff57 	bl	8000d10 <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000e62:	f7ff ff47 	bl	8000cf4 <__NVIC_GetPriorityGrouping>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff97 	bl	8000da0 <NVIC_EncodePriority>
 8000e72:	4603      	mov	r3, r0
 8000e74:	4619      	mov	r1, r3
 8000e76:	2011      	movs	r0, #17
 8000e78:	f7ff ff68 	bl	8000d4c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000e7c:	2011      	movs	r0, #17
 8000e7e:	f7ff ff47 	bl	8000d10 <__NVIC_EnableIRQ>

}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <LL_AHB1_GRP1_EnableClock>:
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e92:	695a      	ldr	r2, [r3, #20]
 8000e94:	4907      	ldr	r1, [pc, #28]	; (8000eb4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000e9c:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e9e:	695a      	ldr	r2, [r3, #20]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	40021000 	.word	0x40021000

08000eb8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000ebc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000ec0:	f7ff ffe2 	bl	8000e88 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000ec4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000ec8:	f7ff ffde 	bl	8000e88 <LL_AHB1_GRP1_EnableClock>

}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <__NVIC_GetPriorityGrouping>:
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	0a1b      	lsrs	r3, r3, #8
 8000eda:	f003 0307 	and.w	r3, r3, #7
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <__NVIC_EnableIRQ>:
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	db0b      	blt.n	8000f16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	f003 021f 	and.w	r2, r3, #31
 8000f04:	4907      	ldr	r1, [pc, #28]	; (8000f24 <__NVIC_EnableIRQ+0x38>)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	095b      	lsrs	r3, r3, #5
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000e100 	.word	0xe000e100

08000f28 <__NVIC_SetPriority>:
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	db0a      	blt.n	8000f52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	490c      	ldr	r1, [pc, #48]	; (8000f74 <__NVIC_SetPriority+0x4c>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	0112      	lsls	r2, r2, #4
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f50:	e00a      	b.n	8000f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4908      	ldr	r1, [pc, #32]	; (8000f78 <__NVIC_SetPriority+0x50>)
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	f003 030f 	and.w	r3, r3, #15
 8000f5e:	3b04      	subs	r3, #4
 8000f60:	0112      	lsls	r2, r2, #4
 8000f62:	b2d2      	uxtb	r2, r2
 8000f64:	440b      	add	r3, r1
 8000f66:	761a      	strb	r2, [r3, #24]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000e100 	.word	0xe000e100
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <NVIC_EncodePriority>:
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b089      	sub	sp, #36	; 0x24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f1c3 0307 	rsb	r3, r3, #7
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	bf28      	it	cs
 8000f9a:	2304      	movcs	r3, #4
 8000f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	2b06      	cmp	r3, #6
 8000fa4:	d902      	bls.n	8000fac <NVIC_EncodePriority+0x30>
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3b03      	subs	r3, #3
 8000faa:	e000      	b.n	8000fae <NVIC_EncodePriority+0x32>
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43da      	mvns	r2, r3
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	fa01 f303 	lsl.w	r3, r1, r3
 8000fce:	43d9      	mvns	r1, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	4313      	orrs	r3, r2
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3724      	adds	r7, #36	; 0x24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f043 0201 	orr.w	r2, r3, #1
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	601a      	str	r2, [r3, #0]
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8001002:	b480      	push	{r7}
 8001004:	b083      	sub	sp, #12
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	601a      	str	r2, [r3, #0]
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	601a      	str	r2, [r3, #0]
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8001042:	b480      	push	{r7}
 8001044:	b085      	sub	sp, #20
 8001046:	af00      	add	r7, sp, #0
 8001048:	60f8      	str	r0, [r7, #12]
 800104a:	60b9      	str	r1, [r7, #8]
 800104c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001056:	f023 0306 	bic.w	r3, r3, #6
 800105a:	68b9      	ldr	r1, [r7, #8]
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	430a      	orrs	r2, r1
 8001060:	431a      	orrs	r2, r3
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	60da      	str	r2, [r3, #12]
}
 8001066:	bf00      	nop
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	60da      	str	r2, [r3, #12]
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f043 0204 	orr.w	r2, r3, #4
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	601a      	str	r2, [r3, #0]
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f023 0204 	bic.w	r2, r3, #4
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	601a      	str	r2, [r3, #0]
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(const I2C_TypeDef *I2Cx)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d101      	bne.n	80010ea <LL_I2C_IsActiveFlag_TXIS+0x18>
 80010e6:	2301      	movs	r3, #1
 80010e8:	e000      	b.n	80010ec <LL_I2C_IsActiveFlag_TXIS+0x1a>
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(const I2C_TypeDef *I2Cx)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	f003 0304 	and.w	r3, r3, #4
 8001108:	2b04      	cmp	r3, #4
 800110a:	d101      	bne.n	8001110 <LL_I2C_IsActiveFlag_RXNE+0x18>
 800110c:	2301      	movs	r3, #1
 800110e:	e000      	b.n	8001112 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(const I2C_TypeDef *I2Cx)
{
 800111e:	b480      	push	{r7}
 8001120:	b083      	sub	sp, #12
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	f003 0320 	and.w	r3, r3, #32
 800112e:	2b20      	cmp	r3, #32
 8001130:	d101      	bne.n	8001136 <LL_I2C_IsActiveFlag_STOP+0x18>
 8001132:	2301      	movs	r3, #1
 8001134:	e000      	b.n	8001138 <LL_I2C_IsActiveFlag_STOP+0x1a>
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69db      	ldr	r3, [r3, #28]
 8001150:	f043 0220 	orr.w	r2, r3, #32
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	61da      	str	r2, [r3, #28]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	605a      	str	r2, [r3, #4]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
 8001190:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	685a      	ldr	r2, [r3, #4]
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	0d5b      	lsrs	r3, r3, #21
 800119a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800119e:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <LL_I2C_HandleTransfer+0x48>)
 80011a0:	430b      	orrs	r3, r1
 80011a2:	43db      	mvns	r3, r3
 80011a4:	401a      	ands	r2, r3
 80011a6:	68b9      	ldr	r1, [r7, #8]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4319      	orrs	r1, r3
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	041b      	lsls	r3, r3, #16
 80011b0:	4319      	orrs	r1, r3
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	4319      	orrs	r1, r3
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	430b      	orrs	r3, r1
 80011ba:	431a      	orrs	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 80011c0:	bf00      	nop
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	03ff7bff 	.word	0x03ff7bff

080011d0 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011dc:	b2db      	uxtb	r3, r3
}
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b083      	sub	sp, #12
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	460b      	mov	r3, r1
 80011f4:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 80011f6:	78fa      	ldrb	r2, [r7, #3]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <LL_AHB1_GRP1_EnableClock>:
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001212:	695a      	ldr	r2, [r3, #20]
 8001214:	4907      	ldr	r1, [pc, #28]	; (8001234 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4313      	orrs	r3, r2
 800121a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800121c:	4b05      	ldr	r3, [pc, #20]	; (8001234 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800121e:	695a      	ldr	r2, [r3, #20]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4013      	ands	r3, r2
 8001224:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001226:	68fb      	ldr	r3, [r7, #12]
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	40021000 	.word	0x40021000

08001238 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001242:	69da      	ldr	r2, [r3, #28]
 8001244:	4907      	ldr	r1, [pc, #28]	; (8001264 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4313      	orrs	r3, r2
 800124a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <LL_APB1_GRP1_EnableClock+0x2c>)
 800124e:	69da      	ldr	r2, [r3, #28]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4013      	ands	r3, r2
 8001254:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001256:	68fb      	ldr	r3, [r7, #12]
}
 8001258:	bf00      	nop
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	40021000 	.word	0x40021000

08001268 <MX_I2C1_Init>:
volatile uint8_t rec_index;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08e      	sub	sp, #56	; 0x38
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800126e:	f107 031c 	add.w	r3, r7, #28
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
 800127c:	611a      	str	r2, [r3, #16]
 800127e:	615a      	str	r2, [r3, #20]
 8001280:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
 8001290:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001292:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001296:	f7ff ffb7 	bl	8001208 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800129a:	23c0      	movs	r3, #192	; 0xc0
 800129c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800129e:	2302      	movs	r3, #2
 80012a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80012a2:	2303      	movs	r3, #3
 80012a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80012a6:	2301      	movs	r3, #1
 80012a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80012ae:	2304      	movs	r3, #4
 80012b0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	4619      	mov	r1, r3
 80012b6:	4821      	ldr	r0, [pc, #132]	; (800133c <MX_I2C1_Init+0xd4>)
 80012b8:	f001 f8bc 	bl	8002434 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80012bc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80012c0:	f7ff ffba 	bl	8001238 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80012c4:	f7ff fe04 	bl	8000ed0 <__NVIC_GetPriorityGrouping>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2200      	movs	r2, #0
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fe54 	bl	8000f7c <NVIC_EncodePriority>
 80012d4:	4603      	mov	r3, r0
 80012d6:	4619      	mov	r1, r3
 80012d8:	201f      	movs	r0, #31
 80012da:	f7ff fe25 	bl	8000f28 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 80012de:	201f      	movs	r0, #31
 80012e0:	f7ff fe04 	bl	8000eec <__NVIC_EnableIRQ>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 80012e4:	4816      	ldr	r0, [pc, #88]	; (8001340 <MX_I2C1_Init+0xd8>)
 80012e6:	f7ff ff3d 	bl	8001164 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 80012ea:	4815      	ldr	r0, [pc, #84]	; (8001340 <MX_I2C1_Init+0xd8>)
 80012ec:	f7ff fec1 	bl	8001072 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80012f0:	4813      	ldr	r0, [pc, #76]	; (8001340 <MX_I2C1_Init+0xd8>)
 80012f2:	f7ff fe96 	bl	8001022 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80012f6:	4812      	ldr	r0, [pc, #72]	; (8001340 <MX_I2C1_Init+0xd8>)
 80012f8:	f7ff fe83 	bl	8001002 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8001300:	4b10      	ldr	r3, [pc, #64]	; (8001344 <MX_I2C1_Init+0xdc>)
 8001302:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001304:	2300      	movs	r3, #0
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001310:	2300      	movs	r3, #0
 8001312:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001314:	2300      	movs	r3, #0
 8001316:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001318:	f107 031c 	add.w	r3, r7, #28
 800131c:	4619      	mov	r1, r3
 800131e:	4808      	ldr	r0, [pc, #32]	; (8001340 <MX_I2C1_Init+0xd8>)
 8001320:	f001 f99b 	bl	800265a <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001324:	2200      	movs	r2, #0
 8001326:	2100      	movs	r1, #0
 8001328:	4805      	ldr	r0, [pc, #20]	; (8001340 <MX_I2C1_Init+0xd8>)
 800132a:	f7ff fe8a 	bl	8001042 <LL_I2C_SetOwnAddress2>
  LL_I2C_Enable(I2C1);
 800132e:	4804      	ldr	r0, [pc, #16]	; (8001340 <MX_I2C1_Init+0xd8>)
 8001330:	f7ff fe57 	bl	8000fe2 <LL_I2C_Enable>

}
 8001334:	bf00      	nop
 8001336:	3738      	adds	r7, #56	; 0x38
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	48000400 	.word	0x48000400
 8001340:	40005400 	.word	0x40005400
 8001344:	2000090e 	.word	0x2000090e

08001348 <i2c_write>:

void i2c_write(uint8_t data, uint8_t reg_add, uint8_t slave_add, uint8_t read_flag)
{
 8001348:	b590      	push	{r4, r7, lr}
 800134a:	b085      	sub	sp, #20
 800134c:	af02      	add	r7, sp, #8
 800134e:	4604      	mov	r4, r0
 8001350:	4608      	mov	r0, r1
 8001352:	4611      	mov	r1, r2
 8001354:	461a      	mov	r2, r3
 8001356:	4623      	mov	r3, r4
 8001358:	71fb      	strb	r3, [r7, #7]
 800135a:	4603      	mov	r3, r0
 800135c:	71bb      	strb	r3, [r7, #6]
 800135e:	460b      	mov	r3, r1
 8001360:	717b      	strb	r3, [r7, #5]
 8001362:	4613      	mov	r3, r2
 8001364:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 8001366:	793b      	ldrb	r3, [r7, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <i2c_write+0x2c>
	{
		reg_add |= (1 << 7);
 800136c:	79bb      	ldrb	r3, [r7, #6]
 800136e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001372:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_add, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001374:	7979      	ldrb	r1, [r7, #5]
 8001376:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <i2c_write+0x80>)
 8001378:	9301      	str	r3, [sp, #4]
 800137a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	2302      	movs	r3, #2
 8001382:	2200      	movs	r2, #0
 8001384:	4811      	ldr	r0, [pc, #68]	; (80013cc <i2c_write+0x84>)
 8001386:	f7ff fefd 	bl	8001184 <LL_I2C_HandleTransfer>
	LL_I2C_TransmitData8(I2C1, reg_add);
 800138a:	79bb      	ldrb	r3, [r7, #6]
 800138c:	4619      	mov	r1, r3
 800138e:	480f      	ldr	r0, [pc, #60]	; (80013cc <i2c_write+0x84>)
 8001390:	f7ff ff2b 	bl	80011ea <LL_I2C_TransmitData8>

		while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001394:	e00a      	b.n	80013ac <i2c_write+0x64>
		{
			if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001396:	480d      	ldr	r0, [pc, #52]	; (80013cc <i2c_write+0x84>)
 8001398:	f7ff fe9b 	bl	80010d2 <LL_I2C_IsActiveFlag_TXIS>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d004      	beq.n	80013ac <i2c_write+0x64>
			{
				LL_I2C_TransmitData8(I2C1, data);
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	4619      	mov	r1, r3
 80013a6:	4809      	ldr	r0, [pc, #36]	; (80013cc <i2c_write+0x84>)
 80013a8:	f7ff ff1f 	bl	80011ea <LL_I2C_TransmitData8>
		while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80013ac:	4807      	ldr	r0, [pc, #28]	; (80013cc <i2c_write+0x84>)
 80013ae:	f7ff feb6 	bl	800111e <LL_I2C_IsActiveFlag_STOP>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0ee      	beq.n	8001396 <i2c_write+0x4e>
			}
		}
		LL_I2C_ClearFlag_STOP(I2C1);
 80013b8:	4804      	ldr	r0, [pc, #16]	; (80013cc <i2c_write+0x84>)
 80013ba:	f7ff fec3 	bl	8001144 <LL_I2C_ClearFlag_STOP>
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd90      	pop	{r4, r7, pc}
 80013c6:	bf00      	nop
 80013c8:	80002000 	.word	0x80002000
 80013cc:	40005400 	.word	0x40005400

080013d0 <i2c_read>:

uint8_t* i2c_read(uint8_t* buffer, uint8_t length, uint8_t reg_add, uint8_t slave_add, uint8_t read_flag)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af02      	add	r7, sp, #8
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	4608      	mov	r0, r1
 80013da:	4611      	mov	r1, r2
 80013dc:	461a      	mov	r2, r3
 80013de:	4603      	mov	r3, r0
 80013e0:	70fb      	strb	r3, [r7, #3]
 80013e2:	460b      	mov	r3, r1
 80013e4:	70bb      	strb	r3, [r7, #2]
 80013e6:	4613      	mov	r3, r2
 80013e8:	707b      	strb	r3, [r7, #1]
	rec_buffer_read = buffer;
 80013ea:	4a30      	ldr	r2, [pc, #192]	; (80014ac <i2c_read+0xdc>)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6013      	str	r3, [r2, #0]
	if(read_flag)
 80013f0:	7c3b      	ldrb	r3, [r7, #16]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <i2c_read+0x2e>
		{
			reg_add |= (1 << 7);
 80013f6:	78bb      	ldrb	r3, [r7, #2]
 80013f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013fc:	70bb      	strb	r3, [r7, #2]
		}
	end_read_flag = 0;
 80013fe:	4b2c      	ldr	r3, [pc, #176]	; (80014b0 <i2c_read+0xe0>)
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]
	LL_I2C_EnableIT_RX(I2C1);
 8001404:	482b      	ldr	r0, [pc, #172]	; (80014b4 <i2c_read+0xe4>)
 8001406:	f7ff fe44 	bl	8001092 <LL_I2C_EnableIT_RX>
	// slave reg read
	LL_I2C_HandleTransfer(I2C1, slave_add, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 800140a:	7879      	ldrb	r1, [r7, #1]
 800140c:	4b2a      	ldr	r3, [pc, #168]	; (80014b8 <i2c_read+0xe8>)
 800140e:	9301      	str	r3, [sp, #4]
 8001410:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	2301      	movs	r3, #1
 8001418:	2200      	movs	r2, #0
 800141a:	4826      	ldr	r0, [pc, #152]	; (80014b4 <i2c_read+0xe4>)
 800141c:	f7ff feb2 	bl	8001184 <LL_I2C_HandleTransfer>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001420:	e00a      	b.n	8001438 <i2c_read+0x68>
		{
			if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001422:	4824      	ldr	r0, [pc, #144]	; (80014b4 <i2c_read+0xe4>)
 8001424:	f7ff fe55 	bl	80010d2 <LL_I2C_IsActiveFlag_TXIS>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d004      	beq.n	8001438 <i2c_read+0x68>
			{
				LL_I2C_TransmitData8(I2C1, reg_add);
 800142e:	78bb      	ldrb	r3, [r7, #2]
 8001430:	4619      	mov	r1, r3
 8001432:	4820      	ldr	r0, [pc, #128]	; (80014b4 <i2c_read+0xe4>)
 8001434:	f7ff fed9 	bl	80011ea <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001438:	481e      	ldr	r0, [pc, #120]	; (80014b4 <i2c_read+0xe4>)
 800143a:	f7ff fe70 	bl	800111e <LL_I2C_IsActiveFlag_STOP>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0ee      	beq.n	8001422 <i2c_read+0x52>
			}
		}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001444:	481b      	ldr	r0, [pc, #108]	; (80014b4 <i2c_read+0xe4>)
 8001446:	f7ff fe7d 	bl	8001144 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){};
 800144a:	bf00      	nop
 800144c:	4819      	ldr	r0, [pc, #100]	; (80014b4 <i2c_read+0xe4>)
 800144e:	f7ff fe66 	bl	800111e <LL_I2C_IsActiveFlag_STOP>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1f9      	bne.n	800144c <i2c_read+0x7c>

	// Receive data from slave
	LL_I2C_HandleTransfer(I2C1, slave_add, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8001458:	7879      	ldrb	r1, [r7, #1]
 800145a:	78fb      	ldrb	r3, [r7, #3]
 800145c:	4a17      	ldr	r2, [pc, #92]	; (80014bc <i2c_read+0xec>)
 800145e:	9201      	str	r2, [sp, #4]
 8001460:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001464:	9200      	str	r2, [sp, #0]
 8001466:	2200      	movs	r2, #0
 8001468:	4812      	ldr	r0, [pc, #72]	; (80014b4 <i2c_read+0xe4>)
 800146a:	f7ff fe8b 	bl	8001184 <LL_I2C_HandleTransfer>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 800146e:	bf00      	nop
 8001470:	4810      	ldr	r0, [pc, #64]	; (80014b4 <i2c_read+0xe4>)
 8001472:	f7ff fe54 	bl	800111e <LL_I2C_IsActiveFlag_STOP>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0f9      	beq.n	8001470 <i2c_read+0xa0>

	//End of transfer
	LL_I2C_DisableIT_RX(I2C1);
 800147c:	480d      	ldr	r0, [pc, #52]	; (80014b4 <i2c_read+0xe4>)
 800147e:	f7ff fe18 	bl	80010b2 <LL_I2C_DisableIT_RX>
	LL_I2C_ClearFlag_STOP(I2C1);
 8001482:	480c      	ldr	r0, [pc, #48]	; (80014b4 <i2c_read+0xe4>)
 8001484:	f7ff fe5e 	bl	8001144 <LL_I2C_ClearFlag_STOP>
	I2C1->ICR |= (1 << 4);
 8001488:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <i2c_read+0xe4>)
 800148a:	69db      	ldr	r3, [r3, #28]
 800148c:	4a09      	ldr	r2, [pc, #36]	; (80014b4 <i2c_read+0xe4>)
 800148e:	f043 0310 	orr.w	r3, r3, #16
 8001492:	61d3      	str	r3, [r2, #28]
	rec_index = 0;
 8001494:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <i2c_read+0xf0>)
 8001496:	2200      	movs	r2, #0
 8001498:	701a      	strb	r2, [r3, #0]
	end_read_flag = 1;
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <i2c_read+0xe0>)
 800149c:	2201      	movs	r2, #1
 800149e:	701a      	strb	r2, [r3, #0]
	return rec_buffer_read;
 80014a0:	4b02      	ldr	r3, [pc, #8]	; (80014ac <i2c_read+0xdc>)
 80014a2:	681b      	ldr	r3, [r3, #0]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	200001ec 	.word	0x200001ec
 80014b0:	200001f0 	.word	0x200001f0
 80014b4:	40005400 	.word	0x40005400
 80014b8:	80002000 	.word	0x80002000
 80014bc:	80002400 	.word	0x80002400
 80014c0:	200001f1 	.word	0x200001f1

080014c4 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void)
{
 80014c4:	b598      	push	{r3, r4, r7, lr}
 80014c6:	af00      	add	r7, sp, #0
	// Check RXNE flag value in ISR register
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 80014c8:	480f      	ldr	r0, [pc, #60]	; (8001508 <I2C1_EV_IRQHandler+0x44>)
 80014ca:	f7ff fe15 	bl	80010f8 <LL_I2C_IsActiveFlag_RXNE>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d016      	beq.n	8001502 <I2C1_EV_IRQHandler+0x3e>
	{
		// Call function Master Reception Callback
		rec_buffer_read[rec_index++] = LL_I2C_ReceiveData8(I2C1);
 80014d4:	4b0d      	ldr	r3, [pc, #52]	; (800150c <I2C1_EV_IRQHandler+0x48>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <I2C1_EV_IRQHandler+0x4c>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	1c59      	adds	r1, r3, #1
 80014e0:	b2c8      	uxtb	r0, r1
 80014e2:	490b      	ldr	r1, [pc, #44]	; (8001510 <I2C1_EV_IRQHandler+0x4c>)
 80014e4:	7008      	strb	r0, [r1, #0]
 80014e6:	18d4      	adds	r4, r2, r3
 80014e8:	4807      	ldr	r0, [pc, #28]	; (8001508 <I2C1_EV_IRQHandler+0x44>)
 80014ea:	f7ff fe71 	bl	80011d0 <LL_I2C_ReceiveData8>
 80014ee:	4603      	mov	r3, r0
 80014f0:	7023      	strb	r3, [r4, #0]
		if(rec_index > 19)
 80014f2:	4b07      	ldr	r3, [pc, #28]	; (8001510 <I2C1_EV_IRQHandler+0x4c>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b13      	cmp	r3, #19
 80014fa:	d902      	bls.n	8001502 <I2C1_EV_IRQHandler+0x3e>
		{
				rec_index = 0;
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <I2C1_EV_IRQHandler+0x4c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001502:	bf00      	nop
 8001504:	bd98      	pop	{r3, r4, r7, pc}
 8001506:	bf00      	nop
 8001508:	40005400 	.word	0x40005400
 800150c:	200001ec 	.word	0x200001ec
 8001510:	200001f1 	.word	0x200001f1

08001514 <__NVIC_SetPriorityGrouping>:
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <__NVIC_SetPriorityGrouping+0x44>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001530:	4013      	ands	r3, r2
 8001532:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800153c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001546:	4a04      	ldr	r2, [pc, #16]	; (8001558 <__NVIC_SetPriorityGrouping+0x44>)
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	60d3      	str	r3, [r2, #12]
}
 800154c:	bf00      	nop
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <__NVIC_GetPriorityGrouping>:
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001560:	4b04      	ldr	r3, [pc, #16]	; (8001574 <__NVIC_GetPriorityGrouping+0x18>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	0a1b      	lsrs	r3, r3, #8
 8001566:	f003 0307 	and.w	r3, r3, #7
}
 800156a:	4618      	mov	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <__NVIC_SetPriority>:
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	6039      	str	r1, [r7, #0]
 8001582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001588:	2b00      	cmp	r3, #0
 800158a:	db0a      	blt.n	80015a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	b2da      	uxtb	r2, r3
 8001590:	490c      	ldr	r1, [pc, #48]	; (80015c4 <__NVIC_SetPriority+0x4c>)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	0112      	lsls	r2, r2, #4
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	440b      	add	r3, r1
 800159c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80015a0:	e00a      	b.n	80015b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4908      	ldr	r1, [pc, #32]	; (80015c8 <__NVIC_SetPriority+0x50>)
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	3b04      	subs	r3, #4
 80015b0:	0112      	lsls	r2, r2, #4
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	440b      	add	r3, r1
 80015b6:	761a      	strb	r2, [r3, #24]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000e100 	.word	0xe000e100
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <NVIC_EncodePriority>:
{
 80015cc:	b480      	push	{r7}
 80015ce:	b089      	sub	sp, #36	; 0x24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f1c3 0307 	rsb	r3, r3, #7
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	bf28      	it	cs
 80015ea:	2304      	movcs	r3, #4
 80015ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3304      	adds	r3, #4
 80015f2:	2b06      	cmp	r3, #6
 80015f4:	d902      	bls.n	80015fc <NVIC_EncodePriority+0x30>
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3b03      	subs	r3, #3
 80015fa:	e000      	b.n	80015fe <NVIC_EncodePriority+0x32>
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	f04f 32ff 	mov.w	r2, #4294967295
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43da      	mvns	r2, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	401a      	ands	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001614:	f04f 31ff 	mov.w	r1, #4294967295
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	fa01 f303 	lsl.w	r3, r1, r3
 800161e:	43d9      	mvns	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	4313      	orrs	r3, r2
}
 8001626:	4618      	mov	r0, r3
 8001628:	3724      	adds	r7, #36	; 0x24
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <LL_RCC_HSI_Enable+0x1c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a04      	ldr	r2, [pc, #16]	; (8001650 <LL_RCC_HSI_Enable+0x1c>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	6013      	str	r3, [r2, #0]
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40021000 	.word	0x40021000

08001654 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <LL_RCC_HSI_IsReady+0x20>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b02      	cmp	r3, #2
 8001662:	bf0c      	ite	eq
 8001664:	2301      	moveq	r3, #1
 8001666:	2300      	movne	r3, #0
 8001668:	b2db      	uxtb	r3, r3
}
 800166a:	4618      	mov	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	40021000 	.word	0x40021000

08001678 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001680:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	4904      	ldr	r1, [pc, #16]	; (80016a0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800168e:	4313      	orrs	r3, r2
 8001690:	600b      	str	r3, [r1, #0]
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40021000 	.word	0x40021000

080016a4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <LL_RCC_SetSysClkSource+0x24>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f023 0203 	bic.w	r2, r3, #3
 80016b4:	4904      	ldr	r1, [pc, #16]	; (80016c8 <LL_RCC_SetSysClkSource+0x24>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	604b      	str	r3, [r1, #4]
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	40021000 	.word	0x40021000

080016cc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <LL_RCC_GetSysClkSource+0x18>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 030c 	and.w	r3, r3, #12
}
 80016d8:	4618      	mov	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	40021000 	.word	0x40021000

080016e8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <LL_RCC_SetAHBPrescaler+0x24>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f8:	4904      	ldr	r1, [pc, #16]	; (800170c <LL_RCC_SetAHBPrescaler+0x24>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	604b      	str	r3, [r1, #4]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	40021000 	.word	0x40021000

08001710 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001718:	4b06      	ldr	r3, [pc, #24]	; (8001734 <LL_RCC_SetAPB1Prescaler+0x24>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001720:	4904      	ldr	r1, [pc, #16]	; (8001734 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4313      	orrs	r3, r2
 8001726:	604b      	str	r3, [r1, #4]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	40021000 	.word	0x40021000

08001738 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <LL_RCC_SetAPB2Prescaler+0x24>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001748:	4904      	ldr	r1, [pc, #16]	; (800175c <LL_RCC_SetAPB2Prescaler+0x24>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4313      	orrs	r3, r2
 800174e:	604b      	str	r3, [r1, #4]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	40021000 	.word	0x40021000

08001760 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <LL_RCC_SetI2CClockSource+0x2c>)
 800176a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	0e1b      	lsrs	r3, r3, #24
 8001770:	43db      	mvns	r3, r3
 8001772:	401a      	ands	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800177a:	4904      	ldr	r1, [pc, #16]	; (800178c <LL_RCC_SetI2CClockSource+0x2c>)
 800177c:	4313      	orrs	r3, r2
 800177e:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	40021000 	.word	0x40021000

08001790 <LL_APB1_GRP1_EnableClock>:
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <LL_APB1_GRP1_EnableClock+0x2c>)
 800179a:	69da      	ldr	r2, [r3, #28]
 800179c:	4907      	ldr	r1, [pc, #28]	; (80017bc <LL_APB1_GRP1_EnableClock+0x2c>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <LL_APB1_GRP1_EnableClock+0x2c>)
 80017a6:	69da      	ldr	r2, [r3, #28]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4013      	ands	r3, r2
 80017ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017ae:	68fb      	ldr	r3, [r7, #12]
}
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	40021000 	.word	0x40021000

080017c0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <LL_APB2_GRP1_EnableClock+0x2c>)
 80017ca:	699a      	ldr	r2, [r3, #24]
 80017cc:	4907      	ldr	r1, [pc, #28]	; (80017ec <LL_APB2_GRP1_EnableClock+0x2c>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <LL_APB2_GRP1_EnableClock+0x2c>)
 80017d6:	699a      	ldr	r2, [r3, #24]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4013      	ands	r3, r2
 80017dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017de:	68fb      	ldr	r3, [r7, #12]
}
 80017e0:	bf00      	nop
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	40021000 	.word	0x40021000

080017f0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <LL_FLASH_SetLatency+0x24>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f023 0207 	bic.w	r2, r3, #7
 8001800:	4904      	ldr	r1, [pc, #16]	; (8001814 <LL_FLASH_SetLatency+0x24>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4313      	orrs	r3, r2
 8001806:	600b      	str	r3, [r1, #0]
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	40022000 	.word	0x40022000

08001818 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800181c:	4b04      	ldr	r3, [pc, #16]	; (8001830 <LL_FLASH_GetLatency+0x18>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0307 	and.w	r3, r3, #7
}
 8001824:	4618      	mov	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40022000 	.word	0x40022000

08001834 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001834:	b5b0      	push	{r4, r5, r7, lr}
 8001836:	b0a8      	sub	sp, #160	; 0xa0
 8001838:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800183a:	2001      	movs	r0, #1
 800183c:	f7ff ffc0 	bl	80017c0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001840:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001844:	f7ff ffa4 	bl	8001790 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001848:	2003      	movs	r0, #3
 800184a:	f7ff fe63 	bl	8001514 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 800184e:	f7ff fe85 	bl	800155c <__NVIC_GetPriorityGrouping>
 8001852:	4603      	mov	r3, r0
 8001854:	2200      	movs	r2, #0
 8001856:	210f      	movs	r1, #15
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff feb7 	bl	80015cc <NVIC_EncodePriority>
 800185e:	4603      	mov	r3, r0
 8001860:	4619      	mov	r1, r3
 8001862:	f04f 30ff 	mov.w	r0, #4294967295
 8001866:	f7ff fe87 	bl	8001578 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800186a:	f000 f851 	bl	8001910 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800186e:	f7ff fb23 	bl	8000eb8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001872:	f7ff fae1 	bl	8000e38 <MX_DMA_Init>
  MX_I2C1_Init();
 8001876:	f7ff fcf7 	bl	8001268 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800187a:	f000 fbef 	bl	800205c <MX_USART2_UART_Init>
  LPS25HB_Init();
 800187e:	f001 fc1d 	bl	80030bc <LPS25HB_Init>
  HTS221_Init();
 8001882:	f001 fa4d 	bl	8002d20 <HTS221_Init>

  char message_pressure[128];
  memset(message_pressure, 0, sizeof(message_pressure));
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	2280      	movs	r2, #128	; 0x80
 800188a:	2100      	movs	r1, #0
 800188c:	4618      	mov	r0, r3
 800188e:	f002 fc5a 	bl	8004146 <memset>

  while (1)
  {
	  memset(message_pressure, '\0', sizeof(message_pressure));
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	2280      	movs	r2, #128	; 0x80
 8001896:	2100      	movs	r1, #0
 8001898:	4618      	mov	r0, r3
 800189a:	f002 fc54 	bl	8004146 <memset>
	  float pressure = LPS25HB_pressure();
 800189e:	f001 fc85 	bl	80031ac <LPS25HB_pressure>
 80018a2:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c

	  float temperature = HTS221_get_temperature();
 80018a6:	f001 fa79 	bl	8002d9c <HTS221_get_temperature>
 80018aa:	ed87 0a22 	vstr	s0, [r7, #136]	; 0x88
	  float humidity = HTS221_get_humidity();
 80018ae:	f001 fb35 	bl	8002f1c <HTS221_get_humidity>
 80018b2:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84

	  sprintf(message_pressure, "%7.3f, %3.1f, %d\r", pressure, temperature, (int) humidity);
 80018b6:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80018ba:	f7fe fe45 	bl	8000548 <__aeabi_f2d>
 80018be:	4604      	mov	r4, r0
 80018c0:	460d      	mov	r5, r1
 80018c2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80018c6:	f7fe fe3f 	bl	8000548 <__aeabi_f2d>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80018d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018d6:	ee17 1a90 	vmov	r1, s15
 80018da:	1d38      	adds	r0, r7, #4
 80018dc:	9102      	str	r1, [sp, #8]
 80018de:	e9cd 2300 	strd	r2, r3, [sp]
 80018e2:	4622      	mov	r2, r4
 80018e4:	462b      	mov	r3, r5
 80018e6:	4909      	ldr	r1, [pc, #36]	; (800190c <main+0xd8>)
 80018e8:	f002 fbca 	bl	8004080 <siprintf>
	  USART2_PutBuffer((uint8_t*) message_pressure, strlen(message_pressure));
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe fcbe 	bl	8000270 <strlen>
 80018f4:	4603      	mov	r3, r0
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	4611      	mov	r1, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 fc4b 	bl	8002198 <USART2_PutBuffer>
	  LL_mDelay(40);
 8001902:	2028      	movs	r0, #40	; 0x28
 8001904:	f001 f990 	bl	8002c28 <LL_mDelay>
  {
 8001908:	e7c3      	b.n	8001892 <main+0x5e>
 800190a:	bf00      	nop
 800190c:	080079d8 	.word	0x080079d8

08001910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001914:	2000      	movs	r0, #0
 8001916:	f7ff ff6b 	bl	80017f0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 800191a:	bf00      	nop
 800191c:	f7ff ff7c 	bl	8001818 <LL_FLASH_GetLatency>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1fa      	bne.n	800191c <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8001926:	f7ff fe85 	bl	8001634 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800192a:	bf00      	nop
 800192c:	f7ff fe92 	bl	8001654 <LL_RCC_HSI_IsReady>
 8001930:	4603      	mov	r3, r0
 8001932:	2b01      	cmp	r3, #1
 8001934:	d1fa      	bne.n	800192c <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001936:	2010      	movs	r0, #16
 8001938:	f7ff fe9e 	bl	8001678 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800193c:	2000      	movs	r0, #0
 800193e:	f7ff fed3 	bl	80016e8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001942:	2000      	movs	r0, #0
 8001944:	f7ff fee4 	bl	8001710 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001948:	2000      	movs	r0, #0
 800194a:	f7ff fef5 	bl	8001738 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800194e:	2000      	movs	r0, #0
 8001950:	f7ff fea8 	bl	80016a4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001954:	bf00      	nop
 8001956:	f7ff feb9 	bl	80016cc <LL_RCC_GetSysClkSource>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1fa      	bne.n	8001956 <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8001960:	4805      	ldr	r0, [pc, #20]	; (8001978 <SystemClock_Config+0x68>)
 8001962:	f001 f953 	bl	8002c0c <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 8001966:	4804      	ldr	r0, [pc, #16]	; (8001978 <SystemClock_Config+0x68>)
 8001968:	f001 f984 	bl	8002c74 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 800196c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001970:	f7ff fef6 	bl	8001760 <LL_RCC_SetI2CClockSource>
}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}
 8001978:	007a1200 	.word	0x007a1200

0800197c <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	3b01      	subs	r3, #1
 800198a:	4a0b      	ldr	r2, [pc, #44]	; (80019b8 <LL_DMA_DisableChannel+0x3c>)
 800198c:	5cd3      	ldrb	r3, [r2, r3]
 800198e:	461a      	mov	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4413      	add	r3, r2
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	3a01      	subs	r2, #1
 800199a:	4907      	ldr	r1, [pc, #28]	; (80019b8 <LL_DMA_DisableChannel+0x3c>)
 800199c:	5c8a      	ldrb	r2, [r1, r2]
 800199e:	4611      	mov	r1, r2
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	440a      	add	r2, r1
 80019a4:	f023 0301 	bic.w	r3, r3, #1
 80019a8:	6013      	str	r3, [r2, #0]
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	080079f0 	.word	0x080079f0

080019bc <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019d0:	bf0c      	ite	eq
 80019d2:	2301      	moveq	r3, #1
 80019d4:	2300      	movne	r3, #0
 80019d6:	b2db      	uxtb	r3, r3
}
 80019d8:	4618      	mov	r0, r3
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019f2:	605a      	str	r2, [r3, #4]
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a10:	2b40      	cmp	r3, #64	; 0x40
 8001a12:	d101      	bne.n	8001a18 <LL_USART_IsActiveFlag_TC+0x18>
 8001a14:	2301      	movs	r3, #1
 8001a16:	e000      	b.n	8001a1a <LL_USART_IsActiveFlag_TC+0x1a>
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a2a:	e7fe      	b.n	8001a2a <NMI_Handler+0x4>

08001a2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <HardFault_Handler+0x4>

08001a32 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a36:	e7fe      	b.n	8001a36 <MemManage_Handler+0x4>

08001a38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <BusFault_Handler+0x4>

08001a3e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a42:	e7fe      	b.n	8001a42 <UsageFault_Handler+0x4>

08001a44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
	...

08001a8c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 8001a90:	480a      	ldr	r0, [pc, #40]	; (8001abc <DMA1_Channel7_IRQHandler+0x30>)
 8001a92:	f7ff ff93 	bl	80019bc <LL_DMA_IsActiveFlag_TC7>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d10d      	bne.n	8001ab8 <DMA1_Channel7_IRQHandler+0x2c>
		{
			LL_DMA_ClearFlag_TC7(DMA1);
 8001a9c:	4807      	ldr	r0, [pc, #28]	; (8001abc <DMA1_Channel7_IRQHandler+0x30>)
 8001a9e:	f7ff ffa1 	bl	80019e4 <LL_DMA_ClearFlag_TC7>

			while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 8001aa2:	bf00      	nop
 8001aa4:	4806      	ldr	r0, [pc, #24]	; (8001ac0 <DMA1_Channel7_IRQHandler+0x34>)
 8001aa6:	f7ff ffab 	bl	8001a00 <LL_USART_IsActiveFlag_TC>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0f9      	beq.n	8001aa4 <DMA1_Channel7_IRQHandler+0x18>
			LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8001ab0:	2107      	movs	r1, #7
 8001ab2:	4802      	ldr	r0, [pc, #8]	; (8001abc <DMA1_Channel7_IRQHandler+0x30>)
 8001ab4:	f7ff ff62 	bl	800197c <LL_DMA_DisableChannel>
		}
}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40020000 	.word	0x40020000
 8001ac0:	40004400 	.word	0x40004400

08001ac4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return 1;
 8001ac8:	2301      	movs	r3, #1
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <_kill>:

int _kill(int pid, int sig)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ade:	f002 fb85 	bl	80041ec <__errno>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2216      	movs	r2, #22
 8001ae6:	601a      	str	r2, [r3, #0]
  return -1;
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <_exit>:

void _exit (int status)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001afc:	f04f 31ff 	mov.w	r1, #4294967295
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff ffe7 	bl	8001ad4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b06:	e7fe      	b.n	8001b06 <_exit+0x12>

08001b08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	e00a      	b.n	8001b30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b1a:	f3af 8000 	nop.w
 8001b1e:	4601      	mov	r1, r0
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	60ba      	str	r2, [r7, #8]
 8001b26:	b2ca      	uxtb	r2, r1
 8001b28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	dbf0      	blt.n	8001b1a <_read+0x12>
  }

  return len;
 8001b38:	687b      	ldr	r3, [r7, #4]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b086      	sub	sp, #24
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	60f8      	str	r0, [r7, #12]
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	e009      	b.n	8001b68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	1c5a      	adds	r2, r3, #1
 8001b58:	60ba      	str	r2, [r7, #8]
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	3301      	adds	r3, #1
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	dbf1      	blt.n	8001b54 <_write+0x12>
  }
  return len;
 8001b70:	687b      	ldr	r3, [r7, #4]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <_close>:

int _close(int file)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ba2:	605a      	str	r2, [r3, #4]
  return 0;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <_isatty>:

int _isatty(int file)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bba:	2301      	movs	r3, #1
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bec:	4a14      	ldr	r2, [pc, #80]	; (8001c40 <_sbrk+0x5c>)
 8001bee:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <_sbrk+0x60>)
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf8:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <_sbrk+0x64>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d102      	bne.n	8001c06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c00:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <_sbrk+0x64>)
 8001c02:	4a12      	ldr	r2, [pc, #72]	; (8001c4c <_sbrk+0x68>)
 8001c04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <_sbrk+0x64>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d207      	bcs.n	8001c24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c14:	f002 faea 	bl	80041ec <__errno>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	220c      	movs	r2, #12
 8001c1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c22:	e009      	b.n	8001c38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c24:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <_sbrk+0x64>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c2a:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <_sbrk+0x64>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	4a05      	ldr	r2, [pc, #20]	; (8001c48 <_sbrk+0x64>)
 8001c34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c36:	68fb      	ldr	r3, [r7, #12]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20003000 	.word	0x20003000
 8001c44:	00000400 	.word	0x00000400
 8001c48:	200001f4 	.word	0x200001f4
 8001c4c:	20000348 	.word	0x20000348

08001c50 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <SystemInit+0x20>)
 8001c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c5a:	4a05      	ldr	r2, [pc, #20]	; (8001c70 <SystemInit+0x20>)
 8001c5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <LL_DMA_EnableChannel>:
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	3b01      	subs	r3, #1
 8001c82:	4a0b      	ldr	r2, [pc, #44]	; (8001cb0 <LL_DMA_EnableChannel+0x3c>)
 8001c84:	5cd3      	ldrb	r3, [r2, r3]
 8001c86:	461a      	mov	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	3a01      	subs	r2, #1
 8001c92:	4907      	ldr	r1, [pc, #28]	; (8001cb0 <LL_DMA_EnableChannel+0x3c>)
 8001c94:	5c8a      	ldrb	r2, [r1, r2]
 8001c96:	4611      	mov	r1, r2
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	440a      	add	r2, r1
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	6013      	str	r3, [r2, #0]
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	08007a10 	.word	0x08007a10

08001cb4 <LL_DMA_SetDataTransferDirection>:
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	4a0d      	ldr	r2, [pc, #52]	; (8001cfc <LL_DMA_SetDataTransferDirection+0x48>)
 8001cc6:	5cd3      	ldrb	r3, [r2, r3]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	4413      	add	r3, r2
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cd4:	f023 0310 	bic.w	r3, r3, #16
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	3a01      	subs	r2, #1
 8001cdc:	4907      	ldr	r1, [pc, #28]	; (8001cfc <LL_DMA_SetDataTransferDirection+0x48>)
 8001cde:	5c8a      	ldrb	r2, [r1, r2]
 8001ce0:	4611      	mov	r1, r2
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	440a      	add	r2, r1
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	600b      	str	r3, [r1, #0]
}
 8001cee:	bf00      	nop
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	08007a10 	.word	0x08007a10

08001d00 <LL_DMA_SetMode>:
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	4a0c      	ldr	r2, [pc, #48]	; (8001d44 <LL_DMA_SetMode+0x44>)
 8001d12:	5cd3      	ldrb	r3, [r2, r3]
 8001d14:	461a      	mov	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	4413      	add	r3, r2
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f023 0220 	bic.w	r2, r3, #32
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	4907      	ldr	r1, [pc, #28]	; (8001d44 <LL_DMA_SetMode+0x44>)
 8001d26:	5ccb      	ldrb	r3, [r1, r3]
 8001d28:	4619      	mov	r1, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	440b      	add	r3, r1
 8001d2e:	4619      	mov	r1, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]
}
 8001d36:	bf00      	nop
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	08007a10 	.word	0x08007a10

08001d48 <LL_DMA_SetPeriphIncMode>:
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	4a0c      	ldr	r2, [pc, #48]	; (8001d8c <LL_DMA_SetPeriphIncMode+0x44>)
 8001d5a:	5cd3      	ldrb	r3, [r2, r3]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	4413      	add	r3, r2
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	4907      	ldr	r1, [pc, #28]	; (8001d8c <LL_DMA_SetPeriphIncMode+0x44>)
 8001d6e:	5ccb      	ldrb	r3, [r1, r3]
 8001d70:	4619      	mov	r1, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	440b      	add	r3, r1
 8001d76:	4619      	mov	r1, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	600b      	str	r3, [r1, #0]
}
 8001d7e:	bf00      	nop
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	08007a10 	.word	0x08007a10

08001d90 <LL_DMA_SetMemoryIncMode>:
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	4a0c      	ldr	r2, [pc, #48]	; (8001dd4 <LL_DMA_SetMemoryIncMode+0x44>)
 8001da2:	5cd3      	ldrb	r3, [r2, r3]
 8001da4:	461a      	mov	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	4413      	add	r3, r2
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	4907      	ldr	r1, [pc, #28]	; (8001dd4 <LL_DMA_SetMemoryIncMode+0x44>)
 8001db6:	5ccb      	ldrb	r3, [r1, r3]
 8001db8:	4619      	mov	r1, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	440b      	add	r3, r1
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	600b      	str	r3, [r1, #0]
}
 8001dc6:	bf00      	nop
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	08007a10 	.word	0x08007a10

08001dd8 <LL_DMA_SetPeriphSize>:
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	4a0c      	ldr	r2, [pc, #48]	; (8001e1c <LL_DMA_SetPeriphSize+0x44>)
 8001dea:	5cd3      	ldrb	r3, [r2, r3]
 8001dec:	461a      	mov	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	4413      	add	r3, r2
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	4907      	ldr	r1, [pc, #28]	; (8001e1c <LL_DMA_SetPeriphSize+0x44>)
 8001dfe:	5ccb      	ldrb	r3, [r1, r3]
 8001e00:	4619      	mov	r1, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	440b      	add	r3, r1
 8001e06:	4619      	mov	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	600b      	str	r3, [r1, #0]
}
 8001e0e:	bf00      	nop
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	08007a10 	.word	0x08007a10

08001e20 <LL_DMA_SetMemorySize>:
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	4a0c      	ldr	r2, [pc, #48]	; (8001e64 <LL_DMA_SetMemorySize+0x44>)
 8001e32:	5cd3      	ldrb	r3, [r2, r3]
 8001e34:	461a      	mov	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4413      	add	r3, r2
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	4907      	ldr	r1, [pc, #28]	; (8001e64 <LL_DMA_SetMemorySize+0x44>)
 8001e46:	5ccb      	ldrb	r3, [r1, r3]
 8001e48:	4619      	mov	r1, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	440b      	add	r3, r1
 8001e4e:	4619      	mov	r1, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	600b      	str	r3, [r1, #0]
}
 8001e56:	bf00      	nop
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	08007a10 	.word	0x08007a10

08001e68 <LL_DMA_SetChannelPriorityLevel>:
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	4a0c      	ldr	r2, [pc, #48]	; (8001eac <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001e7a:	5cd3      	ldrb	r3, [r2, r3]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	4413      	add	r3, r2
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	4907      	ldr	r1, [pc, #28]	; (8001eac <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001e8e:	5ccb      	ldrb	r3, [r1, r3]
 8001e90:	4619      	mov	r1, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	440b      	add	r3, r1
 8001e96:	4619      	mov	r1, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	600b      	str	r3, [r1, #0]
}
 8001e9e:	bf00      	nop
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	08007a10 	.word	0x08007a10

08001eb0 <LL_DMA_SetDataLength>:
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	4a0c      	ldr	r2, [pc, #48]	; (8001ef4 <LL_DMA_SetDataLength+0x44>)
 8001ec2:	5cd3      	ldrb	r3, [r2, r3]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	4413      	add	r3, r2
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	0c1b      	lsrs	r3, r3, #16
 8001ece:	041b      	lsls	r3, r3, #16
 8001ed0:	68ba      	ldr	r2, [r7, #8]
 8001ed2:	3a01      	subs	r2, #1
 8001ed4:	4907      	ldr	r1, [pc, #28]	; (8001ef4 <LL_DMA_SetDataLength+0x44>)
 8001ed6:	5c8a      	ldrb	r2, [r1, r2]
 8001ed8:	4611      	mov	r1, r2
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	440a      	add	r2, r1
 8001ede:	4611      	mov	r1, r2
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	604b      	str	r3, [r1, #4]
}
 8001ee6:	bf00      	nop
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	08007a10 	.word	0x08007a10

08001ef8 <LL_DMA_SetMemoryAddress>:
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	4a06      	ldr	r2, [pc, #24]	; (8001f24 <LL_DMA_SetMemoryAddress+0x2c>)
 8001f0a:	5cd3      	ldrb	r3, [r2, r3]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	4413      	add	r3, r2
 8001f12:	461a      	mov	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	60d3      	str	r3, [r2, #12]
}
 8001f18:	bf00      	nop
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	08007a10 	.word	0x08007a10

08001f28 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	3b01      	subs	r3, #1
 8001f36:	4a0b      	ldr	r2, [pc, #44]	; (8001f64 <LL_DMA_EnableIT_TC+0x3c>)
 8001f38:	5cd3      	ldrb	r3, [r2, r3]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4413      	add	r3, r2
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	3a01      	subs	r2, #1
 8001f46:	4907      	ldr	r1, [pc, #28]	; (8001f64 <LL_DMA_EnableIT_TC+0x3c>)
 8001f48:	5c8a      	ldrb	r2, [r1, r2]
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	440a      	add	r2, r1
 8001f50:	f043 0302 	orr.w	r3, r3, #2
 8001f54:	6013      	str	r3, [r2, #0]
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	08007a10 	.word	0x08007a10

08001f68 <LL_AHB1_GRP1_EnableClock>:
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001f70:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f72:	695a      	ldr	r2, [r3, #20]
 8001f74:	4907      	ldr	r1, [pc, #28]	; (8001f94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f7e:	695a      	ldr	r2, [r3, #20]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4013      	ands	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f86:	68fb      	ldr	r3, [r7, #12]
}
 8001f88:	bf00      	nop
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	40021000 	.word	0x40021000

08001f98 <LL_APB1_GRP1_EnableClock>:
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001fa0:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fa2:	69da      	ldr	r2, [r3, #28]
 8001fa4:	4907      	ldr	r1, [pc, #28]	; (8001fc4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001fac:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fae:	69da      	ldr	r2, [r3, #28]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
}
 8001fb8:	bf00      	nop
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	40021000 	.word	0x40021000

08001fc8 <LL_USART_Enable>:
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f043 0201 	orr.w	r2, r3, #1
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	601a      	str	r2, [r3, #0]
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <LL_USART_ConfigAsyncMode>:
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	609a      	str	r2, [r3, #8]
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8002014:	b480      	push	{r7}
 8002016:	b089      	sub	sp, #36	; 0x24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3308      	adds	r3, #8
 8002020:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	e853 3f00 	ldrex	r3, [r3]
 8002028:	60bb      	str	r3, [r7, #8]
   return(result);
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002030:	61fb      	str	r3, [r7, #28]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3308      	adds	r3, #8
 8002036:	69fa      	ldr	r2, [r7, #28]
 8002038:	61ba      	str	r2, [r7, #24]
 800203a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800203c:	6979      	ldr	r1, [r7, #20]
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	e841 2300 	strex	r3, r2, [r1]
 8002044:	613b      	str	r3, [r7, #16]
   return(result);
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1e7      	bne.n	800201c <LL_USART_DisableIT_CTS+0x8>
}
 800204c:	bf00      	nop
 800204e:	bf00      	nop
 8002050:	3724      	adds	r7, #36	; 0x24
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
	...

0800205c <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08e      	sub	sp, #56	; 0x38
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002062:	f107 031c 	add.w	r3, r7, #28
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	605a      	str	r2, [r3, #4]
 800206c:	609a      	str	r2, [r3, #8]
 800206e:	60da      	str	r2, [r3, #12]
 8002070:	611a      	str	r2, [r3, #16]
 8002072:	615a      	str	r2, [r3, #20]
 8002074:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002076:	1d3b      	adds	r3, r7, #4
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
 8002084:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002086:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800208a:	f7ff ff85 	bl	8001f98 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800208e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002092:	f7ff ff69 	bl	8001f68 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 8002096:	f248 0304 	movw	r3, #32772	; 0x8004
 800209a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800209c:	2302      	movs	r3, #2
 800209e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80020a0:	2303      	movs	r3, #3
 80020a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80020ac:	2307      	movs	r3, #7
 80020ae:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b0:	1d3b      	adds	r3, r7, #4
 80020b2:	4619      	mov	r1, r3
 80020b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020b8:	f000 f9bc 	bl	8002434 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80020bc:	2200      	movs	r2, #0
 80020be:	2106      	movs	r1, #6
 80020c0:	4833      	ldr	r0, [pc, #204]	; (8002190 <MX_USART2_UART_Init+0x134>)
 80020c2:	f7ff fdf7 	bl	8001cb4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 80020c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020ca:	2106      	movs	r1, #6
 80020cc:	4830      	ldr	r0, [pc, #192]	; (8002190 <MX_USART2_UART_Init+0x134>)
 80020ce:	f7ff fecb 	bl	8001e68 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_CIRCULAR);
 80020d2:	2220      	movs	r2, #32
 80020d4:	2106      	movs	r1, #6
 80020d6:	482e      	ldr	r0, [pc, #184]	; (8002190 <MX_USART2_UART_Init+0x134>)
 80020d8:	f7ff fe12 	bl	8001d00 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 80020dc:	2200      	movs	r2, #0
 80020de:	2106      	movs	r1, #6
 80020e0:	482b      	ldr	r0, [pc, #172]	; (8002190 <MX_USART2_UART_Init+0x134>)
 80020e2:	f7ff fe31 	bl	8001d48 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 80020e6:	2280      	movs	r2, #128	; 0x80
 80020e8:	2106      	movs	r1, #6
 80020ea:	4829      	ldr	r0, [pc, #164]	; (8002190 <MX_USART2_UART_Init+0x134>)
 80020ec:	f7ff fe50 	bl	8001d90 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 80020f0:	2200      	movs	r2, #0
 80020f2:	2106      	movs	r1, #6
 80020f4:	4826      	ldr	r0, [pc, #152]	; (8002190 <MX_USART2_UART_Init+0x134>)
 80020f6:	f7ff fe6f 	bl	8001dd8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2106      	movs	r1, #6
 80020fe:	4824      	ldr	r0, [pc, #144]	; (8002190 <MX_USART2_UART_Init+0x134>)
 8002100:	f7ff fe8e 	bl	8001e20 <LL_DMA_SetMemorySize>

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8002104:	2210      	movs	r2, #16
 8002106:	2107      	movs	r1, #7
 8002108:	4821      	ldr	r0, [pc, #132]	; (8002190 <MX_USART2_UART_Init+0x134>)
 800210a:	f7ff fdd3 	bl	8001cb4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 800210e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002112:	2107      	movs	r1, #7
 8002114:	481e      	ldr	r0, [pc, #120]	; (8002190 <MX_USART2_UART_Init+0x134>)
 8002116:	f7ff fea7 	bl	8001e68 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 800211a:	2200      	movs	r2, #0
 800211c:	2107      	movs	r1, #7
 800211e:	481c      	ldr	r0, [pc, #112]	; (8002190 <MX_USART2_UART_Init+0x134>)
 8002120:	f7ff fdee 	bl	8001d00 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8002124:	2200      	movs	r2, #0
 8002126:	2107      	movs	r1, #7
 8002128:	4819      	ldr	r0, [pc, #100]	; (8002190 <MX_USART2_UART_Init+0x134>)
 800212a:	f7ff fe0d 	bl	8001d48 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 800212e:	2280      	movs	r2, #128	; 0x80
 8002130:	2107      	movs	r1, #7
 8002132:	4817      	ldr	r0, [pc, #92]	; (8002190 <MX_USART2_UART_Init+0x134>)
 8002134:	f7ff fe2c 	bl	8001d90 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8002138:	2200      	movs	r2, #0
 800213a:	2107      	movs	r1, #7
 800213c:	4814      	ldr	r0, [pc, #80]	; (8002190 <MX_USART2_UART_Init+0x134>)
 800213e:	f7ff fe4b 	bl	8001dd8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8002142:	2200      	movs	r2, #0
 8002144:	2107      	movs	r1, #7
 8002146:	4812      	ldr	r0, [pc, #72]	; (8002190 <MX_USART2_UART_Init+0x134>)
 8002148:	f7ff fe6a 	bl	8001e20 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800214c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002150:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002152:	2300      	movs	r3, #0
 8002154:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002156:	2300      	movs	r3, #0
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800215a:	2300      	movs	r3, #0
 800215c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800215e:	230c      	movs	r3, #12
 8002160:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002162:	2300      	movs	r3, #0
 8002164:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002166:	2300      	movs	r3, #0
 8002168:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800216a:	f107 031c 	add.w	r3, r7, #28
 800216e:	4619      	mov	r1, r3
 8002170:	4808      	ldr	r0, [pc, #32]	; (8002194 <MX_USART2_UART_Init+0x138>)
 8002172:	f000 fcc5 	bl	8002b00 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 8002176:	4807      	ldr	r0, [pc, #28]	; (8002194 <MX_USART2_UART_Init+0x138>)
 8002178:	f7ff ff4c 	bl	8002014 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 800217c:	4805      	ldr	r0, [pc, #20]	; (8002194 <MX_USART2_UART_Init+0x138>)
 800217e:	f7ff ff33 	bl	8001fe8 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8002182:	4804      	ldr	r0, [pc, #16]	; (8002194 <MX_USART2_UART_Init+0x138>)
 8002184:	f7ff ff20 	bl	8001fc8 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002188:	bf00      	nop
 800218a:	3738      	adds	r7, #56	; 0x38
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40020000 	.word	0x40020000
 8002194:	40004400 	.word	0x40004400

08002198 <USART2_PutBuffer>:

void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	461a      	mov	r2, r3
 80021a8:	2107      	movs	r1, #7
 80021aa:	480a      	ldr	r0, [pc, #40]	; (80021d4 <USART2_PutBuffer+0x3c>)
 80021ac:	f7ff fea4 	bl	8001ef8 <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 80021b0:	78fb      	ldrb	r3, [r7, #3]
 80021b2:	461a      	mov	r2, r3
 80021b4:	2107      	movs	r1, #7
 80021b6:	4807      	ldr	r0, [pc, #28]	; (80021d4 <USART2_PutBuffer+0x3c>)
 80021b8:	f7ff fe7a 	bl	8001eb0 <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 80021bc:	2107      	movs	r1, #7
 80021be:	4805      	ldr	r0, [pc, #20]	; (80021d4 <USART2_PutBuffer+0x3c>)
 80021c0:	f7ff feb2 	bl	8001f28 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 80021c4:	2107      	movs	r1, #7
 80021c6:	4803      	ldr	r0, [pc, #12]	; (80021d4 <USART2_PutBuffer+0x3c>)
 80021c8:	f7ff fd54 	bl	8001c74 <LL_DMA_EnableChannel>
}
 80021cc:	bf00      	nop
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40020000 	.word	0x40020000

080021d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80021d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002210 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80021dc:	f7ff fd38 	bl	8001c50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021e0:	480c      	ldr	r0, [pc, #48]	; (8002214 <LoopForever+0x6>)
  ldr r1, =_edata
 80021e2:	490d      	ldr	r1, [pc, #52]	; (8002218 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021e4:	4a0d      	ldr	r2, [pc, #52]	; (800221c <LoopForever+0xe>)
  movs r3, #0
 80021e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021e8:	e002      	b.n	80021f0 <LoopCopyDataInit>

080021ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ee:	3304      	adds	r3, #4

080021f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021f4:	d3f9      	bcc.n	80021ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021f6:	4a0a      	ldr	r2, [pc, #40]	; (8002220 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021f8:	4c0a      	ldr	r4, [pc, #40]	; (8002224 <LoopForever+0x16>)
  movs r3, #0
 80021fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021fc:	e001      	b.n	8002202 <LoopFillZerobss>

080021fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002200:	3204      	adds	r2, #4

08002202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002204:	d3fb      	bcc.n	80021fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002206:	f001 fff7 	bl	80041f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800220a:	f7ff fb13 	bl	8001834 <main>

0800220e <LoopForever>:

LoopForever:
    b LoopForever
 800220e:	e7fe      	b.n	800220e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002210:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002214:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002218:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 800221c:	08007e48 	.word	0x08007e48
  ldr r2, =_sbss
 8002220:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8002224:	20000344 	.word	0x20000344

08002228 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002228:	e7fe      	b.n	8002228 <ADC1_2_IRQHandler>

0800222a <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800222a:	b480      	push	{r7}
 800222c:	b089      	sub	sp, #36	; 0x24
 800222e:	af00      	add	r7, sp, #0
 8002230:	60f8      	str	r0, [r7, #12]
 8002232:	60b9      	str	r1, [r7, #8]
 8002234:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	fa93 f3a3 	rbit	r3, r3
 8002244:	613b      	str	r3, [r7, #16]
  return result;
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	fab3 f383 	clz	r3, r3
 800224c:	b2db      	uxtb	r3, r3
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	2103      	movs	r1, #3
 8002252:	fa01 f303 	lsl.w	r3, r1, r3
 8002256:	43db      	mvns	r3, r3
 8002258:	401a      	ands	r2, r3
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	fa93 f3a3 	rbit	r3, r3
 8002264:	61bb      	str	r3, [r7, #24]
  return result;
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	fab3 f383 	clz	r3, r3
 800226c:	b2db      	uxtb	r3, r3
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	fa01 f303 	lsl.w	r3, r1, r3
 8002276:	431a      	orrs	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	601a      	str	r2, [r3, #0]
}
 800227c:	bf00      	nop
 800227e:	3724      	adds	r7, #36	; 0x24
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	43db      	mvns	r3, r3
 800229c:	401a      	ands	r2, r3
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	fb01 f303 	mul.w	r3, r1, r3
 80022a6:	431a      	orrs	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	605a      	str	r2, [r3, #4]
}
 80022ac:	bf00      	nop
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b089      	sub	sp, #36	; 0x24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	fa93 f3a3 	rbit	r3, r3
 80022d2:	613b      	str	r3, [r7, #16]
  return result;
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	fab3 f383 	clz	r3, r3
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	2103      	movs	r1, #3
 80022e0:	fa01 f303 	lsl.w	r3, r1, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	401a      	ands	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	fa93 f3a3 	rbit	r3, r3
 80022f2:	61bb      	str	r3, [r7, #24]
  return result;
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	fab3 f383 	clz	r3, r3
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	fa01 f303 	lsl.w	r3, r1, r3
 8002304:	431a      	orrs	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800230a:	bf00      	nop
 800230c:	3724      	adds	r7, #36	; 0x24
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002316:	b480      	push	{r7}
 8002318:	b089      	sub	sp, #36	; 0x24
 800231a:	af00      	add	r7, sp, #0
 800231c:	60f8      	str	r0, [r7, #12]
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	68da      	ldr	r2, [r3, #12]
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	fa93 f3a3 	rbit	r3, r3
 8002330:	613b      	str	r3, [r7, #16]
  return result;
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	fab3 f383 	clz	r3, r3
 8002338:	b2db      	uxtb	r3, r3
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	2103      	movs	r1, #3
 800233e:	fa01 f303 	lsl.w	r3, r1, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	401a      	ands	r2, r3
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	fa93 f3a3 	rbit	r3, r3
 8002350:	61bb      	str	r3, [r7, #24]
  return result;
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	fab3 f383 	clz	r3, r3
 8002358:	b2db      	uxtb	r3, r3
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	fa01 f303 	lsl.w	r3, r1, r3
 8002362:	431a      	orrs	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	60da      	str	r2, [r3, #12]
}
 8002368:	bf00      	nop
 800236a:	3724      	adds	r7, #36	; 0x24
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002374:	b480      	push	{r7}
 8002376:	b089      	sub	sp, #36	; 0x24
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6a1a      	ldr	r2, [r3, #32]
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	fa93 f3a3 	rbit	r3, r3
 800238e:	613b      	str	r3, [r7, #16]
  return result;
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	fab3 f383 	clz	r3, r3
 8002396:	b2db      	uxtb	r3, r3
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	210f      	movs	r1, #15
 800239c:	fa01 f303 	lsl.w	r3, r1, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	401a      	ands	r2, r3
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	fa93 f3a3 	rbit	r3, r3
 80023ae:	61bb      	str	r3, [r7, #24]
  return result;
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	fab3 f383 	clz	r3, r3
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	fa01 f303 	lsl.w	r3, r1, r3
 80023c0:	431a      	orrs	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80023c6:	bf00      	nop
 80023c8:	3724      	adds	r7, #36	; 0x24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b089      	sub	sp, #36	; 0x24
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	60f8      	str	r0, [r7, #12]
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	0a1b      	lsrs	r3, r3, #8
 80023e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	fa93 f3a3 	rbit	r3, r3
 80023ee:	613b      	str	r3, [r7, #16]
  return result;
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	fab3 f383 	clz	r3, r3
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	210f      	movs	r1, #15
 80023fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	401a      	ands	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	0a1b      	lsrs	r3, r3, #8
 8002408:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	fa93 f3a3 	rbit	r3, r3
 8002410:	61bb      	str	r3, [r7, #24]
  return result;
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	fab3 f383 	clz	r3, r3
 8002418:	b2db      	uxtb	r3, r3
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	fa01 f303 	lsl.w	r3, r1, r3
 8002422:	431a      	orrs	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002428:	bf00      	nop
 800242a:	3724      	adds	r7, #36	; 0x24
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b088      	sub	sp, #32
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	fa93 f3a3 	rbit	r3, r3
 800244a:	613b      	str	r3, [r7, #16]
  return result;
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	fab3 f383 	clz	r3, r3
 8002452:	b2db      	uxtb	r3, r3
 8002454:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002456:	e051      	b.n	80024fc <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	2101      	movs	r1, #1
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	fa01 f303 	lsl.w	r3, r1, r3
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d043      	beq.n	80024f6 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d003      	beq.n	800247e <LL_GPIO_Init+0x4a>
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d10e      	bne.n	800249c <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	461a      	mov	r2, r3
 8002484:	69b9      	ldr	r1, [r7, #24]
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7ff ff16 	bl	80022b8 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	6819      	ldr	r1, [r3, #0]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	461a      	mov	r2, r3
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff fef6 	bl	8002288 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	461a      	mov	r2, r3
 80024a2:	69b9      	ldr	r1, [r7, #24]
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7ff ff36 	bl	8002316 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d11a      	bne.n	80024e8 <LL_GPIO_Init+0xb4>
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	fa93 f3a3 	rbit	r3, r3
 80024bc:	60bb      	str	r3, [r7, #8]
  return result;
 80024be:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80024c0:	fab3 f383 	clz	r3, r3
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b07      	cmp	r3, #7
 80024c8:	d807      	bhi.n	80024da <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	461a      	mov	r2, r3
 80024d0:	69b9      	ldr	r1, [r7, #24]
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7ff ff4e 	bl	8002374 <LL_GPIO_SetAFPin_0_7>
 80024d8:	e006      	b.n	80024e8 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	461a      	mov	r2, r3
 80024e0:	69b9      	ldr	r1, [r7, #24]
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7ff ff75 	bl	80023d2 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	461a      	mov	r2, r3
 80024ee:	69b9      	ldr	r1, [r7, #24]
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff fe9a 	bl	800222a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	3301      	adds	r3, #1
 80024fa:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	fa22 f303 	lsr.w	r3, r2, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1a6      	bne.n	8002458 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3720      	adds	r7, #32
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <LL_I2C_Enable>:
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f043 0201 	orr.w	r2, r3, #1
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	601a      	str	r2, [r3, #0]
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <LL_I2C_Disable>:
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f023 0201 	bic.w	r2, r3, #1
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	601a      	str	r2, [r3, #0]
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <LL_I2C_ConfigFilters>:
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	0219      	lsls	r1, r3, #8
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	430b      	orrs	r3, r1
 8002570:	431a      	orrs	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	601a      	str	r2, [r3, #0]
}
 8002576:	bf00      	nop
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <LL_I2C_SetOwnAddress1>:
{
 8002582:	b480      	push	{r7}
 8002584:	b085      	sub	sp, #20
 8002586:	af00      	add	r7, sp, #0
 8002588:	60f8      	str	r0, [r7, #12]
 800258a:	60b9      	str	r1, [r7, #8]
 800258c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002596:	f023 0307 	bic.w	r3, r3, #7
 800259a:	68b9      	ldr	r1, [r7, #8]
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	430a      	orrs	r2, r1
 80025a0:	431a      	orrs	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	609a      	str	r2, [r3, #8]
}
 80025a6:	bf00      	nop
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <LL_I2C_EnableOwnAddress1>:
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	609a      	str	r2, [r3, #8]
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <LL_I2C_DisableOwnAddress1>:
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	609a      	str	r2, [r3, #8]
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <LL_I2C_SetTiming>:
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
 80025fa:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	611a      	str	r2, [r3, #16]
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <LL_I2C_SetMode>:
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
 8002616:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	601a      	str	r2, [r3, #0]
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <LL_I2C_AcknowledgeNextData>:
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	605a      	str	r2, [r3, #4]
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7ff ff65 	bl	8002534 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	6899      	ldr	r1, [r3, #8]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	461a      	mov	r2, r3
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff ff6d 	bl	8002554 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	4619      	mov	r1, r3
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff ffb6 	bl	80025f2 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7ff ff44 	bl	8002514 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f7ff ffa0 	bl	80025d2 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	6919      	ldr	r1, [r3, #16]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	461a      	mov	r2, r3
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7ff ff70 	bl	8002582 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d002      	beq.n	80026b0 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7ff ff81 	bl	80025b2 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4619      	mov	r1, r3
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7ff ffa9 	bl	800260e <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	4619      	mov	r1, r3
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7ff ffb6 	bl	8002634 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
	...

080026d4 <LL_RCC_HSI_IsReady>:
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80026d8:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <LL_RCC_HSI_IsReady+0x20>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	bf0c      	ite	eq
 80026e4:	2301      	moveq	r3, #1
 80026e6:	2300      	movne	r3, #0
 80026e8:	b2db      	uxtb	r3, r3
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	40021000 	.word	0x40021000

080026f8 <LL_RCC_LSE_IsReady>:
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <LL_RCC_LSE_IsReady+0x20>)
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b02      	cmp	r3, #2
 8002706:	bf0c      	ite	eq
 8002708:	2301      	moveq	r3, #1
 800270a:	2300      	movne	r3, #0
 800270c:	b2db      	uxtb	r3, r3
}
 800270e:	4618      	mov	r0, r3
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	40021000 	.word	0x40021000

0800271c <LL_RCC_GetSysClkSource>:
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002720:	4b04      	ldr	r3, [pc, #16]	; (8002734 <LL_RCC_GetSysClkSource+0x18>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 030c 	and.w	r3, r3, #12
}
 8002728:	4618      	mov	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	40021000 	.word	0x40021000

08002738 <LL_RCC_GetAHBPrescaler>:
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800273c:	4b04      	ldr	r3, [pc, #16]	; (8002750 <LL_RCC_GetAHBPrescaler+0x18>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002744:	4618      	mov	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40021000 	.word	0x40021000

08002754 <LL_RCC_GetAPB1Prescaler>:
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002758:	4b04      	ldr	r3, [pc, #16]	; (800276c <LL_RCC_GetAPB1Prescaler+0x18>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002760:	4618      	mov	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40021000 	.word	0x40021000

08002770 <LL_RCC_GetAPB2Prescaler>:
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002774:	4b04      	ldr	r3, [pc, #16]	; (8002788 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800277c:	4618      	mov	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40021000 	.word	0x40021000

0800278c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8002794:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <LL_RCC_GetUSARTClockSource+0x28>)
 8002796:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002798:	2103      	movs	r1, #3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	fa01 f303 	lsl.w	r3, r1, r3
 80027a0:	401a      	ands	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	061b      	lsls	r3, r3, #24
 80027a6:	4313      	orrs	r3, r2
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	40021000 	.word	0x40021000

080027b8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80027bc:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <LL_RCC_PLL_GetMainSource+0x18>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40021000 	.word	0x40021000

080027d4 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 80027d8:	4b04      	ldr	r3, [pc, #16]	; (80027ec <LL_RCC_PLL_GetMultiplicator+0x18>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	40021000 	.word	0x40021000

080027f0 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 80027f4:	4b04      	ldr	r3, [pc, #16]	; (8002808 <LL_RCC_PLL_GetPrediv+0x18>)
 80027f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f8:	f003 030f 	and.w	r3, r3, #15
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	40021000 	.word	0x40021000

0800280c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002814:	f000 f862 	bl	80028dc <RCC_GetSystemClockFreq>
 8002818:	4602      	mov	r2, r0
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f000 f880 	bl	8002928 <RCC_GetHCLKClockFreq>
 8002828:	4602      	mov	r2, r0
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	4618      	mov	r0, r3
 8002834:	f000 f88e 	bl	8002954 <RCC_GetPCLK1ClockFreq>
 8002838:	4602      	mov	r2, r0
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	4618      	mov	r0, r3
 8002844:	f000 f89a 	bl	800297c <RCC_GetPCLK2ClockFreq>
 8002848:	4602      	mov	r2, r0
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	60da      	str	r2, [r3, #12]
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002860:	2300      	movs	r3, #0
 8002862:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d130      	bne.n	80028cc <LL_RCC_GetUSARTClockFreq+0x74>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7ff ff8e 	bl	800278c <LL_RCC_GetUSARTClockSource>
 8002870:	4603      	mov	r3, r0
 8002872:	2b03      	cmp	r3, #3
 8002874:	d00a      	beq.n	800288c <LL_RCC_GetUSARTClockFreq+0x34>
 8002876:	2b03      	cmp	r3, #3
 8002878:	d819      	bhi.n	80028ae <LL_RCC_GetUSARTClockFreq+0x56>
 800287a:	2b01      	cmp	r3, #1
 800287c:	d002      	beq.n	8002884 <LL_RCC_GetUSARTClockFreq+0x2c>
 800287e:	2b02      	cmp	r3, #2
 8002880:	d00c      	beq.n	800289c <LL_RCC_GetUSARTClockFreq+0x44>
 8002882:	e014      	b.n	80028ae <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002884:	f000 f82a 	bl	80028dc <RCC_GetSystemClockFreq>
 8002888:	60f8      	str	r0, [r7, #12]
        break;
 800288a:	e01f      	b.n	80028cc <LL_RCC_GetUSARTClockFreq+0x74>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800288c:	f7ff ff22 	bl	80026d4 <LL_RCC_HSI_IsReady>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d017      	beq.n	80028c6 <LL_RCC_GetUSARTClockFreq+0x6e>
        {
          usart_frequency = HSI_VALUE;
 8002896:	4b10      	ldr	r3, [pc, #64]	; (80028d8 <LL_RCC_GetUSARTClockFreq+0x80>)
 8002898:	60fb      	str	r3, [r7, #12]
        }
        break;
 800289a:	e014      	b.n	80028c6 <LL_RCC_GetUSARTClockFreq+0x6e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800289c:	f7ff ff2c 	bl	80026f8 <LL_RCC_LSE_IsReady>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d011      	beq.n	80028ca <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = LSE_VALUE;
 80028a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028aa:	60fb      	str	r3, [r7, #12]
        }
        break;
 80028ac:	e00d      	b.n	80028ca <LL_RCC_GetUSARTClockFreq+0x72>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80028ae:	f000 f815 	bl	80028dc <RCC_GetSystemClockFreq>
 80028b2:	4603      	mov	r3, r0
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 f837 	bl	8002928 <RCC_GetHCLKClockFreq>
 80028ba:	4603      	mov	r3, r0
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 f849 	bl	8002954 <RCC_GetPCLK1ClockFreq>
 80028c2:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 80028c4:	e002      	b.n	80028cc <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 80028c6:	bf00      	nop
 80028c8:	e000      	b.n	80028cc <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 80028ca:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 80028cc:	68fb      	ldr	r3, [r7, #12]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	007a1200 	.word	0x007a1200

080028dc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80028e6:	f7ff ff19 	bl	800271c <LL_RCC_GetSysClkSource>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b08      	cmp	r3, #8
 80028ee:	d00c      	beq.n	800290a <RCC_GetSystemClockFreq+0x2e>
 80028f0:	2b08      	cmp	r3, #8
 80028f2:	d80e      	bhi.n	8002912 <RCC_GetSystemClockFreq+0x36>
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d002      	beq.n	80028fe <RCC_GetSystemClockFreq+0x22>
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d003      	beq.n	8002904 <RCC_GetSystemClockFreq+0x28>
 80028fc:	e009      	b.n	8002912 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80028fe:	4b09      	ldr	r3, [pc, #36]	; (8002924 <RCC_GetSystemClockFreq+0x48>)
 8002900:	607b      	str	r3, [r7, #4]
      break;
 8002902:	e009      	b.n	8002918 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002904:	4b07      	ldr	r3, [pc, #28]	; (8002924 <RCC_GetSystemClockFreq+0x48>)
 8002906:	607b      	str	r3, [r7, #4]
      break;
 8002908:	e006      	b.n	8002918 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800290a:	f000 f84b 	bl	80029a4 <RCC_PLL_GetFreqDomain_SYS>
 800290e:	6078      	str	r0, [r7, #4]
      break;
 8002910:	e002      	b.n	8002918 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8002912:	4b04      	ldr	r3, [pc, #16]	; (8002924 <RCC_GetSystemClockFreq+0x48>)
 8002914:	607b      	str	r3, [r7, #4]
      break;
 8002916:	bf00      	nop
  }

  return frequency;
 8002918:	687b      	ldr	r3, [r7, #4]
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	007a1200 	.word	0x007a1200

08002928 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002930:	f7ff ff02 	bl	8002738 <LL_RCC_GetAHBPrescaler>
 8002934:	4603      	mov	r3, r0
 8002936:	091b      	lsrs	r3, r3, #4
 8002938:	f003 030f 	and.w	r3, r3, #15
 800293c:	4a04      	ldr	r2, [pc, #16]	; (8002950 <RCC_GetHCLKClockFreq+0x28>)
 800293e:	5cd3      	ldrb	r3, [r2, r3]
 8002940:	461a      	mov	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	40d3      	lsrs	r3, r2
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	080079f8 	.word	0x080079f8

08002954 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800295c:	f7ff fefa 	bl	8002754 <LL_RCC_GetAPB1Prescaler>
 8002960:	4603      	mov	r3, r0
 8002962:	0a1b      	lsrs	r3, r3, #8
 8002964:	4a04      	ldr	r2, [pc, #16]	; (8002978 <RCC_GetPCLK1ClockFreq+0x24>)
 8002966:	5cd3      	ldrb	r3, [r2, r3]
 8002968:	461a      	mov	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	40d3      	lsrs	r3, r2
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	08007a08 	.word	0x08007a08

0800297c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002984:	f7ff fef4 	bl	8002770 <LL_RCC_GetAPB2Prescaler>
 8002988:	4603      	mov	r3, r0
 800298a:	0adb      	lsrs	r3, r3, #11
 800298c:	4a04      	ldr	r2, [pc, #16]	; (80029a0 <RCC_GetPCLK2ClockFreq+0x24>)
 800298e:	5cd3      	ldrb	r3, [r2, r3]
 8002990:	461a      	mov	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	40d3      	lsrs	r3, r2
}
 8002996:	4618      	mov	r0, r3
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	08007a08 	.word	0x08007a08

080029a4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80029a4:	b590      	push	{r4, r7, lr}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	2300      	movs	r3, #0
 80029b0:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80029b2:	f7ff ff01 	bl	80027b8 <LL_RCC_PLL_GetMainSource>
 80029b6:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d004      	beq.n	80029c8 <RCC_PLL_GetFreqDomain_SYS+0x24>
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c4:	d003      	beq.n	80029ce <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80029c6:	e005      	b.n	80029d4 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80029c8:	4b13      	ldr	r3, [pc, #76]	; (8002a18 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80029ca:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80029cc:	e005      	b.n	80029da <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80029ce:	4b13      	ldr	r3, [pc, #76]	; (8002a1c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80029d0:	60fb      	str	r3, [r7, #12]
      break;
 80029d2:	e002      	b.n	80029da <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 80029d4:	4b10      	ldr	r3, [pc, #64]	; (8002a18 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80029d6:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80029d8:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 80029da:	f7ff ff09 	bl	80027f0 <LL_RCC_PLL_GetPrediv>
 80029de:	4603      	mov	r3, r0
 80029e0:	3301      	adds	r3, #1
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	fbb2 f4f3 	udiv	r4, r2, r3
 80029e8:	f7ff fef4 	bl	80027d4 <LL_RCC_PLL_GetMultiplicator>
 80029ec:	4603      	mov	r3, r0
 80029ee:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80029f2:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80029f6:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	fa92 f2a2 	rbit	r2, r2
 80029fe:	603a      	str	r2, [r7, #0]
  return result;
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	fab2 f282 	clz	r2, r2
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	40d3      	lsrs	r3, r2
 8002a0a:	3302      	adds	r3, #2
 8002a0c:	fb04 f303 	mul.w	r3, r4, r3
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd90      	pop	{r4, r7, pc}
 8002a18:	003d0900 	.word	0x003d0900
 8002a1c:	007a1200 	.word	0x007a1200

08002a20 <LL_USART_IsEnabled>:
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d101      	bne.n	8002a38 <LL_USART_IsEnabled+0x18>
 8002a34:	2301      	movs	r3, #1
 8002a36:	e000      	b.n	8002a3a <LL_USART_IsEnabled+0x1a>
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <LL_USART_SetStopBitsLength>:
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
 8002a4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	605a      	str	r2, [r3, #4]
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <LL_USART_SetHWFlowCtrl>:
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	431a      	orrs	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	609a      	str	r2, [r3, #8]
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <LL_USART_SetBaudRate>:
{
 8002a92:	b480      	push	{r7}
 8002a94:	b087      	sub	sp, #28
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	60f8      	str	r0, [r7, #12]
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	607a      	str	r2, [r7, #4]
 8002a9e:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aa6:	d11a      	bne.n	8002ade <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	005a      	lsls	r2, r3, #1
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	085b      	lsrs	r3, r3, #1
 8002ab0:	441a      	add	r2, r3
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	085b      	lsrs	r3, r3, #1
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	60da      	str	r2, [r3, #12]
}
 8002adc:	e00a      	b.n	8002af4 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	085a      	lsrs	r2, r3, #1
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	441a      	add	r2, r3
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	461a      	mov	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	60da      	str	r2, [r3, #12]
}
 8002af4:	bf00      	nop
 8002af6:	371c      	adds	r7, #28
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b088      	sub	sp, #32
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7ff ff84 	bl	8002a20 <LL_USART_IsEnabled>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d14e      	bne.n	8002bbc <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	4b29      	ldr	r3, [pc, #164]	; (8002bc8 <LL_USART_Init+0xc8>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	6851      	ldr	r1, [r2, #4]
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	68d2      	ldr	r2, [r2, #12]
 8002b2e:	4311      	orrs	r1, r2
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	6912      	ldr	r2, [r2, #16]
 8002b34:	4311      	orrs	r1, r2
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	6992      	ldr	r2, [r2, #24]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	4619      	mov	r1, r3
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7ff ff7c 	bl	8002a46 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	4619      	mov	r1, r3
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7ff ff89 	bl	8002a6c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a1b      	ldr	r2, [pc, #108]	; (8002bcc <LL_USART_Init+0xcc>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d104      	bne.n	8002b6c <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002b62:	2000      	movs	r0, #0
 8002b64:	f7ff fe78 	bl	8002858 <LL_RCC_GetUSARTClockFreq>
 8002b68:	61b8      	str	r0, [r7, #24]
 8002b6a:	e016      	b.n	8002b9a <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a18      	ldr	r2, [pc, #96]	; (8002bd0 <LL_USART_Init+0xd0>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d107      	bne.n	8002b84 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002b74:	f107 0308 	add.w	r3, r7, #8
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff fe47 	bl	800280c <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	61bb      	str	r3, [r7, #24]
 8002b82:	e00a      	b.n	8002b9a <LL_USART_Init+0x9a>
#endif /* USART2 Clock selector flag */
    }
    else if (USARTx == USART3)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a13      	ldr	r2, [pc, #76]	; (8002bd4 <LL_USART_Init+0xd4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d106      	bne.n	8002b9a <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002b8c:	f107 0308 	add.w	r3, r7, #8
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff fe3b 	bl	800280c <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00d      	beq.n	8002bbc <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d009      	beq.n	8002bbc <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8002bb4:	69b9      	ldr	r1, [r7, #24]
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7ff ff6b 	bl	8002a92 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002bbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3720      	adds	r7, #32
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	efff69f3 	.word	0xefff69f3
 8002bcc:	40013800 	.word	0x40013800
 8002bd0:	40004400 	.word	0x40004400
 8002bd4:	40004800 	.word	0x40004800

08002bd8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bea:	4a07      	ldr	r2, [pc, #28]	; (8002c08 <LL_InitTick+0x30>)
 8002bec:	3b01      	subs	r3, #1
 8002bee:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002bf0:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <LL_InitTick+0x30>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bf6:	4b04      	ldr	r3, [pc, #16]	; (8002c08 <LL_InitTick+0x30>)
 8002bf8:	2205      	movs	r2, #5
 8002bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	e000e010 	.word	0xe000e010

08002c0c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002c14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7ff ffdd 	bl	8002bd8 <LL_InitTick>
}
 8002c1e:	bf00      	nop
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
	...

08002c28 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002c30:	4b0f      	ldr	r3, [pc, #60]	; (8002c70 <LL_mDelay+0x48>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002c36:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3e:	d00c      	beq.n	8002c5a <LL_mDelay+0x32>
  {
    Delay++;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3301      	adds	r3, #1
 8002c44:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002c46:	e008      	b.n	8002c5a <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002c48:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <LL_mDelay+0x48>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d002      	beq.n	8002c5a <LL_mDelay+0x32>
    {
      Delay--;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1f3      	bne.n	8002c48 <LL_mDelay+0x20>
    }
  }
}
 8002c60:	bf00      	nop
 8002c62:	bf00      	nop
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	e000e010 	.word	0xe000e010

08002c74 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002c7c:	4a04      	ldr	r2, [pc, #16]	; (8002c90 <LL_SetSystemCoreClock+0x1c>)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6013      	str	r3, [r2, #0]
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	20000000 	.word	0x20000000

08002c94 <HTS221_read>:

uint8_t hts221_add = HTS221_DEVICE_ADDRESS;

// HTS221_read_byte implementation
uint8_t HTS221_read(uint8_t reg_add)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af02      	add	r7, sp, #8
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	73fb      	strb	r3, [r7, #15]
	return *(i2c_read(&data, 1, reg_add, hts221_add, 0));
 8002ca2:	4b08      	ldr	r3, [pc, #32]	; (8002cc4 <HTS221_read+0x30>)
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	79fa      	ldrb	r2, [r7, #7]
 8002ca8:	f107 000f 	add.w	r0, r7, #15
 8002cac:	2100      	movs	r1, #0
 8002cae:	9100      	str	r1, [sp, #0]
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	f7fe fb8d 	bl	80013d0 <i2c_read>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	781b      	ldrb	r3, [r3, #0]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20000004 	.word	0x20000004

08002cc8 <HTS221_write>:

// HTS221_write_byte implementation
void HTS221_write(uint8_t data, uint8_t reg_add, uint8_t slave_add)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	71fb      	strb	r3, [r7, #7]
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	71bb      	strb	r3, [r7, #6]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	717b      	strb	r3, [r7, #5]
	i2c_write(data, reg_add, slave_add, 0);
 8002cda:	797a      	ldrb	r2, [r7, #5]
 8002cdc:	79b9      	ldrb	r1, [r7, #6]
 8002cde:	79f8      	ldrb	r0, [r7, #7]
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	f7fe fb31 	bl	8001348 <i2c_write>
}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
	...

08002cf0 <HTS221_array>:

void HTS221_array(uint8_t *data, uint8_t reg, uint8_t length)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af02      	add	r7, sp, #8
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	70fb      	strb	r3, [r7, #3]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	70bb      	strb	r3, [r7, #2]
	i2c_read(data, length, reg, hts221_add, 1);
 8002d00:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <HTS221_array+0x2c>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	78fa      	ldrb	r2, [r7, #3]
 8002d06:	78b9      	ldrb	r1, [r7, #2]
 8002d08:	2001      	movs	r0, #1
 8002d0a:	9000      	str	r0, [sp, #0]
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7fe fb5f 	bl	80013d0 <i2c_read>
}
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	20000004 	.word	0x20000004

08002d20 <HTS221_Init>:

uint8_t HTS221_Init()
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
	uint8_t state = 1;
 8002d26:	2301      	movs	r3, #1
 8002d28:	71fb      	strb	r3, [r7, #7]
	uint8_t a = HTS221_read(HTS221_WHO_AM_I_ADDRESS);
 8002d2a:	200f      	movs	r0, #15
 8002d2c:	f7ff ffb2 	bl	8002c94 <HTS221_read>
 8002d30:	4603      	mov	r3, r0
 8002d32:	71bb      	strb	r3, [r7, #6]
	if (a != HTS221_WHO_AM_I_VALUE)
 8002d34:	79bb      	ldrb	r3, [r7, #6]
 8002d36:	2bbc      	cmp	r3, #188	; 0xbc
 8002d38:	d003      	beq.n	8002d42 <HTS221_Init+0x22>
	{
		state = 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	71fb      	strb	r3, [r7, #7]
		return state;
 8002d3e:	79fb      	ldrb	r3, [r7, #7]
 8002d40:	e025      	b.n	8002d8e <HTS221_Init+0x6e>
	}

	uint8_t reg_status = HTS221_read(HTS221_CONTROL_REG);
 8002d42:	2020      	movs	r0, #32
 8002d44:	f7ff ffa6 	bl	8002c94 <HTS221_read>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	717b      	strb	r3, [r7, #5]
	// PD mode ON (power on)
	reg_status |= (1 << 7);
 8002d4c:	797b      	ldrb	r3, [r7, #5]
 8002d4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d52:	717b      	strb	r3, [r7, #5]
	HTS221_write(reg_status, HTS221_CONTROL_REG, hts221_add);
 8002d54:	4b10      	ldr	r3, [pc, #64]	; (8002d98 <HTS221_Init+0x78>)
 8002d56:	781a      	ldrb	r2, [r3, #0]
 8002d58:	797b      	ldrb	r3, [r7, #5]
 8002d5a:	2120      	movs	r1, #32
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff ffb3 	bl	8002cc8 <HTS221_write>
	// Output data rate setup
	reg_status = HTS221_read(HTS221_CONTROL_REG);
 8002d62:	2020      	movs	r0, #32
 8002d64:	f7ff ff96 	bl	8002c94 <HTS221_read>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	717b      	strb	r3, [r7, #5]
	reg_status |= (1 << 0);
 8002d6c:	797b      	ldrb	r3, [r7, #5]
 8002d6e:	f043 0301 	orr.w	r3, r3, #1
 8002d72:	717b      	strb	r3, [r7, #5]
	HTS221_write(reg_status, HTS221_CONTROL_REG, hts221_add);
 8002d74:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <HTS221_Init+0x78>)
 8002d76:	781a      	ldrb	r2, [r3, #0]
 8002d78:	797b      	ldrb	r3, [r7, #5]
 8002d7a:	2120      	movs	r1, #32
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff ffa3 	bl	8002cc8 <HTS221_write>
	reg_status = HTS221_read(HTS221_CONTROL_REG);
 8002d82:	2020      	movs	r0, #32
 8002d84:	f7ff ff86 	bl	8002c94 <HTS221_read>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	717b      	strb	r3, [r7, #5]
	return state;
 8002d8c:	79fb      	ldrb	r3, [r7, #7]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	20000004 	.word	0x20000004

08002d9c <HTS221_get_temperature>:

float HTS221_get_temperature()
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b08a      	sub	sp, #40	; 0x28
 8002da0:	af00      	add	r7, sp, #0
	int16_t t0_degC_x8 = 0;
 8002da2:	2300      	movs	r3, #0
 8002da4:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t t1_degC_x8 = 0;
 8002da6:	2300      	movs	r3, #0
 8002da8:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t t0_t1_msb = 0;
 8002daa:	2300      	movs	r3, #0
 8002dac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	int16_t t0_out = 0;
 8002db0:	2300      	movs	r3, #0
 8002db2:	843b      	strh	r3, [r7, #32]
	int16_t t1_out = 0;
 8002db4:	2300      	movs	r3, #0
 8002db6:	83fb      	strh	r3, [r7, #30]

	// T0 temperature
	uint8_t t0_tmp = HTS221_read(HTS221_T0_DEG_C_x8);
 8002db8:	2032      	movs	r0, #50	; 0x32
 8002dba:	f7ff ff6b 	bl	8002c94 <HTS221_read>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	777b      	strb	r3, [r7, #29]
	t0_degC_x8 |= t0_tmp;
 8002dc2:	7f7b      	ldrb	r3, [r7, #29]
 8002dc4:	b21a      	sxth	r2, r3
 8002dc6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	84fb      	strh	r3, [r7, #38]	; 0x26

	uint8_t t0_out_tmp[2] = { 0 };
 8002dcc:	2300      	movs	r3, #0
 8002dce:	813b      	strh	r3, [r7, #8]
	HTS221_array(t0_out_tmp, HTS221_T0_OUT_L, 2);
 8002dd0:	f107 0308 	add.w	r3, r7, #8
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	213c      	movs	r1, #60	; 0x3c
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff ff89 	bl	8002cf0 <HTS221_array>
	t0_out |= t0_out_tmp[0];
 8002dde:	7a3b      	ldrb	r3, [r7, #8]
 8002de0:	b21a      	sxth	r2, r3
 8002de2:	8c3b      	ldrh	r3, [r7, #32]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	843b      	strh	r3, [r7, #32]
	t0_out |= (t0_out_tmp[1] << 8);
 8002de8:	7a7b      	ldrb	r3, [r7, #9]
 8002dea:	021b      	lsls	r3, r3, #8
 8002dec:	b21a      	sxth	r2, r3
 8002dee:	8c3b      	ldrh	r3, [r7, #32]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	843b      	strh	r3, [r7, #32]

	// T1 temperature
	uint8_t t1_temp = HTS221_read(HTS221_T1_DEG_C_x8);
 8002df4:	2033      	movs	r0, #51	; 0x33
 8002df6:	f7ff ff4d 	bl	8002c94 <HTS221_read>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	773b      	strb	r3, [r7, #28]
	t1_degC_x8 |= t1_temp;
 8002dfe:	7f3b      	ldrb	r3, [r7, #28]
 8002e00:	b21a      	sxth	r2, r3
 8002e02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e04:	4313      	orrs	r3, r2
 8002e06:	84bb      	strh	r3, [r7, #36]	; 0x24

	uint8_t t1_out_tmp[2] = { 0 };
 8002e08:	2300      	movs	r3, #0
 8002e0a:	80bb      	strh	r3, [r7, #4]
	HTS221_array(t1_out_tmp, HTS221_T1_OUT_L, 2);
 8002e0c:	1d3b      	adds	r3, r7, #4
 8002e0e:	2202      	movs	r2, #2
 8002e10:	213e      	movs	r1, #62	; 0x3e
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff ff6c 	bl	8002cf0 <HTS221_array>
	t1_out |= t1_out_tmp[0];
 8002e18:	793b      	ldrb	r3, [r7, #4]
 8002e1a:	b21a      	sxth	r2, r3
 8002e1c:	8bfb      	ldrh	r3, [r7, #30]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	83fb      	strh	r3, [r7, #30]
	t1_out |= (t1_out_tmp[1] << 8);
 8002e22:	797b      	ldrb	r3, [r7, #5]
 8002e24:	021b      	lsls	r3, r3, #8
 8002e26:	b21a      	sxth	r2, r3
 8002e28:	8bfb      	ldrh	r3, [r7, #30]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	83fb      	strh	r3, [r7, #30]

	// T_OUT temperature
	uint8_t t_out_tmp[2] = { 0 };
 8002e2e:	2300      	movs	r3, #0
 8002e30:	803b      	strh	r3, [r7, #0]
	HTS221_array(t_out_tmp, HTS221_TEMPERATURE_OUT_L, 2);
 8002e32:	463b      	mov	r3, r7
 8002e34:	2202      	movs	r2, #2
 8002e36:	212a      	movs	r1, #42	; 0x2a
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff ff59 	bl	8002cf0 <HTS221_array>
	int16_t t_out = 0;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	837b      	strh	r3, [r7, #26]
	t_out |= t_out_tmp[0];
 8002e42:	783b      	ldrb	r3, [r7, #0]
 8002e44:	b21a      	sxth	r2, r3
 8002e46:	8b7b      	ldrh	r3, [r7, #26]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	837b      	strh	r3, [r7, #26]
	t_out |= (t_out_tmp[1] << 8);
 8002e4c:	787b      	ldrb	r3, [r7, #1]
 8002e4e:	021b      	lsls	r3, r3, #8
 8002e50:	b21a      	sxth	r2, r3
 8002e52:	8b7b      	ldrh	r3, [r7, #26]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	837b      	strh	r3, [r7, #26]

	// Temperature interpolation
	t0_t1_msb = HTS221_read(HTS221_T1_T0_MSB);
 8002e58:	2035      	movs	r0, #53	; 0x35
 8002e5a:	f7ff ff1b 	bl	8002c94 <HTS221_read>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	float T_DegC;
	float T0_degC = (t0_degC_x8 + (1 << 8) * (t0_t1_msb & 0x03)) / 8.0;
 8002e64:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8002e68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e6c:	f003 0303 	and.w	r3, r3, #3
 8002e70:	021b      	lsls	r3, r3, #8
 8002e72:	4413      	add	r3, r2
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fd fb55 	bl	8000524 <__aeabi_i2d>
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	4b26      	ldr	r3, [pc, #152]	; (8002f18 <HTS221_get_temperature+0x17c>)
 8002e80:	f7fd fce4 	bl	800084c <__aeabi_ddiv>
 8002e84:	4602      	mov	r2, r0
 8002e86:	460b      	mov	r3, r1
 8002e88:	4610      	mov	r0, r2
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	f7fd feac 	bl	8000be8 <__aeabi_d2f>
 8002e90:	4603      	mov	r3, r0
 8002e92:	617b      	str	r3, [r7, #20]
	float T1_degC = (t1_degC_x8 + (1 << 6) * (t0_t1_msb & 0x0C)) / 8.0; // Value is in 3rd and fourth bit, need to shift this value 6 more bits
 8002e94:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8002e98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e9c:	f003 030c 	and.w	r3, r3, #12
 8002ea0:	019b      	lsls	r3, r3, #6
 8002ea2:	4413      	add	r3, r2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fd fb3d 	bl	8000524 <__aeabi_i2d>
 8002eaa:	f04f 0200 	mov.w	r2, #0
 8002eae:	4b1a      	ldr	r3, [pc, #104]	; (8002f18 <HTS221_get_temperature+0x17c>)
 8002eb0:	f7fd fccc 	bl	800084c <__aeabi_ddiv>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4610      	mov	r0, r2
 8002eba:	4619      	mov	r1, r3
 8002ebc:	f7fd fe94 	bl	8000be8 <__aeabi_d2f>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	613b      	str	r3, [r7, #16]
	T_DegC = (T0_degC + (t_out - t0_out) * (T1_degC - T0_degC) / (t1_out - t0_out));
 8002ec4:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8002ec8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	ee07 3a90 	vmov	s15, r3
 8002ed2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ed6:	edd7 6a04 	vldr	s13, [r7, #16]
 8002eda:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ede:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002ee2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002ee6:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8002eea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	ee07 3a90 	vmov	s15, r3
 8002ef4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ef8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002efc:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f04:	edc7 7a03 	vstr	s15, [r7, #12]

	return T_DegC;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	ee07 3a90 	vmov	s15, r3
}
 8002f0e:	eeb0 0a67 	vmov.f32	s0, s15
 8002f12:	3728      	adds	r7, #40	; 0x28
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40200000 	.word	0x40200000

08002f1c <HTS221_get_humidity>:

float HTS221_get_humidity()
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
	uint8_t h0_rh_x2 = 0;
 8002f22:	2300      	movs	r3, #0
 8002f24:	75fb      	strb	r3, [r7, #23]
	uint8_t h1_rh_x2 = 0;
 8002f26:	2300      	movs	r3, #0
 8002f28:	75bb      	strb	r3, [r7, #22]
	int16_t h0_t0_out = 0;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	82bb      	strh	r3, [r7, #20]
	int16_t h1_t0_out = 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	827b      	strh	r3, [r7, #18]
	int16_t h_out = 0;
 8002f32:	2300      	movs	r3, #0
 8002f34:	823b      	strh	r3, [r7, #16]

	// H0_T0
	uint8_t h0_t0_temp = HTS221_read(HTS221_H0_T0_OUT_L);
 8002f36:	2036      	movs	r0, #54	; 0x36
 8002f38:	f7ff feac 	bl	8002c94 <HTS221_read>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	73fb      	strb	r3, [r7, #15]
	h0_t0_out |= h0_t0_temp;
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
 8002f42:	b21a      	sxth	r2, r3
 8002f44:	8abb      	ldrh	r3, [r7, #20]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	82bb      	strh	r3, [r7, #20]
	h0_t0_temp = HTS221_read(HTS221_H0_T0_OUT_H);
 8002f4a:	2037      	movs	r0, #55	; 0x37
 8002f4c:	f7ff fea2 	bl	8002c94 <HTS221_read>
 8002f50:	4603      	mov	r3, r0
 8002f52:	73fb      	strb	r3, [r7, #15]
	h0_t0_out |= (h0_t0_temp << 8);
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
 8002f56:	021b      	lsls	r3, r3, #8
 8002f58:	b21a      	sxth	r2, r3
 8002f5a:	8abb      	ldrh	r3, [r7, #20]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	82bb      	strh	r3, [r7, #20]

	// H1_T0
	uint8_t h1_t0_temp = HTS221_read(HTS221_H1_T0_OUT_L);
 8002f60:	203a      	movs	r0, #58	; 0x3a
 8002f62:	f7ff fe97 	bl	8002c94 <HTS221_read>
 8002f66:	4603      	mov	r3, r0
 8002f68:	73bb      	strb	r3, [r7, #14]
	h1_t0_temp |= h1_t0_temp;
	h1_t0_temp = HTS221_read(HTS221_H1_T0_OUT_H);
 8002f6a:	203b      	movs	r0, #59	; 0x3b
 8002f6c:	f7ff fe92 	bl	8002c94 <HTS221_read>
 8002f70:	4603      	mov	r3, r0
 8002f72:	73bb      	strb	r3, [r7, #14]
	h1_t0_out |= (h1_t0_temp << 8);
 8002f74:	7bbb      	ldrb	r3, [r7, #14]
 8002f76:	021b      	lsls	r3, r3, #8
 8002f78:	b21a      	sxth	r2, r3
 8002f7a:	8a7b      	ldrh	r3, [r7, #18]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	827b      	strh	r3, [r7, #18]

	// H0_rH_x2
	h0_rh_x2 = HTS221_read(HTS221_H0_RH_x2);
 8002f80:	2030      	movs	r0, #48	; 0x30
 8002f82:	f7ff fe87 	bl	8002c94 <HTS221_read>
 8002f86:	4603      	mov	r3, r0
 8002f88:	75fb      	strb	r3, [r7, #23]

	// H1_rH_x2
	h1_rh_x2 = HTS221_read(HTS221_H1_RH_x2);
 8002f8a:	2031      	movs	r0, #49	; 0x31
 8002f8c:	f7ff fe82 	bl	8002c94 <HTS221_read>
 8002f90:	4603      	mov	r3, r0
 8002f92:	75bb      	strb	r3, [r7, #22]

	// H_OUT
	uint8_t h0_out_temp = HTS221_read(HTS221_HUMIDITY_OUT_L);
 8002f94:	2028      	movs	r0, #40	; 0x28
 8002f96:	f7ff fe7d 	bl	8002c94 <HTS221_read>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	737b      	strb	r3, [r7, #13]
	h_out |= h0_out_temp;
 8002f9e:	7b7b      	ldrb	r3, [r7, #13]
 8002fa0:	b21a      	sxth	r2, r3
 8002fa2:	8a3b      	ldrh	r3, [r7, #16]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	823b      	strh	r3, [r7, #16]
	h0_out_temp = HTS221_read(HTS221_HUMIDITY_OUT_H);
 8002fa8:	2029      	movs	r0, #41	; 0x29
 8002faa:	f7ff fe73 	bl	8002c94 <HTS221_read>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	737b      	strb	r3, [r7, #13]
	h_out |= (h0_out_temp << 8);
 8002fb2:	7b7b      	ldrb	r3, [r7, #13]
 8002fb4:	021b      	lsls	r3, r3, #8
 8002fb6:	b21a      	sxth	r2, r3
 8002fb8:	8a3b      	ldrh	r3, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	823b      	strh	r3, [r7, #16]

	float humidity = 0.0;
 8002fbe:	f04f 0300 	mov.w	r3, #0
 8002fc2:	60bb      	str	r3, [r7, #8]
	float h0 = h0_rh_x2 / 2.0;
 8002fc4:	7dfb      	ldrb	r3, [r7, #23]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fd faac 	bl	8000524 <__aeabi_i2d>
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fd4:	f7fd fc3a 	bl	800084c <__aeabi_ddiv>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4610      	mov	r0, r2
 8002fde:	4619      	mov	r1, r3
 8002fe0:	f7fd fe02 	bl	8000be8 <__aeabi_d2f>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	607b      	str	r3, [r7, #4]
	float h1 = h1_rh_x2 / 2.0;
 8002fe8:	7dbb      	ldrb	r3, [r7, #22]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fd fa9a 	bl	8000524 <__aeabi_i2d>
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ff8:	f7fd fc28 	bl	800084c <__aeabi_ddiv>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4610      	mov	r0, r2
 8003002:	4619      	mov	r1, r3
 8003004:	f7fd fdf0 	bl	8000be8 <__aeabi_d2f>
 8003008:	4603      	mov	r3, r0
 800300a:	603b      	str	r3, [r7, #0]
	humidity = (h0 + (h_out - h0_t0_out) * (h1 - h0) / (h1_t0_out - h0_t0_out));
 800300c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003010:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	ee07 3a90 	vmov	s15, r3
 800301a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800301e:	edd7 6a00 	vldr	s13, [r7]
 8003022:	edd7 7a01 	vldr	s15, [r7, #4]
 8003026:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800302a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800302e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003032:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	ee07 3a90 	vmov	s15, r3
 800303c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003040:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003044:	ed97 7a01 	vldr	s14, [r7, #4]
 8003048:	ee77 7a27 	vadd.f32	s15, s14, s15
 800304c:	edc7 7a02 	vstr	s15, [r7, #8]

	return humidity;
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	ee07 3a90 	vmov	s15, r3
}
 8003056:	eeb0 0a67 	vmov.f32	s0, s15
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <LPS25HB_read>:
#include "lps25hb.h"

uint8_t lps25hb_add = LPS25HB_DEVICE_ADDRESS0;

uint8_t LPS25HB_read(uint8_t reg_add)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af02      	add	r7, sp, #8
 8003066:	4603      	mov	r3, r0
 8003068:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 800306a:	2300      	movs	r3, #0
 800306c:	73fb      	strb	r3, [r7, #15]
	return *(i2c_read(&data, 1, reg_add, lps25hb_add, 0));
 800306e:	4b08      	ldr	r3, [pc, #32]	; (8003090 <LPS25HB_read+0x30>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	79fa      	ldrb	r2, [r7, #7]
 8003074:	f107 000f 	add.w	r0, r7, #15
 8003078:	2100      	movs	r1, #0
 800307a:	9100      	str	r1, [sp, #0]
 800307c:	2101      	movs	r1, #1
 800307e:	f7fe f9a7 	bl	80013d0 <i2c_read>
 8003082:	4603      	mov	r3, r0
 8003084:	781b      	ldrb	r3, [r3, #0]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	20000005 	.word	0x20000005

08003094 <LPS25HB_write>:

void LPS25HB_write(uint8_t data, uint8_t reg_add, uint8_t slave_add)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	4603      	mov	r3, r0
 800309c:	71fb      	strb	r3, [r7, #7]
 800309e:	460b      	mov	r3, r1
 80030a0:	71bb      	strb	r3, [r7, #6]
 80030a2:	4613      	mov	r3, r2
 80030a4:	717b      	strb	r3, [r7, #5]
	i2c_write(data, reg_add, slave_add, 0);
 80030a6:	797a      	ldrb	r2, [r7, #5]
 80030a8:	79b9      	ldrb	r1, [r7, #6]
 80030aa:	79f8      	ldrb	r0, [r7, #7]
 80030ac:	2300      	movs	r3, #0
 80030ae:	f7fe f94b 	bl	8001348 <i2c_write>
}
 80030b2:	bf00      	nop
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
	...

080030bc <LPS25HB_Init>:

uint8_t LPS25HB_Init()
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
	uint8_t state = 1;
 80030c2:	2301      	movs	r3, #1
 80030c4:	71fb      	strb	r3, [r7, #7]
	uint8_t a = LPS25HB_read(LPS25HB_WHO_AM_I_ADDRESS);
 80030c6:	200f      	movs	r0, #15
 80030c8:	f7ff ffca 	bl	8003060 <LPS25HB_read>
 80030cc:	4603      	mov	r3, r0
 80030ce:	71bb      	strb	r3, [r7, #6]
	if(a == LPS25HB_WHO_AM_I_VALUE)
 80030d0:	79bb      	ldrb	r3, [r7, #6]
 80030d2:	2bbd      	cmp	r3, #189	; 0xbd
 80030d4:	d102      	bne.n	80030dc <LPS25HB_Init+0x20>
	{
		state = 1;
 80030d6:	2301      	movs	r3, #1
 80030d8:	71fb      	strb	r3, [r7, #7]
 80030da:	e00f      	b.n	80030fc <LPS25HB_Init+0x40>
	}
	else
	{
		lps25hb_add = LPS25HB_DEVICE_ADDRESS1;
 80030dc:	4b26      	ldr	r3, [pc, #152]	; (8003178 <LPS25HB_Init+0xbc>)
 80030de:	22ba      	movs	r2, #186	; 0xba
 80030e0:	701a      	strb	r2, [r3, #0]
		a = LPS25HB_read(LPS25HB_WHO_AM_I_ADDRESS);
 80030e2:	200f      	movs	r0, #15
 80030e4:	f7ff ffbc 	bl	8003060 <LPS25HB_read>
 80030e8:	4603      	mov	r3, r0
 80030ea:	71bb      	strb	r3, [r7, #6]
		if(a == LPS25HB_WHO_AM_I_VALUE)
 80030ec:	79bb      	ldrb	r3, [r7, #6]
 80030ee:	2bbd      	cmp	r3, #189	; 0xbd
 80030f0:	d102      	bne.n	80030f8 <LPS25HB_Init+0x3c>
		{
			state = 1;
 80030f2:	2301      	movs	r3, #1
 80030f4:	71fb      	strb	r3, [r7, #7]
 80030f6:	e001      	b.n	80030fc <LPS25HB_Init+0x40>
		}
		else
		{
			state = 0;
 80030f8:	2300      	movs	r3, #0
 80030fa:	71fb      	strb	r3, [r7, #7]
		}
	}
	// Set power-down mode to turn ON -> set PD to 1 to power on
	uint8_t reg_setup = LPS25HB_read(LPS25HB_CONTROL_REG1);
 80030fc:	2020      	movs	r0, #32
 80030fe:	f7ff ffaf 	bl	8003060 <LPS25HB_read>
 8003102:	4603      	mov	r3, r0
 8003104:	717b      	strb	r3, [r7, #5]
	reg_setup |= (1 << 7);
 8003106:	797b      	ldrb	r3, [r7, #5]
 8003108:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800310c:	717b      	strb	r3, [r7, #5]
	LPS25HB_write(reg_setup, LPS25HB_CONTROL_REG1, lps25hb_add);
 800310e:	4b1a      	ldr	r3, [pc, #104]	; (8003178 <LPS25HB_Init+0xbc>)
 8003110:	781a      	ldrb	r2, [r3, #0]
 8003112:	797b      	ldrb	r3, [r7, #5]
 8003114:	2120      	movs	r1, #32
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff ffbc 	bl	8003094 <LPS25HB_write>
	// Set up continuous update
	reg_setup = LPS25HB_read(LPS25HB_CONTROL_REG1);
 800311c:	2020      	movs	r0, #32
 800311e:	f7ff ff9f 	bl	8003060 <LPS25HB_read>
 8003122:	4603      	mov	r3, r0
 8003124:	717b      	strb	r3, [r7, #5]
	reg_setup &= ~(1 << 2);
 8003126:	797b      	ldrb	r3, [r7, #5]
 8003128:	f023 0304 	bic.w	r3, r3, #4
 800312c:	717b      	strb	r3, [r7, #5]
	LPS25HB_write(reg_setup, LPS25HB_CONTROL_REG1, lps25hb_add);
 800312e:	4b12      	ldr	r3, [pc, #72]	; (8003178 <LPS25HB_Init+0xbc>)
 8003130:	781a      	ldrb	r2, [r3, #0]
 8003132:	797b      	ldrb	r3, [r7, #5]
 8003134:	2120      	movs	r1, #32
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff ffac 	bl	8003094 <LPS25HB_write>
	// Set Output data rate register to 25 Hz -> 0b100
	reg_setup = LPS25HB_read(LPS25HB_CONTROL_REG1);
 800313c:	2020      	movs	r0, #32
 800313e:	f7ff ff8f 	bl	8003060 <LPS25HB_read>
 8003142:	4603      	mov	r3, r0
 8003144:	717b      	strb	r3, [r7, #5]
	reg_setup &= ~(0x07 << 4);
 8003146:	797b      	ldrb	r3, [r7, #5]
 8003148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800314c:	717b      	strb	r3, [r7, #5]
	reg_setup |= (0x04 << 4);
 800314e:	797b      	ldrb	r3, [r7, #5]
 8003150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003154:	717b      	strb	r3, [r7, #5]
	LPS25HB_write(reg_setup, LPS25HB_CONTROL_REG1, lps25hb_add);
 8003156:	4b08      	ldr	r3, [pc, #32]	; (8003178 <LPS25HB_Init+0xbc>)
 8003158:	781a      	ldrb	r2, [r3, #0]
 800315a:	797b      	ldrb	r3, [r7, #5]
 800315c:	2120      	movs	r1, #32
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff ff98 	bl	8003094 <LPS25HB_write>
	reg_setup = LPS25HB_read(LPS25HB_CONTROL_REG1);
 8003164:	2020      	movs	r0, #32
 8003166:	f7ff ff7b 	bl	8003060 <LPS25HB_read>
 800316a:	4603      	mov	r3, r0
 800316c:	717b      	strb	r3, [r7, #5]
	return state;
 800316e:	79fb      	ldrb	r3, [r7, #7]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	20000005 	.word	0x20000005

0800317c <LPS25HB_array>:

void LPS25HB_array(uint8_t *data, uint8_t reg, uint8_t length)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af02      	add	r7, sp, #8
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	460b      	mov	r3, r1
 8003186:	70fb      	strb	r3, [r7, #3]
 8003188:	4613      	mov	r3, r2
 800318a:	70bb      	strb	r3, [r7, #2]
	i2c_read(data, length, reg, lps25hb_add, 1);
 800318c:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <LPS25HB_array+0x2c>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	78fa      	ldrb	r2, [r7, #3]
 8003192:	78b9      	ldrb	r1, [r7, #2]
 8003194:	2001      	movs	r0, #1
 8003196:	9000      	str	r0, [sp, #0]
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7fe f919 	bl	80013d0 <i2c_read>
}
 800319e:	bf00      	nop
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	20000005 	.word	0x20000005

080031ac <LPS25HB_pressure>:

float LPS25HB_pressure()
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
	uint8_t pressure[3] = {0};
 80031b2:	4b15      	ldr	r3, [pc, #84]	; (8003208 <LPS25HB_pressure+0x5c>)
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	803b      	strh	r3, [r7, #0]
 80031b8:	2300      	movs	r3, #0
 80031ba:	70bb      	strb	r3, [r7, #2]
	LPS25HB_array(pressure, LPS25HB_PRESSURE_OUT_XL, 3);
 80031bc:	463b      	mov	r3, r7
 80031be:	2203      	movs	r2, #3
 80031c0:	2128      	movs	r1, #40	; 0x28
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff ffda 	bl	800317c <LPS25HB_array>
	float pressure_real = ((pressure[2] * 65536) + (pressure[1] * 256) + pressure[0]) / 4096.0;
 80031c8:	78bb      	ldrb	r3, [r7, #2]
 80031ca:	021b      	lsls	r3, r3, #8
 80031cc:	787a      	ldrb	r2, [r7, #1]
 80031ce:	4413      	add	r3, r2
 80031d0:	021b      	lsls	r3, r3, #8
 80031d2:	783a      	ldrb	r2, [r7, #0]
 80031d4:	4413      	add	r3, r2
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fd f9a4 	bl	8000524 <__aeabi_i2d>
 80031dc:	f04f 0200 	mov.w	r2, #0
 80031e0:	4b0a      	ldr	r3, [pc, #40]	; (800320c <LPS25HB_pressure+0x60>)
 80031e2:	f7fd fb33 	bl	800084c <__aeabi_ddiv>
 80031e6:	4602      	mov	r2, r0
 80031e8:	460b      	mov	r3, r1
 80031ea:	4610      	mov	r0, r2
 80031ec:	4619      	mov	r1, r3
 80031ee:	f7fd fcfb 	bl	8000be8 <__aeabi_d2f>
 80031f2:	4603      	mov	r3, r0
 80031f4:	607b      	str	r3, [r7, #4]
	return pressure_real;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	ee07 3a90 	vmov	s15, r3
}
 80031fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	080079ec 	.word	0x080079ec
 800320c:	40b00000 	.word	0x40b00000

08003210 <__cvt>:
 8003210:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003214:	ec55 4b10 	vmov	r4, r5, d0
 8003218:	2d00      	cmp	r5, #0
 800321a:	460e      	mov	r6, r1
 800321c:	4619      	mov	r1, r3
 800321e:	462b      	mov	r3, r5
 8003220:	bfbb      	ittet	lt
 8003222:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003226:	461d      	movlt	r5, r3
 8003228:	2300      	movge	r3, #0
 800322a:	232d      	movlt	r3, #45	; 0x2d
 800322c:	700b      	strb	r3, [r1, #0]
 800322e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003230:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003234:	4691      	mov	r9, r2
 8003236:	f023 0820 	bic.w	r8, r3, #32
 800323a:	bfbc      	itt	lt
 800323c:	4622      	movlt	r2, r4
 800323e:	4614      	movlt	r4, r2
 8003240:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003244:	d005      	beq.n	8003252 <__cvt+0x42>
 8003246:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800324a:	d100      	bne.n	800324e <__cvt+0x3e>
 800324c:	3601      	adds	r6, #1
 800324e:	2102      	movs	r1, #2
 8003250:	e000      	b.n	8003254 <__cvt+0x44>
 8003252:	2103      	movs	r1, #3
 8003254:	ab03      	add	r3, sp, #12
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	ab02      	add	r3, sp, #8
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	ec45 4b10 	vmov	d0, r4, r5
 8003260:	4653      	mov	r3, sl
 8003262:	4632      	mov	r2, r6
 8003264:	f001 f880 	bl	8004368 <_dtoa_r>
 8003268:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800326c:	4607      	mov	r7, r0
 800326e:	d102      	bne.n	8003276 <__cvt+0x66>
 8003270:	f019 0f01 	tst.w	r9, #1
 8003274:	d022      	beq.n	80032bc <__cvt+0xac>
 8003276:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800327a:	eb07 0906 	add.w	r9, r7, r6
 800327e:	d110      	bne.n	80032a2 <__cvt+0x92>
 8003280:	783b      	ldrb	r3, [r7, #0]
 8003282:	2b30      	cmp	r3, #48	; 0x30
 8003284:	d10a      	bne.n	800329c <__cvt+0x8c>
 8003286:	2200      	movs	r2, #0
 8003288:	2300      	movs	r3, #0
 800328a:	4620      	mov	r0, r4
 800328c:	4629      	mov	r1, r5
 800328e:	f7fd fc1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8003292:	b918      	cbnz	r0, 800329c <__cvt+0x8c>
 8003294:	f1c6 0601 	rsb	r6, r6, #1
 8003298:	f8ca 6000 	str.w	r6, [sl]
 800329c:	f8da 3000 	ldr.w	r3, [sl]
 80032a0:	4499      	add	r9, r3
 80032a2:	2200      	movs	r2, #0
 80032a4:	2300      	movs	r3, #0
 80032a6:	4620      	mov	r0, r4
 80032a8:	4629      	mov	r1, r5
 80032aa:	f7fd fc0d 	bl	8000ac8 <__aeabi_dcmpeq>
 80032ae:	b108      	cbz	r0, 80032b4 <__cvt+0xa4>
 80032b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80032b4:	2230      	movs	r2, #48	; 0x30
 80032b6:	9b03      	ldr	r3, [sp, #12]
 80032b8:	454b      	cmp	r3, r9
 80032ba:	d307      	bcc.n	80032cc <__cvt+0xbc>
 80032bc:	9b03      	ldr	r3, [sp, #12]
 80032be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80032c0:	1bdb      	subs	r3, r3, r7
 80032c2:	4638      	mov	r0, r7
 80032c4:	6013      	str	r3, [r2, #0]
 80032c6:	b004      	add	sp, #16
 80032c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032cc:	1c59      	adds	r1, r3, #1
 80032ce:	9103      	str	r1, [sp, #12]
 80032d0:	701a      	strb	r2, [r3, #0]
 80032d2:	e7f0      	b.n	80032b6 <__cvt+0xa6>

080032d4 <__exponent>:
 80032d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032d6:	4603      	mov	r3, r0
 80032d8:	2900      	cmp	r1, #0
 80032da:	bfb8      	it	lt
 80032dc:	4249      	neglt	r1, r1
 80032de:	f803 2b02 	strb.w	r2, [r3], #2
 80032e2:	bfb4      	ite	lt
 80032e4:	222d      	movlt	r2, #45	; 0x2d
 80032e6:	222b      	movge	r2, #43	; 0x2b
 80032e8:	2909      	cmp	r1, #9
 80032ea:	7042      	strb	r2, [r0, #1]
 80032ec:	dd2a      	ble.n	8003344 <__exponent+0x70>
 80032ee:	f10d 0207 	add.w	r2, sp, #7
 80032f2:	4617      	mov	r7, r2
 80032f4:	260a      	movs	r6, #10
 80032f6:	4694      	mov	ip, r2
 80032f8:	fb91 f5f6 	sdiv	r5, r1, r6
 80032fc:	fb06 1415 	mls	r4, r6, r5, r1
 8003300:	3430      	adds	r4, #48	; 0x30
 8003302:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003306:	460c      	mov	r4, r1
 8003308:	2c63      	cmp	r4, #99	; 0x63
 800330a:	f102 32ff 	add.w	r2, r2, #4294967295
 800330e:	4629      	mov	r1, r5
 8003310:	dcf1      	bgt.n	80032f6 <__exponent+0x22>
 8003312:	3130      	adds	r1, #48	; 0x30
 8003314:	f1ac 0402 	sub.w	r4, ip, #2
 8003318:	f802 1c01 	strb.w	r1, [r2, #-1]
 800331c:	1c41      	adds	r1, r0, #1
 800331e:	4622      	mov	r2, r4
 8003320:	42ba      	cmp	r2, r7
 8003322:	d30a      	bcc.n	800333a <__exponent+0x66>
 8003324:	f10d 0209 	add.w	r2, sp, #9
 8003328:	eba2 020c 	sub.w	r2, r2, ip
 800332c:	42bc      	cmp	r4, r7
 800332e:	bf88      	it	hi
 8003330:	2200      	movhi	r2, #0
 8003332:	4413      	add	r3, r2
 8003334:	1a18      	subs	r0, r3, r0
 8003336:	b003      	add	sp, #12
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800333e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003342:	e7ed      	b.n	8003320 <__exponent+0x4c>
 8003344:	2330      	movs	r3, #48	; 0x30
 8003346:	3130      	adds	r1, #48	; 0x30
 8003348:	7083      	strb	r3, [r0, #2]
 800334a:	70c1      	strb	r1, [r0, #3]
 800334c:	1d03      	adds	r3, r0, #4
 800334e:	e7f1      	b.n	8003334 <__exponent+0x60>

08003350 <_printf_float>:
 8003350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003354:	ed2d 8b02 	vpush	{d8}
 8003358:	b08d      	sub	sp, #52	; 0x34
 800335a:	460c      	mov	r4, r1
 800335c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003360:	4616      	mov	r6, r2
 8003362:	461f      	mov	r7, r3
 8003364:	4605      	mov	r5, r0
 8003366:	f000 fef7 	bl	8004158 <_localeconv_r>
 800336a:	f8d0 a000 	ldr.w	sl, [r0]
 800336e:	4650      	mov	r0, sl
 8003370:	f7fc ff7e 	bl	8000270 <strlen>
 8003374:	2300      	movs	r3, #0
 8003376:	930a      	str	r3, [sp, #40]	; 0x28
 8003378:	6823      	ldr	r3, [r4, #0]
 800337a:	9305      	str	r3, [sp, #20]
 800337c:	f8d8 3000 	ldr.w	r3, [r8]
 8003380:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003384:	3307      	adds	r3, #7
 8003386:	f023 0307 	bic.w	r3, r3, #7
 800338a:	f103 0208 	add.w	r2, r3, #8
 800338e:	f8c8 2000 	str.w	r2, [r8]
 8003392:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003396:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800339a:	9307      	str	r3, [sp, #28]
 800339c:	f8cd 8018 	str.w	r8, [sp, #24]
 80033a0:	ee08 0a10 	vmov	s16, r0
 80033a4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80033a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80033ac:	4b9e      	ldr	r3, [pc, #632]	; (8003628 <_printf_float+0x2d8>)
 80033ae:	f04f 32ff 	mov.w	r2, #4294967295
 80033b2:	f7fd fbbb 	bl	8000b2c <__aeabi_dcmpun>
 80033b6:	bb88      	cbnz	r0, 800341c <_printf_float+0xcc>
 80033b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80033bc:	4b9a      	ldr	r3, [pc, #616]	; (8003628 <_printf_float+0x2d8>)
 80033be:	f04f 32ff 	mov.w	r2, #4294967295
 80033c2:	f7fd fb95 	bl	8000af0 <__aeabi_dcmple>
 80033c6:	bb48      	cbnz	r0, 800341c <_printf_float+0xcc>
 80033c8:	2200      	movs	r2, #0
 80033ca:	2300      	movs	r3, #0
 80033cc:	4640      	mov	r0, r8
 80033ce:	4649      	mov	r1, r9
 80033d0:	f7fd fb84 	bl	8000adc <__aeabi_dcmplt>
 80033d4:	b110      	cbz	r0, 80033dc <_printf_float+0x8c>
 80033d6:	232d      	movs	r3, #45	; 0x2d
 80033d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033dc:	4a93      	ldr	r2, [pc, #588]	; (800362c <_printf_float+0x2dc>)
 80033de:	4b94      	ldr	r3, [pc, #592]	; (8003630 <_printf_float+0x2e0>)
 80033e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80033e4:	bf94      	ite	ls
 80033e6:	4690      	movls	r8, r2
 80033e8:	4698      	movhi	r8, r3
 80033ea:	2303      	movs	r3, #3
 80033ec:	6123      	str	r3, [r4, #16]
 80033ee:	9b05      	ldr	r3, [sp, #20]
 80033f0:	f023 0304 	bic.w	r3, r3, #4
 80033f4:	6023      	str	r3, [r4, #0]
 80033f6:	f04f 0900 	mov.w	r9, #0
 80033fa:	9700      	str	r7, [sp, #0]
 80033fc:	4633      	mov	r3, r6
 80033fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8003400:	4621      	mov	r1, r4
 8003402:	4628      	mov	r0, r5
 8003404:	f000 f9da 	bl	80037bc <_printf_common>
 8003408:	3001      	adds	r0, #1
 800340a:	f040 8090 	bne.w	800352e <_printf_float+0x1de>
 800340e:	f04f 30ff 	mov.w	r0, #4294967295
 8003412:	b00d      	add	sp, #52	; 0x34
 8003414:	ecbd 8b02 	vpop	{d8}
 8003418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800341c:	4642      	mov	r2, r8
 800341e:	464b      	mov	r3, r9
 8003420:	4640      	mov	r0, r8
 8003422:	4649      	mov	r1, r9
 8003424:	f7fd fb82 	bl	8000b2c <__aeabi_dcmpun>
 8003428:	b140      	cbz	r0, 800343c <_printf_float+0xec>
 800342a:	464b      	mov	r3, r9
 800342c:	2b00      	cmp	r3, #0
 800342e:	bfbc      	itt	lt
 8003430:	232d      	movlt	r3, #45	; 0x2d
 8003432:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003436:	4a7f      	ldr	r2, [pc, #508]	; (8003634 <_printf_float+0x2e4>)
 8003438:	4b7f      	ldr	r3, [pc, #508]	; (8003638 <_printf_float+0x2e8>)
 800343a:	e7d1      	b.n	80033e0 <_printf_float+0x90>
 800343c:	6863      	ldr	r3, [r4, #4]
 800343e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003442:	9206      	str	r2, [sp, #24]
 8003444:	1c5a      	adds	r2, r3, #1
 8003446:	d13f      	bne.n	80034c8 <_printf_float+0x178>
 8003448:	2306      	movs	r3, #6
 800344a:	6063      	str	r3, [r4, #4]
 800344c:	9b05      	ldr	r3, [sp, #20]
 800344e:	6861      	ldr	r1, [r4, #4]
 8003450:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003454:	2300      	movs	r3, #0
 8003456:	9303      	str	r3, [sp, #12]
 8003458:	ab0a      	add	r3, sp, #40	; 0x28
 800345a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800345e:	ab09      	add	r3, sp, #36	; 0x24
 8003460:	ec49 8b10 	vmov	d0, r8, r9
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	6022      	str	r2, [r4, #0]
 8003468:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800346c:	4628      	mov	r0, r5
 800346e:	f7ff fecf 	bl	8003210 <__cvt>
 8003472:	9b06      	ldr	r3, [sp, #24]
 8003474:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003476:	2b47      	cmp	r3, #71	; 0x47
 8003478:	4680      	mov	r8, r0
 800347a:	d108      	bne.n	800348e <_printf_float+0x13e>
 800347c:	1cc8      	adds	r0, r1, #3
 800347e:	db02      	blt.n	8003486 <_printf_float+0x136>
 8003480:	6863      	ldr	r3, [r4, #4]
 8003482:	4299      	cmp	r1, r3
 8003484:	dd41      	ble.n	800350a <_printf_float+0x1ba>
 8003486:	f1ab 0302 	sub.w	r3, fp, #2
 800348a:	fa5f fb83 	uxtb.w	fp, r3
 800348e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003492:	d820      	bhi.n	80034d6 <_printf_float+0x186>
 8003494:	3901      	subs	r1, #1
 8003496:	465a      	mov	r2, fp
 8003498:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800349c:	9109      	str	r1, [sp, #36]	; 0x24
 800349e:	f7ff ff19 	bl	80032d4 <__exponent>
 80034a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80034a4:	1813      	adds	r3, r2, r0
 80034a6:	2a01      	cmp	r2, #1
 80034a8:	4681      	mov	r9, r0
 80034aa:	6123      	str	r3, [r4, #16]
 80034ac:	dc02      	bgt.n	80034b4 <_printf_float+0x164>
 80034ae:	6822      	ldr	r2, [r4, #0]
 80034b0:	07d2      	lsls	r2, r2, #31
 80034b2:	d501      	bpl.n	80034b8 <_printf_float+0x168>
 80034b4:	3301      	adds	r3, #1
 80034b6:	6123      	str	r3, [r4, #16]
 80034b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d09c      	beq.n	80033fa <_printf_float+0xaa>
 80034c0:	232d      	movs	r3, #45	; 0x2d
 80034c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034c6:	e798      	b.n	80033fa <_printf_float+0xaa>
 80034c8:	9a06      	ldr	r2, [sp, #24]
 80034ca:	2a47      	cmp	r2, #71	; 0x47
 80034cc:	d1be      	bne.n	800344c <_printf_float+0xfc>
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1bc      	bne.n	800344c <_printf_float+0xfc>
 80034d2:	2301      	movs	r3, #1
 80034d4:	e7b9      	b.n	800344a <_printf_float+0xfa>
 80034d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80034da:	d118      	bne.n	800350e <_printf_float+0x1be>
 80034dc:	2900      	cmp	r1, #0
 80034de:	6863      	ldr	r3, [r4, #4]
 80034e0:	dd0b      	ble.n	80034fa <_printf_float+0x1aa>
 80034e2:	6121      	str	r1, [r4, #16]
 80034e4:	b913      	cbnz	r3, 80034ec <_printf_float+0x19c>
 80034e6:	6822      	ldr	r2, [r4, #0]
 80034e8:	07d0      	lsls	r0, r2, #31
 80034ea:	d502      	bpl.n	80034f2 <_printf_float+0x1a2>
 80034ec:	3301      	adds	r3, #1
 80034ee:	440b      	add	r3, r1
 80034f0:	6123      	str	r3, [r4, #16]
 80034f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80034f4:	f04f 0900 	mov.w	r9, #0
 80034f8:	e7de      	b.n	80034b8 <_printf_float+0x168>
 80034fa:	b913      	cbnz	r3, 8003502 <_printf_float+0x1b2>
 80034fc:	6822      	ldr	r2, [r4, #0]
 80034fe:	07d2      	lsls	r2, r2, #31
 8003500:	d501      	bpl.n	8003506 <_printf_float+0x1b6>
 8003502:	3302      	adds	r3, #2
 8003504:	e7f4      	b.n	80034f0 <_printf_float+0x1a0>
 8003506:	2301      	movs	r3, #1
 8003508:	e7f2      	b.n	80034f0 <_printf_float+0x1a0>
 800350a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800350e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003510:	4299      	cmp	r1, r3
 8003512:	db05      	blt.n	8003520 <_printf_float+0x1d0>
 8003514:	6823      	ldr	r3, [r4, #0]
 8003516:	6121      	str	r1, [r4, #16]
 8003518:	07d8      	lsls	r0, r3, #31
 800351a:	d5ea      	bpl.n	80034f2 <_printf_float+0x1a2>
 800351c:	1c4b      	adds	r3, r1, #1
 800351e:	e7e7      	b.n	80034f0 <_printf_float+0x1a0>
 8003520:	2900      	cmp	r1, #0
 8003522:	bfd4      	ite	le
 8003524:	f1c1 0202 	rsble	r2, r1, #2
 8003528:	2201      	movgt	r2, #1
 800352a:	4413      	add	r3, r2
 800352c:	e7e0      	b.n	80034f0 <_printf_float+0x1a0>
 800352e:	6823      	ldr	r3, [r4, #0]
 8003530:	055a      	lsls	r2, r3, #21
 8003532:	d407      	bmi.n	8003544 <_printf_float+0x1f4>
 8003534:	6923      	ldr	r3, [r4, #16]
 8003536:	4642      	mov	r2, r8
 8003538:	4631      	mov	r1, r6
 800353a:	4628      	mov	r0, r5
 800353c:	47b8      	blx	r7
 800353e:	3001      	adds	r0, #1
 8003540:	d12c      	bne.n	800359c <_printf_float+0x24c>
 8003542:	e764      	b.n	800340e <_printf_float+0xbe>
 8003544:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003548:	f240 80e0 	bls.w	800370c <_printf_float+0x3bc>
 800354c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003550:	2200      	movs	r2, #0
 8003552:	2300      	movs	r3, #0
 8003554:	f7fd fab8 	bl	8000ac8 <__aeabi_dcmpeq>
 8003558:	2800      	cmp	r0, #0
 800355a:	d034      	beq.n	80035c6 <_printf_float+0x276>
 800355c:	4a37      	ldr	r2, [pc, #220]	; (800363c <_printf_float+0x2ec>)
 800355e:	2301      	movs	r3, #1
 8003560:	4631      	mov	r1, r6
 8003562:	4628      	mov	r0, r5
 8003564:	47b8      	blx	r7
 8003566:	3001      	adds	r0, #1
 8003568:	f43f af51 	beq.w	800340e <_printf_float+0xbe>
 800356c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003570:	429a      	cmp	r2, r3
 8003572:	db02      	blt.n	800357a <_printf_float+0x22a>
 8003574:	6823      	ldr	r3, [r4, #0]
 8003576:	07d8      	lsls	r0, r3, #31
 8003578:	d510      	bpl.n	800359c <_printf_float+0x24c>
 800357a:	ee18 3a10 	vmov	r3, s16
 800357e:	4652      	mov	r2, sl
 8003580:	4631      	mov	r1, r6
 8003582:	4628      	mov	r0, r5
 8003584:	47b8      	blx	r7
 8003586:	3001      	adds	r0, #1
 8003588:	f43f af41 	beq.w	800340e <_printf_float+0xbe>
 800358c:	f04f 0800 	mov.w	r8, #0
 8003590:	f104 091a 	add.w	r9, r4, #26
 8003594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003596:	3b01      	subs	r3, #1
 8003598:	4543      	cmp	r3, r8
 800359a:	dc09      	bgt.n	80035b0 <_printf_float+0x260>
 800359c:	6823      	ldr	r3, [r4, #0]
 800359e:	079b      	lsls	r3, r3, #30
 80035a0:	f100 8107 	bmi.w	80037b2 <_printf_float+0x462>
 80035a4:	68e0      	ldr	r0, [r4, #12]
 80035a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80035a8:	4298      	cmp	r0, r3
 80035aa:	bfb8      	it	lt
 80035ac:	4618      	movlt	r0, r3
 80035ae:	e730      	b.n	8003412 <_printf_float+0xc2>
 80035b0:	2301      	movs	r3, #1
 80035b2:	464a      	mov	r2, r9
 80035b4:	4631      	mov	r1, r6
 80035b6:	4628      	mov	r0, r5
 80035b8:	47b8      	blx	r7
 80035ba:	3001      	adds	r0, #1
 80035bc:	f43f af27 	beq.w	800340e <_printf_float+0xbe>
 80035c0:	f108 0801 	add.w	r8, r8, #1
 80035c4:	e7e6      	b.n	8003594 <_printf_float+0x244>
 80035c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	dc39      	bgt.n	8003640 <_printf_float+0x2f0>
 80035cc:	4a1b      	ldr	r2, [pc, #108]	; (800363c <_printf_float+0x2ec>)
 80035ce:	2301      	movs	r3, #1
 80035d0:	4631      	mov	r1, r6
 80035d2:	4628      	mov	r0, r5
 80035d4:	47b8      	blx	r7
 80035d6:	3001      	adds	r0, #1
 80035d8:	f43f af19 	beq.w	800340e <_printf_float+0xbe>
 80035dc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80035e0:	4313      	orrs	r3, r2
 80035e2:	d102      	bne.n	80035ea <_printf_float+0x29a>
 80035e4:	6823      	ldr	r3, [r4, #0]
 80035e6:	07d9      	lsls	r1, r3, #31
 80035e8:	d5d8      	bpl.n	800359c <_printf_float+0x24c>
 80035ea:	ee18 3a10 	vmov	r3, s16
 80035ee:	4652      	mov	r2, sl
 80035f0:	4631      	mov	r1, r6
 80035f2:	4628      	mov	r0, r5
 80035f4:	47b8      	blx	r7
 80035f6:	3001      	adds	r0, #1
 80035f8:	f43f af09 	beq.w	800340e <_printf_float+0xbe>
 80035fc:	f04f 0900 	mov.w	r9, #0
 8003600:	f104 0a1a 	add.w	sl, r4, #26
 8003604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003606:	425b      	negs	r3, r3
 8003608:	454b      	cmp	r3, r9
 800360a:	dc01      	bgt.n	8003610 <_printf_float+0x2c0>
 800360c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800360e:	e792      	b.n	8003536 <_printf_float+0x1e6>
 8003610:	2301      	movs	r3, #1
 8003612:	4652      	mov	r2, sl
 8003614:	4631      	mov	r1, r6
 8003616:	4628      	mov	r0, r5
 8003618:	47b8      	blx	r7
 800361a:	3001      	adds	r0, #1
 800361c:	f43f aef7 	beq.w	800340e <_printf_float+0xbe>
 8003620:	f109 0901 	add.w	r9, r9, #1
 8003624:	e7ee      	b.n	8003604 <_printf_float+0x2b4>
 8003626:	bf00      	nop
 8003628:	7fefffff 	.word	0x7fefffff
 800362c:	08007a17 	.word	0x08007a17
 8003630:	08007a1b 	.word	0x08007a1b
 8003634:	08007a1f 	.word	0x08007a1f
 8003638:	08007a23 	.word	0x08007a23
 800363c:	08007a27 	.word	0x08007a27
 8003640:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003642:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003644:	429a      	cmp	r2, r3
 8003646:	bfa8      	it	ge
 8003648:	461a      	movge	r2, r3
 800364a:	2a00      	cmp	r2, #0
 800364c:	4691      	mov	r9, r2
 800364e:	dc37      	bgt.n	80036c0 <_printf_float+0x370>
 8003650:	f04f 0b00 	mov.w	fp, #0
 8003654:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003658:	f104 021a 	add.w	r2, r4, #26
 800365c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800365e:	9305      	str	r3, [sp, #20]
 8003660:	eba3 0309 	sub.w	r3, r3, r9
 8003664:	455b      	cmp	r3, fp
 8003666:	dc33      	bgt.n	80036d0 <_printf_float+0x380>
 8003668:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800366c:	429a      	cmp	r2, r3
 800366e:	db3b      	blt.n	80036e8 <_printf_float+0x398>
 8003670:	6823      	ldr	r3, [r4, #0]
 8003672:	07da      	lsls	r2, r3, #31
 8003674:	d438      	bmi.n	80036e8 <_printf_float+0x398>
 8003676:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800367a:	eba2 0903 	sub.w	r9, r2, r3
 800367e:	9b05      	ldr	r3, [sp, #20]
 8003680:	1ad2      	subs	r2, r2, r3
 8003682:	4591      	cmp	r9, r2
 8003684:	bfa8      	it	ge
 8003686:	4691      	movge	r9, r2
 8003688:	f1b9 0f00 	cmp.w	r9, #0
 800368c:	dc35      	bgt.n	80036fa <_printf_float+0x3aa>
 800368e:	f04f 0800 	mov.w	r8, #0
 8003692:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003696:	f104 0a1a 	add.w	sl, r4, #26
 800369a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800369e:	1a9b      	subs	r3, r3, r2
 80036a0:	eba3 0309 	sub.w	r3, r3, r9
 80036a4:	4543      	cmp	r3, r8
 80036a6:	f77f af79 	ble.w	800359c <_printf_float+0x24c>
 80036aa:	2301      	movs	r3, #1
 80036ac:	4652      	mov	r2, sl
 80036ae:	4631      	mov	r1, r6
 80036b0:	4628      	mov	r0, r5
 80036b2:	47b8      	blx	r7
 80036b4:	3001      	adds	r0, #1
 80036b6:	f43f aeaa 	beq.w	800340e <_printf_float+0xbe>
 80036ba:	f108 0801 	add.w	r8, r8, #1
 80036be:	e7ec      	b.n	800369a <_printf_float+0x34a>
 80036c0:	4613      	mov	r3, r2
 80036c2:	4631      	mov	r1, r6
 80036c4:	4642      	mov	r2, r8
 80036c6:	4628      	mov	r0, r5
 80036c8:	47b8      	blx	r7
 80036ca:	3001      	adds	r0, #1
 80036cc:	d1c0      	bne.n	8003650 <_printf_float+0x300>
 80036ce:	e69e      	b.n	800340e <_printf_float+0xbe>
 80036d0:	2301      	movs	r3, #1
 80036d2:	4631      	mov	r1, r6
 80036d4:	4628      	mov	r0, r5
 80036d6:	9205      	str	r2, [sp, #20]
 80036d8:	47b8      	blx	r7
 80036da:	3001      	adds	r0, #1
 80036dc:	f43f ae97 	beq.w	800340e <_printf_float+0xbe>
 80036e0:	9a05      	ldr	r2, [sp, #20]
 80036e2:	f10b 0b01 	add.w	fp, fp, #1
 80036e6:	e7b9      	b.n	800365c <_printf_float+0x30c>
 80036e8:	ee18 3a10 	vmov	r3, s16
 80036ec:	4652      	mov	r2, sl
 80036ee:	4631      	mov	r1, r6
 80036f0:	4628      	mov	r0, r5
 80036f2:	47b8      	blx	r7
 80036f4:	3001      	adds	r0, #1
 80036f6:	d1be      	bne.n	8003676 <_printf_float+0x326>
 80036f8:	e689      	b.n	800340e <_printf_float+0xbe>
 80036fa:	9a05      	ldr	r2, [sp, #20]
 80036fc:	464b      	mov	r3, r9
 80036fe:	4442      	add	r2, r8
 8003700:	4631      	mov	r1, r6
 8003702:	4628      	mov	r0, r5
 8003704:	47b8      	blx	r7
 8003706:	3001      	adds	r0, #1
 8003708:	d1c1      	bne.n	800368e <_printf_float+0x33e>
 800370a:	e680      	b.n	800340e <_printf_float+0xbe>
 800370c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800370e:	2a01      	cmp	r2, #1
 8003710:	dc01      	bgt.n	8003716 <_printf_float+0x3c6>
 8003712:	07db      	lsls	r3, r3, #31
 8003714:	d53a      	bpl.n	800378c <_printf_float+0x43c>
 8003716:	2301      	movs	r3, #1
 8003718:	4642      	mov	r2, r8
 800371a:	4631      	mov	r1, r6
 800371c:	4628      	mov	r0, r5
 800371e:	47b8      	blx	r7
 8003720:	3001      	adds	r0, #1
 8003722:	f43f ae74 	beq.w	800340e <_printf_float+0xbe>
 8003726:	ee18 3a10 	vmov	r3, s16
 800372a:	4652      	mov	r2, sl
 800372c:	4631      	mov	r1, r6
 800372e:	4628      	mov	r0, r5
 8003730:	47b8      	blx	r7
 8003732:	3001      	adds	r0, #1
 8003734:	f43f ae6b 	beq.w	800340e <_printf_float+0xbe>
 8003738:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800373c:	2200      	movs	r2, #0
 800373e:	2300      	movs	r3, #0
 8003740:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8003744:	f7fd f9c0 	bl	8000ac8 <__aeabi_dcmpeq>
 8003748:	b9d8      	cbnz	r0, 8003782 <_printf_float+0x432>
 800374a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800374e:	f108 0201 	add.w	r2, r8, #1
 8003752:	4631      	mov	r1, r6
 8003754:	4628      	mov	r0, r5
 8003756:	47b8      	blx	r7
 8003758:	3001      	adds	r0, #1
 800375a:	d10e      	bne.n	800377a <_printf_float+0x42a>
 800375c:	e657      	b.n	800340e <_printf_float+0xbe>
 800375e:	2301      	movs	r3, #1
 8003760:	4652      	mov	r2, sl
 8003762:	4631      	mov	r1, r6
 8003764:	4628      	mov	r0, r5
 8003766:	47b8      	blx	r7
 8003768:	3001      	adds	r0, #1
 800376a:	f43f ae50 	beq.w	800340e <_printf_float+0xbe>
 800376e:	f108 0801 	add.w	r8, r8, #1
 8003772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003774:	3b01      	subs	r3, #1
 8003776:	4543      	cmp	r3, r8
 8003778:	dcf1      	bgt.n	800375e <_printf_float+0x40e>
 800377a:	464b      	mov	r3, r9
 800377c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003780:	e6da      	b.n	8003538 <_printf_float+0x1e8>
 8003782:	f04f 0800 	mov.w	r8, #0
 8003786:	f104 0a1a 	add.w	sl, r4, #26
 800378a:	e7f2      	b.n	8003772 <_printf_float+0x422>
 800378c:	2301      	movs	r3, #1
 800378e:	4642      	mov	r2, r8
 8003790:	e7df      	b.n	8003752 <_printf_float+0x402>
 8003792:	2301      	movs	r3, #1
 8003794:	464a      	mov	r2, r9
 8003796:	4631      	mov	r1, r6
 8003798:	4628      	mov	r0, r5
 800379a:	47b8      	blx	r7
 800379c:	3001      	adds	r0, #1
 800379e:	f43f ae36 	beq.w	800340e <_printf_float+0xbe>
 80037a2:	f108 0801 	add.w	r8, r8, #1
 80037a6:	68e3      	ldr	r3, [r4, #12]
 80037a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80037aa:	1a5b      	subs	r3, r3, r1
 80037ac:	4543      	cmp	r3, r8
 80037ae:	dcf0      	bgt.n	8003792 <_printf_float+0x442>
 80037b0:	e6f8      	b.n	80035a4 <_printf_float+0x254>
 80037b2:	f04f 0800 	mov.w	r8, #0
 80037b6:	f104 0919 	add.w	r9, r4, #25
 80037ba:	e7f4      	b.n	80037a6 <_printf_float+0x456>

080037bc <_printf_common>:
 80037bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037c0:	4616      	mov	r6, r2
 80037c2:	4699      	mov	r9, r3
 80037c4:	688a      	ldr	r2, [r1, #8]
 80037c6:	690b      	ldr	r3, [r1, #16]
 80037c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037cc:	4293      	cmp	r3, r2
 80037ce:	bfb8      	it	lt
 80037d0:	4613      	movlt	r3, r2
 80037d2:	6033      	str	r3, [r6, #0]
 80037d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037d8:	4607      	mov	r7, r0
 80037da:	460c      	mov	r4, r1
 80037dc:	b10a      	cbz	r2, 80037e2 <_printf_common+0x26>
 80037de:	3301      	adds	r3, #1
 80037e0:	6033      	str	r3, [r6, #0]
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	0699      	lsls	r1, r3, #26
 80037e6:	bf42      	ittt	mi
 80037e8:	6833      	ldrmi	r3, [r6, #0]
 80037ea:	3302      	addmi	r3, #2
 80037ec:	6033      	strmi	r3, [r6, #0]
 80037ee:	6825      	ldr	r5, [r4, #0]
 80037f0:	f015 0506 	ands.w	r5, r5, #6
 80037f4:	d106      	bne.n	8003804 <_printf_common+0x48>
 80037f6:	f104 0a19 	add.w	sl, r4, #25
 80037fa:	68e3      	ldr	r3, [r4, #12]
 80037fc:	6832      	ldr	r2, [r6, #0]
 80037fe:	1a9b      	subs	r3, r3, r2
 8003800:	42ab      	cmp	r3, r5
 8003802:	dc26      	bgt.n	8003852 <_printf_common+0x96>
 8003804:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003808:	1e13      	subs	r3, r2, #0
 800380a:	6822      	ldr	r2, [r4, #0]
 800380c:	bf18      	it	ne
 800380e:	2301      	movne	r3, #1
 8003810:	0692      	lsls	r2, r2, #26
 8003812:	d42b      	bmi.n	800386c <_printf_common+0xb0>
 8003814:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003818:	4649      	mov	r1, r9
 800381a:	4638      	mov	r0, r7
 800381c:	47c0      	blx	r8
 800381e:	3001      	adds	r0, #1
 8003820:	d01e      	beq.n	8003860 <_printf_common+0xa4>
 8003822:	6823      	ldr	r3, [r4, #0]
 8003824:	6922      	ldr	r2, [r4, #16]
 8003826:	f003 0306 	and.w	r3, r3, #6
 800382a:	2b04      	cmp	r3, #4
 800382c:	bf02      	ittt	eq
 800382e:	68e5      	ldreq	r5, [r4, #12]
 8003830:	6833      	ldreq	r3, [r6, #0]
 8003832:	1aed      	subeq	r5, r5, r3
 8003834:	68a3      	ldr	r3, [r4, #8]
 8003836:	bf0c      	ite	eq
 8003838:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800383c:	2500      	movne	r5, #0
 800383e:	4293      	cmp	r3, r2
 8003840:	bfc4      	itt	gt
 8003842:	1a9b      	subgt	r3, r3, r2
 8003844:	18ed      	addgt	r5, r5, r3
 8003846:	2600      	movs	r6, #0
 8003848:	341a      	adds	r4, #26
 800384a:	42b5      	cmp	r5, r6
 800384c:	d11a      	bne.n	8003884 <_printf_common+0xc8>
 800384e:	2000      	movs	r0, #0
 8003850:	e008      	b.n	8003864 <_printf_common+0xa8>
 8003852:	2301      	movs	r3, #1
 8003854:	4652      	mov	r2, sl
 8003856:	4649      	mov	r1, r9
 8003858:	4638      	mov	r0, r7
 800385a:	47c0      	blx	r8
 800385c:	3001      	adds	r0, #1
 800385e:	d103      	bne.n	8003868 <_printf_common+0xac>
 8003860:	f04f 30ff 	mov.w	r0, #4294967295
 8003864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003868:	3501      	adds	r5, #1
 800386a:	e7c6      	b.n	80037fa <_printf_common+0x3e>
 800386c:	18e1      	adds	r1, r4, r3
 800386e:	1c5a      	adds	r2, r3, #1
 8003870:	2030      	movs	r0, #48	; 0x30
 8003872:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003876:	4422      	add	r2, r4
 8003878:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800387c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003880:	3302      	adds	r3, #2
 8003882:	e7c7      	b.n	8003814 <_printf_common+0x58>
 8003884:	2301      	movs	r3, #1
 8003886:	4622      	mov	r2, r4
 8003888:	4649      	mov	r1, r9
 800388a:	4638      	mov	r0, r7
 800388c:	47c0      	blx	r8
 800388e:	3001      	adds	r0, #1
 8003890:	d0e6      	beq.n	8003860 <_printf_common+0xa4>
 8003892:	3601      	adds	r6, #1
 8003894:	e7d9      	b.n	800384a <_printf_common+0x8e>
	...

08003898 <_printf_i>:
 8003898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800389c:	7e0f      	ldrb	r7, [r1, #24]
 800389e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80038a0:	2f78      	cmp	r7, #120	; 0x78
 80038a2:	4691      	mov	r9, r2
 80038a4:	4680      	mov	r8, r0
 80038a6:	460c      	mov	r4, r1
 80038a8:	469a      	mov	sl, r3
 80038aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80038ae:	d807      	bhi.n	80038c0 <_printf_i+0x28>
 80038b0:	2f62      	cmp	r7, #98	; 0x62
 80038b2:	d80a      	bhi.n	80038ca <_printf_i+0x32>
 80038b4:	2f00      	cmp	r7, #0
 80038b6:	f000 80d4 	beq.w	8003a62 <_printf_i+0x1ca>
 80038ba:	2f58      	cmp	r7, #88	; 0x58
 80038bc:	f000 80c0 	beq.w	8003a40 <_printf_i+0x1a8>
 80038c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80038c8:	e03a      	b.n	8003940 <_printf_i+0xa8>
 80038ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80038ce:	2b15      	cmp	r3, #21
 80038d0:	d8f6      	bhi.n	80038c0 <_printf_i+0x28>
 80038d2:	a101      	add	r1, pc, #4	; (adr r1, 80038d8 <_printf_i+0x40>)
 80038d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038d8:	08003931 	.word	0x08003931
 80038dc:	08003945 	.word	0x08003945
 80038e0:	080038c1 	.word	0x080038c1
 80038e4:	080038c1 	.word	0x080038c1
 80038e8:	080038c1 	.word	0x080038c1
 80038ec:	080038c1 	.word	0x080038c1
 80038f0:	08003945 	.word	0x08003945
 80038f4:	080038c1 	.word	0x080038c1
 80038f8:	080038c1 	.word	0x080038c1
 80038fc:	080038c1 	.word	0x080038c1
 8003900:	080038c1 	.word	0x080038c1
 8003904:	08003a49 	.word	0x08003a49
 8003908:	08003971 	.word	0x08003971
 800390c:	08003a03 	.word	0x08003a03
 8003910:	080038c1 	.word	0x080038c1
 8003914:	080038c1 	.word	0x080038c1
 8003918:	08003a6b 	.word	0x08003a6b
 800391c:	080038c1 	.word	0x080038c1
 8003920:	08003971 	.word	0x08003971
 8003924:	080038c1 	.word	0x080038c1
 8003928:	080038c1 	.word	0x080038c1
 800392c:	08003a0b 	.word	0x08003a0b
 8003930:	682b      	ldr	r3, [r5, #0]
 8003932:	1d1a      	adds	r2, r3, #4
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	602a      	str	r2, [r5, #0]
 8003938:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800393c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003940:	2301      	movs	r3, #1
 8003942:	e09f      	b.n	8003a84 <_printf_i+0x1ec>
 8003944:	6820      	ldr	r0, [r4, #0]
 8003946:	682b      	ldr	r3, [r5, #0]
 8003948:	0607      	lsls	r7, r0, #24
 800394a:	f103 0104 	add.w	r1, r3, #4
 800394e:	6029      	str	r1, [r5, #0]
 8003950:	d501      	bpl.n	8003956 <_printf_i+0xbe>
 8003952:	681e      	ldr	r6, [r3, #0]
 8003954:	e003      	b.n	800395e <_printf_i+0xc6>
 8003956:	0646      	lsls	r6, r0, #25
 8003958:	d5fb      	bpl.n	8003952 <_printf_i+0xba>
 800395a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800395e:	2e00      	cmp	r6, #0
 8003960:	da03      	bge.n	800396a <_printf_i+0xd2>
 8003962:	232d      	movs	r3, #45	; 0x2d
 8003964:	4276      	negs	r6, r6
 8003966:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800396a:	485a      	ldr	r0, [pc, #360]	; (8003ad4 <_printf_i+0x23c>)
 800396c:	230a      	movs	r3, #10
 800396e:	e012      	b.n	8003996 <_printf_i+0xfe>
 8003970:	682b      	ldr	r3, [r5, #0]
 8003972:	6820      	ldr	r0, [r4, #0]
 8003974:	1d19      	adds	r1, r3, #4
 8003976:	6029      	str	r1, [r5, #0]
 8003978:	0605      	lsls	r5, r0, #24
 800397a:	d501      	bpl.n	8003980 <_printf_i+0xe8>
 800397c:	681e      	ldr	r6, [r3, #0]
 800397e:	e002      	b.n	8003986 <_printf_i+0xee>
 8003980:	0641      	lsls	r1, r0, #25
 8003982:	d5fb      	bpl.n	800397c <_printf_i+0xe4>
 8003984:	881e      	ldrh	r6, [r3, #0]
 8003986:	4853      	ldr	r0, [pc, #332]	; (8003ad4 <_printf_i+0x23c>)
 8003988:	2f6f      	cmp	r7, #111	; 0x6f
 800398a:	bf0c      	ite	eq
 800398c:	2308      	moveq	r3, #8
 800398e:	230a      	movne	r3, #10
 8003990:	2100      	movs	r1, #0
 8003992:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003996:	6865      	ldr	r5, [r4, #4]
 8003998:	60a5      	str	r5, [r4, #8]
 800399a:	2d00      	cmp	r5, #0
 800399c:	bfa2      	ittt	ge
 800399e:	6821      	ldrge	r1, [r4, #0]
 80039a0:	f021 0104 	bicge.w	r1, r1, #4
 80039a4:	6021      	strge	r1, [r4, #0]
 80039a6:	b90e      	cbnz	r6, 80039ac <_printf_i+0x114>
 80039a8:	2d00      	cmp	r5, #0
 80039aa:	d04b      	beq.n	8003a44 <_printf_i+0x1ac>
 80039ac:	4615      	mov	r5, r2
 80039ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80039b2:	fb03 6711 	mls	r7, r3, r1, r6
 80039b6:	5dc7      	ldrb	r7, [r0, r7]
 80039b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80039bc:	4637      	mov	r7, r6
 80039be:	42bb      	cmp	r3, r7
 80039c0:	460e      	mov	r6, r1
 80039c2:	d9f4      	bls.n	80039ae <_printf_i+0x116>
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d10b      	bne.n	80039e0 <_printf_i+0x148>
 80039c8:	6823      	ldr	r3, [r4, #0]
 80039ca:	07de      	lsls	r6, r3, #31
 80039cc:	d508      	bpl.n	80039e0 <_printf_i+0x148>
 80039ce:	6923      	ldr	r3, [r4, #16]
 80039d0:	6861      	ldr	r1, [r4, #4]
 80039d2:	4299      	cmp	r1, r3
 80039d4:	bfde      	ittt	le
 80039d6:	2330      	movle	r3, #48	; 0x30
 80039d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80039e0:	1b52      	subs	r2, r2, r5
 80039e2:	6122      	str	r2, [r4, #16]
 80039e4:	f8cd a000 	str.w	sl, [sp]
 80039e8:	464b      	mov	r3, r9
 80039ea:	aa03      	add	r2, sp, #12
 80039ec:	4621      	mov	r1, r4
 80039ee:	4640      	mov	r0, r8
 80039f0:	f7ff fee4 	bl	80037bc <_printf_common>
 80039f4:	3001      	adds	r0, #1
 80039f6:	d14a      	bne.n	8003a8e <_printf_i+0x1f6>
 80039f8:	f04f 30ff 	mov.w	r0, #4294967295
 80039fc:	b004      	add	sp, #16
 80039fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a02:	6823      	ldr	r3, [r4, #0]
 8003a04:	f043 0320 	orr.w	r3, r3, #32
 8003a08:	6023      	str	r3, [r4, #0]
 8003a0a:	4833      	ldr	r0, [pc, #204]	; (8003ad8 <_printf_i+0x240>)
 8003a0c:	2778      	movs	r7, #120	; 0x78
 8003a0e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003a12:	6823      	ldr	r3, [r4, #0]
 8003a14:	6829      	ldr	r1, [r5, #0]
 8003a16:	061f      	lsls	r7, r3, #24
 8003a18:	f851 6b04 	ldr.w	r6, [r1], #4
 8003a1c:	d402      	bmi.n	8003a24 <_printf_i+0x18c>
 8003a1e:	065f      	lsls	r7, r3, #25
 8003a20:	bf48      	it	mi
 8003a22:	b2b6      	uxthmi	r6, r6
 8003a24:	07df      	lsls	r7, r3, #31
 8003a26:	bf48      	it	mi
 8003a28:	f043 0320 	orrmi.w	r3, r3, #32
 8003a2c:	6029      	str	r1, [r5, #0]
 8003a2e:	bf48      	it	mi
 8003a30:	6023      	strmi	r3, [r4, #0]
 8003a32:	b91e      	cbnz	r6, 8003a3c <_printf_i+0x1a4>
 8003a34:	6823      	ldr	r3, [r4, #0]
 8003a36:	f023 0320 	bic.w	r3, r3, #32
 8003a3a:	6023      	str	r3, [r4, #0]
 8003a3c:	2310      	movs	r3, #16
 8003a3e:	e7a7      	b.n	8003990 <_printf_i+0xf8>
 8003a40:	4824      	ldr	r0, [pc, #144]	; (8003ad4 <_printf_i+0x23c>)
 8003a42:	e7e4      	b.n	8003a0e <_printf_i+0x176>
 8003a44:	4615      	mov	r5, r2
 8003a46:	e7bd      	b.n	80039c4 <_printf_i+0x12c>
 8003a48:	682b      	ldr	r3, [r5, #0]
 8003a4a:	6826      	ldr	r6, [r4, #0]
 8003a4c:	6961      	ldr	r1, [r4, #20]
 8003a4e:	1d18      	adds	r0, r3, #4
 8003a50:	6028      	str	r0, [r5, #0]
 8003a52:	0635      	lsls	r5, r6, #24
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	d501      	bpl.n	8003a5c <_printf_i+0x1c4>
 8003a58:	6019      	str	r1, [r3, #0]
 8003a5a:	e002      	b.n	8003a62 <_printf_i+0x1ca>
 8003a5c:	0670      	lsls	r0, r6, #25
 8003a5e:	d5fb      	bpl.n	8003a58 <_printf_i+0x1c0>
 8003a60:	8019      	strh	r1, [r3, #0]
 8003a62:	2300      	movs	r3, #0
 8003a64:	6123      	str	r3, [r4, #16]
 8003a66:	4615      	mov	r5, r2
 8003a68:	e7bc      	b.n	80039e4 <_printf_i+0x14c>
 8003a6a:	682b      	ldr	r3, [r5, #0]
 8003a6c:	1d1a      	adds	r2, r3, #4
 8003a6e:	602a      	str	r2, [r5, #0]
 8003a70:	681d      	ldr	r5, [r3, #0]
 8003a72:	6862      	ldr	r2, [r4, #4]
 8003a74:	2100      	movs	r1, #0
 8003a76:	4628      	mov	r0, r5
 8003a78:	f7fc fbaa 	bl	80001d0 <memchr>
 8003a7c:	b108      	cbz	r0, 8003a82 <_printf_i+0x1ea>
 8003a7e:	1b40      	subs	r0, r0, r5
 8003a80:	6060      	str	r0, [r4, #4]
 8003a82:	6863      	ldr	r3, [r4, #4]
 8003a84:	6123      	str	r3, [r4, #16]
 8003a86:	2300      	movs	r3, #0
 8003a88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a8c:	e7aa      	b.n	80039e4 <_printf_i+0x14c>
 8003a8e:	6923      	ldr	r3, [r4, #16]
 8003a90:	462a      	mov	r2, r5
 8003a92:	4649      	mov	r1, r9
 8003a94:	4640      	mov	r0, r8
 8003a96:	47d0      	blx	sl
 8003a98:	3001      	adds	r0, #1
 8003a9a:	d0ad      	beq.n	80039f8 <_printf_i+0x160>
 8003a9c:	6823      	ldr	r3, [r4, #0]
 8003a9e:	079b      	lsls	r3, r3, #30
 8003aa0:	d413      	bmi.n	8003aca <_printf_i+0x232>
 8003aa2:	68e0      	ldr	r0, [r4, #12]
 8003aa4:	9b03      	ldr	r3, [sp, #12]
 8003aa6:	4298      	cmp	r0, r3
 8003aa8:	bfb8      	it	lt
 8003aaa:	4618      	movlt	r0, r3
 8003aac:	e7a6      	b.n	80039fc <_printf_i+0x164>
 8003aae:	2301      	movs	r3, #1
 8003ab0:	4632      	mov	r2, r6
 8003ab2:	4649      	mov	r1, r9
 8003ab4:	4640      	mov	r0, r8
 8003ab6:	47d0      	blx	sl
 8003ab8:	3001      	adds	r0, #1
 8003aba:	d09d      	beq.n	80039f8 <_printf_i+0x160>
 8003abc:	3501      	adds	r5, #1
 8003abe:	68e3      	ldr	r3, [r4, #12]
 8003ac0:	9903      	ldr	r1, [sp, #12]
 8003ac2:	1a5b      	subs	r3, r3, r1
 8003ac4:	42ab      	cmp	r3, r5
 8003ac6:	dcf2      	bgt.n	8003aae <_printf_i+0x216>
 8003ac8:	e7eb      	b.n	8003aa2 <_printf_i+0x20a>
 8003aca:	2500      	movs	r5, #0
 8003acc:	f104 0619 	add.w	r6, r4, #25
 8003ad0:	e7f5      	b.n	8003abe <_printf_i+0x226>
 8003ad2:	bf00      	nop
 8003ad4:	08007a29 	.word	0x08007a29
 8003ad8:	08007a3a 	.word	0x08007a3a

08003adc <_scanf_float>:
 8003adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ae0:	b087      	sub	sp, #28
 8003ae2:	4617      	mov	r7, r2
 8003ae4:	9303      	str	r3, [sp, #12]
 8003ae6:	688b      	ldr	r3, [r1, #8]
 8003ae8:	1e5a      	subs	r2, r3, #1
 8003aea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003aee:	bf83      	ittte	hi
 8003af0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003af4:	195b      	addhi	r3, r3, r5
 8003af6:	9302      	strhi	r3, [sp, #8]
 8003af8:	2300      	movls	r3, #0
 8003afa:	bf86      	itte	hi
 8003afc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003b00:	608b      	strhi	r3, [r1, #8]
 8003b02:	9302      	strls	r3, [sp, #8]
 8003b04:	680b      	ldr	r3, [r1, #0]
 8003b06:	468b      	mov	fp, r1
 8003b08:	2500      	movs	r5, #0
 8003b0a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003b0e:	f84b 3b1c 	str.w	r3, [fp], #28
 8003b12:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003b16:	4680      	mov	r8, r0
 8003b18:	460c      	mov	r4, r1
 8003b1a:	465e      	mov	r6, fp
 8003b1c:	46aa      	mov	sl, r5
 8003b1e:	46a9      	mov	r9, r5
 8003b20:	9501      	str	r5, [sp, #4]
 8003b22:	68a2      	ldr	r2, [r4, #8]
 8003b24:	b152      	cbz	r2, 8003b3c <_scanf_float+0x60>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2b4e      	cmp	r3, #78	; 0x4e
 8003b2c:	d864      	bhi.n	8003bf8 <_scanf_float+0x11c>
 8003b2e:	2b40      	cmp	r3, #64	; 0x40
 8003b30:	d83c      	bhi.n	8003bac <_scanf_float+0xd0>
 8003b32:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8003b36:	b2c8      	uxtb	r0, r1
 8003b38:	280e      	cmp	r0, #14
 8003b3a:	d93a      	bls.n	8003bb2 <_scanf_float+0xd6>
 8003b3c:	f1b9 0f00 	cmp.w	r9, #0
 8003b40:	d003      	beq.n	8003b4a <_scanf_float+0x6e>
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b48:	6023      	str	r3, [r4, #0]
 8003b4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003b4e:	f1ba 0f01 	cmp.w	sl, #1
 8003b52:	f200 8113 	bhi.w	8003d7c <_scanf_float+0x2a0>
 8003b56:	455e      	cmp	r6, fp
 8003b58:	f200 8105 	bhi.w	8003d66 <_scanf_float+0x28a>
 8003b5c:	2501      	movs	r5, #1
 8003b5e:	4628      	mov	r0, r5
 8003b60:	b007      	add	sp, #28
 8003b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b66:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8003b6a:	2a0d      	cmp	r2, #13
 8003b6c:	d8e6      	bhi.n	8003b3c <_scanf_float+0x60>
 8003b6e:	a101      	add	r1, pc, #4	; (adr r1, 8003b74 <_scanf_float+0x98>)
 8003b70:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003b74:	08003cb3 	.word	0x08003cb3
 8003b78:	08003b3d 	.word	0x08003b3d
 8003b7c:	08003b3d 	.word	0x08003b3d
 8003b80:	08003b3d 	.word	0x08003b3d
 8003b84:	08003d13 	.word	0x08003d13
 8003b88:	08003ceb 	.word	0x08003ceb
 8003b8c:	08003b3d 	.word	0x08003b3d
 8003b90:	08003b3d 	.word	0x08003b3d
 8003b94:	08003cc1 	.word	0x08003cc1
 8003b98:	08003b3d 	.word	0x08003b3d
 8003b9c:	08003b3d 	.word	0x08003b3d
 8003ba0:	08003b3d 	.word	0x08003b3d
 8003ba4:	08003b3d 	.word	0x08003b3d
 8003ba8:	08003c79 	.word	0x08003c79
 8003bac:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003bb0:	e7db      	b.n	8003b6a <_scanf_float+0x8e>
 8003bb2:	290e      	cmp	r1, #14
 8003bb4:	d8c2      	bhi.n	8003b3c <_scanf_float+0x60>
 8003bb6:	a001      	add	r0, pc, #4	; (adr r0, 8003bbc <_scanf_float+0xe0>)
 8003bb8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003bbc:	08003c6b 	.word	0x08003c6b
 8003bc0:	08003b3d 	.word	0x08003b3d
 8003bc4:	08003c6b 	.word	0x08003c6b
 8003bc8:	08003cff 	.word	0x08003cff
 8003bcc:	08003b3d 	.word	0x08003b3d
 8003bd0:	08003c19 	.word	0x08003c19
 8003bd4:	08003c55 	.word	0x08003c55
 8003bd8:	08003c55 	.word	0x08003c55
 8003bdc:	08003c55 	.word	0x08003c55
 8003be0:	08003c55 	.word	0x08003c55
 8003be4:	08003c55 	.word	0x08003c55
 8003be8:	08003c55 	.word	0x08003c55
 8003bec:	08003c55 	.word	0x08003c55
 8003bf0:	08003c55 	.word	0x08003c55
 8003bf4:	08003c55 	.word	0x08003c55
 8003bf8:	2b6e      	cmp	r3, #110	; 0x6e
 8003bfa:	d809      	bhi.n	8003c10 <_scanf_float+0x134>
 8003bfc:	2b60      	cmp	r3, #96	; 0x60
 8003bfe:	d8b2      	bhi.n	8003b66 <_scanf_float+0x8a>
 8003c00:	2b54      	cmp	r3, #84	; 0x54
 8003c02:	d077      	beq.n	8003cf4 <_scanf_float+0x218>
 8003c04:	2b59      	cmp	r3, #89	; 0x59
 8003c06:	d199      	bne.n	8003b3c <_scanf_float+0x60>
 8003c08:	2d07      	cmp	r5, #7
 8003c0a:	d197      	bne.n	8003b3c <_scanf_float+0x60>
 8003c0c:	2508      	movs	r5, #8
 8003c0e:	e029      	b.n	8003c64 <_scanf_float+0x188>
 8003c10:	2b74      	cmp	r3, #116	; 0x74
 8003c12:	d06f      	beq.n	8003cf4 <_scanf_float+0x218>
 8003c14:	2b79      	cmp	r3, #121	; 0x79
 8003c16:	e7f6      	b.n	8003c06 <_scanf_float+0x12a>
 8003c18:	6821      	ldr	r1, [r4, #0]
 8003c1a:	05c8      	lsls	r0, r1, #23
 8003c1c:	d51a      	bpl.n	8003c54 <_scanf_float+0x178>
 8003c1e:	9b02      	ldr	r3, [sp, #8]
 8003c20:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003c24:	6021      	str	r1, [r4, #0]
 8003c26:	f109 0901 	add.w	r9, r9, #1
 8003c2a:	b11b      	cbz	r3, 8003c34 <_scanf_float+0x158>
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	3201      	adds	r2, #1
 8003c30:	9302      	str	r3, [sp, #8]
 8003c32:	60a2      	str	r2, [r4, #8]
 8003c34:	68a3      	ldr	r3, [r4, #8]
 8003c36:	3b01      	subs	r3, #1
 8003c38:	60a3      	str	r3, [r4, #8]
 8003c3a:	6923      	ldr	r3, [r4, #16]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	6123      	str	r3, [r4, #16]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3b01      	subs	r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	607b      	str	r3, [r7, #4]
 8003c48:	f340 8084 	ble.w	8003d54 <_scanf_float+0x278>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	603b      	str	r3, [r7, #0]
 8003c52:	e766      	b.n	8003b22 <_scanf_float+0x46>
 8003c54:	eb1a 0f05 	cmn.w	sl, r5
 8003c58:	f47f af70 	bne.w	8003b3c <_scanf_float+0x60>
 8003c5c:	6822      	ldr	r2, [r4, #0]
 8003c5e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8003c62:	6022      	str	r2, [r4, #0]
 8003c64:	f806 3b01 	strb.w	r3, [r6], #1
 8003c68:	e7e4      	b.n	8003c34 <_scanf_float+0x158>
 8003c6a:	6822      	ldr	r2, [r4, #0]
 8003c6c:	0610      	lsls	r0, r2, #24
 8003c6e:	f57f af65 	bpl.w	8003b3c <_scanf_float+0x60>
 8003c72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c76:	e7f4      	b.n	8003c62 <_scanf_float+0x186>
 8003c78:	f1ba 0f00 	cmp.w	sl, #0
 8003c7c:	d10e      	bne.n	8003c9c <_scanf_float+0x1c0>
 8003c7e:	f1b9 0f00 	cmp.w	r9, #0
 8003c82:	d10e      	bne.n	8003ca2 <_scanf_float+0x1c6>
 8003c84:	6822      	ldr	r2, [r4, #0]
 8003c86:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003c8a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003c8e:	d108      	bne.n	8003ca2 <_scanf_float+0x1c6>
 8003c90:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003c94:	6022      	str	r2, [r4, #0]
 8003c96:	f04f 0a01 	mov.w	sl, #1
 8003c9a:	e7e3      	b.n	8003c64 <_scanf_float+0x188>
 8003c9c:	f1ba 0f02 	cmp.w	sl, #2
 8003ca0:	d055      	beq.n	8003d4e <_scanf_float+0x272>
 8003ca2:	2d01      	cmp	r5, #1
 8003ca4:	d002      	beq.n	8003cac <_scanf_float+0x1d0>
 8003ca6:	2d04      	cmp	r5, #4
 8003ca8:	f47f af48 	bne.w	8003b3c <_scanf_float+0x60>
 8003cac:	3501      	adds	r5, #1
 8003cae:	b2ed      	uxtb	r5, r5
 8003cb0:	e7d8      	b.n	8003c64 <_scanf_float+0x188>
 8003cb2:	f1ba 0f01 	cmp.w	sl, #1
 8003cb6:	f47f af41 	bne.w	8003b3c <_scanf_float+0x60>
 8003cba:	f04f 0a02 	mov.w	sl, #2
 8003cbe:	e7d1      	b.n	8003c64 <_scanf_float+0x188>
 8003cc0:	b97d      	cbnz	r5, 8003ce2 <_scanf_float+0x206>
 8003cc2:	f1b9 0f00 	cmp.w	r9, #0
 8003cc6:	f47f af3c 	bne.w	8003b42 <_scanf_float+0x66>
 8003cca:	6822      	ldr	r2, [r4, #0]
 8003ccc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003cd0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003cd4:	f47f af39 	bne.w	8003b4a <_scanf_float+0x6e>
 8003cd8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003cdc:	6022      	str	r2, [r4, #0]
 8003cde:	2501      	movs	r5, #1
 8003ce0:	e7c0      	b.n	8003c64 <_scanf_float+0x188>
 8003ce2:	2d03      	cmp	r5, #3
 8003ce4:	d0e2      	beq.n	8003cac <_scanf_float+0x1d0>
 8003ce6:	2d05      	cmp	r5, #5
 8003ce8:	e7de      	b.n	8003ca8 <_scanf_float+0x1cc>
 8003cea:	2d02      	cmp	r5, #2
 8003cec:	f47f af26 	bne.w	8003b3c <_scanf_float+0x60>
 8003cf0:	2503      	movs	r5, #3
 8003cf2:	e7b7      	b.n	8003c64 <_scanf_float+0x188>
 8003cf4:	2d06      	cmp	r5, #6
 8003cf6:	f47f af21 	bne.w	8003b3c <_scanf_float+0x60>
 8003cfa:	2507      	movs	r5, #7
 8003cfc:	e7b2      	b.n	8003c64 <_scanf_float+0x188>
 8003cfe:	6822      	ldr	r2, [r4, #0]
 8003d00:	0591      	lsls	r1, r2, #22
 8003d02:	f57f af1b 	bpl.w	8003b3c <_scanf_float+0x60>
 8003d06:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003d0a:	6022      	str	r2, [r4, #0]
 8003d0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8003d10:	e7a8      	b.n	8003c64 <_scanf_float+0x188>
 8003d12:	6822      	ldr	r2, [r4, #0]
 8003d14:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003d18:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003d1c:	d006      	beq.n	8003d2c <_scanf_float+0x250>
 8003d1e:	0550      	lsls	r0, r2, #21
 8003d20:	f57f af0c 	bpl.w	8003b3c <_scanf_float+0x60>
 8003d24:	f1b9 0f00 	cmp.w	r9, #0
 8003d28:	f43f af0f 	beq.w	8003b4a <_scanf_float+0x6e>
 8003d2c:	0591      	lsls	r1, r2, #22
 8003d2e:	bf58      	it	pl
 8003d30:	9901      	ldrpl	r1, [sp, #4]
 8003d32:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003d36:	bf58      	it	pl
 8003d38:	eba9 0101 	subpl.w	r1, r9, r1
 8003d3c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003d40:	bf58      	it	pl
 8003d42:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003d46:	6022      	str	r2, [r4, #0]
 8003d48:	f04f 0900 	mov.w	r9, #0
 8003d4c:	e78a      	b.n	8003c64 <_scanf_float+0x188>
 8003d4e:	f04f 0a03 	mov.w	sl, #3
 8003d52:	e787      	b.n	8003c64 <_scanf_float+0x188>
 8003d54:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003d58:	4639      	mov	r1, r7
 8003d5a:	4640      	mov	r0, r8
 8003d5c:	4798      	blx	r3
 8003d5e:	2800      	cmp	r0, #0
 8003d60:	f43f aedf 	beq.w	8003b22 <_scanf_float+0x46>
 8003d64:	e6ea      	b.n	8003b3c <_scanf_float+0x60>
 8003d66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003d6e:	463a      	mov	r2, r7
 8003d70:	4640      	mov	r0, r8
 8003d72:	4798      	blx	r3
 8003d74:	6923      	ldr	r3, [r4, #16]
 8003d76:	3b01      	subs	r3, #1
 8003d78:	6123      	str	r3, [r4, #16]
 8003d7a:	e6ec      	b.n	8003b56 <_scanf_float+0x7a>
 8003d7c:	1e6b      	subs	r3, r5, #1
 8003d7e:	2b06      	cmp	r3, #6
 8003d80:	d825      	bhi.n	8003dce <_scanf_float+0x2f2>
 8003d82:	2d02      	cmp	r5, #2
 8003d84:	d836      	bhi.n	8003df4 <_scanf_float+0x318>
 8003d86:	455e      	cmp	r6, fp
 8003d88:	f67f aee8 	bls.w	8003b5c <_scanf_float+0x80>
 8003d8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d90:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003d94:	463a      	mov	r2, r7
 8003d96:	4640      	mov	r0, r8
 8003d98:	4798      	blx	r3
 8003d9a:	6923      	ldr	r3, [r4, #16]
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	6123      	str	r3, [r4, #16]
 8003da0:	e7f1      	b.n	8003d86 <_scanf_float+0x2aa>
 8003da2:	9802      	ldr	r0, [sp, #8]
 8003da4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003da8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8003dac:	9002      	str	r0, [sp, #8]
 8003dae:	463a      	mov	r2, r7
 8003db0:	4640      	mov	r0, r8
 8003db2:	4798      	blx	r3
 8003db4:	6923      	ldr	r3, [r4, #16]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	6123      	str	r3, [r4, #16]
 8003dba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003dbe:	fa5f fa8a 	uxtb.w	sl, sl
 8003dc2:	f1ba 0f02 	cmp.w	sl, #2
 8003dc6:	d1ec      	bne.n	8003da2 <_scanf_float+0x2c6>
 8003dc8:	3d03      	subs	r5, #3
 8003dca:	b2ed      	uxtb	r5, r5
 8003dcc:	1b76      	subs	r6, r6, r5
 8003dce:	6823      	ldr	r3, [r4, #0]
 8003dd0:	05da      	lsls	r2, r3, #23
 8003dd2:	d52f      	bpl.n	8003e34 <_scanf_float+0x358>
 8003dd4:	055b      	lsls	r3, r3, #21
 8003dd6:	d510      	bpl.n	8003dfa <_scanf_float+0x31e>
 8003dd8:	455e      	cmp	r6, fp
 8003dda:	f67f aebf 	bls.w	8003b5c <_scanf_float+0x80>
 8003dde:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003de2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003de6:	463a      	mov	r2, r7
 8003de8:	4640      	mov	r0, r8
 8003dea:	4798      	blx	r3
 8003dec:	6923      	ldr	r3, [r4, #16]
 8003dee:	3b01      	subs	r3, #1
 8003df0:	6123      	str	r3, [r4, #16]
 8003df2:	e7f1      	b.n	8003dd8 <_scanf_float+0x2fc>
 8003df4:	46aa      	mov	sl, r5
 8003df6:	9602      	str	r6, [sp, #8]
 8003df8:	e7df      	b.n	8003dba <_scanf_float+0x2de>
 8003dfa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003dfe:	6923      	ldr	r3, [r4, #16]
 8003e00:	2965      	cmp	r1, #101	; 0x65
 8003e02:	f103 33ff 	add.w	r3, r3, #4294967295
 8003e06:	f106 35ff 	add.w	r5, r6, #4294967295
 8003e0a:	6123      	str	r3, [r4, #16]
 8003e0c:	d00c      	beq.n	8003e28 <_scanf_float+0x34c>
 8003e0e:	2945      	cmp	r1, #69	; 0x45
 8003e10:	d00a      	beq.n	8003e28 <_scanf_float+0x34c>
 8003e12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003e16:	463a      	mov	r2, r7
 8003e18:	4640      	mov	r0, r8
 8003e1a:	4798      	blx	r3
 8003e1c:	6923      	ldr	r3, [r4, #16]
 8003e1e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003e22:	3b01      	subs	r3, #1
 8003e24:	1eb5      	subs	r5, r6, #2
 8003e26:	6123      	str	r3, [r4, #16]
 8003e28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003e2c:	463a      	mov	r2, r7
 8003e2e:	4640      	mov	r0, r8
 8003e30:	4798      	blx	r3
 8003e32:	462e      	mov	r6, r5
 8003e34:	6825      	ldr	r5, [r4, #0]
 8003e36:	f015 0510 	ands.w	r5, r5, #16
 8003e3a:	d158      	bne.n	8003eee <_scanf_float+0x412>
 8003e3c:	7035      	strb	r5, [r6, #0]
 8003e3e:	6823      	ldr	r3, [r4, #0]
 8003e40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e48:	d11c      	bne.n	8003e84 <_scanf_float+0x3a8>
 8003e4a:	9b01      	ldr	r3, [sp, #4]
 8003e4c:	454b      	cmp	r3, r9
 8003e4e:	eba3 0209 	sub.w	r2, r3, r9
 8003e52:	d124      	bne.n	8003e9e <_scanf_float+0x3c2>
 8003e54:	2200      	movs	r2, #0
 8003e56:	4659      	mov	r1, fp
 8003e58:	4640      	mov	r0, r8
 8003e5a:	f002 fc31 	bl	80066c0 <_strtod_r>
 8003e5e:	9b03      	ldr	r3, [sp, #12]
 8003e60:	6821      	ldr	r1, [r4, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f011 0f02 	tst.w	r1, #2
 8003e68:	ec57 6b10 	vmov	r6, r7, d0
 8003e6c:	f103 0204 	add.w	r2, r3, #4
 8003e70:	d020      	beq.n	8003eb4 <_scanf_float+0x3d8>
 8003e72:	9903      	ldr	r1, [sp, #12]
 8003e74:	600a      	str	r2, [r1, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	e9c3 6700 	strd	r6, r7, [r3]
 8003e7c:	68e3      	ldr	r3, [r4, #12]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	60e3      	str	r3, [r4, #12]
 8003e82:	e66c      	b.n	8003b5e <_scanf_float+0x82>
 8003e84:	9b04      	ldr	r3, [sp, #16]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0e4      	beq.n	8003e54 <_scanf_float+0x378>
 8003e8a:	9905      	ldr	r1, [sp, #20]
 8003e8c:	230a      	movs	r3, #10
 8003e8e:	462a      	mov	r2, r5
 8003e90:	3101      	adds	r1, #1
 8003e92:	4640      	mov	r0, r8
 8003e94:	f002 fc9c 	bl	80067d0 <_strtol_r>
 8003e98:	9b04      	ldr	r3, [sp, #16]
 8003e9a:	9e05      	ldr	r6, [sp, #20]
 8003e9c:	1ac2      	subs	r2, r0, r3
 8003e9e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003ea2:	429e      	cmp	r6, r3
 8003ea4:	bf28      	it	cs
 8003ea6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8003eaa:	4912      	ldr	r1, [pc, #72]	; (8003ef4 <_scanf_float+0x418>)
 8003eac:	4630      	mov	r0, r6
 8003eae:	f000 f8e7 	bl	8004080 <siprintf>
 8003eb2:	e7cf      	b.n	8003e54 <_scanf_float+0x378>
 8003eb4:	f011 0f04 	tst.w	r1, #4
 8003eb8:	9903      	ldr	r1, [sp, #12]
 8003eba:	600a      	str	r2, [r1, #0]
 8003ebc:	d1db      	bne.n	8003e76 <_scanf_float+0x39a>
 8003ebe:	f8d3 8000 	ldr.w	r8, [r3]
 8003ec2:	ee10 2a10 	vmov	r2, s0
 8003ec6:	ee10 0a10 	vmov	r0, s0
 8003eca:	463b      	mov	r3, r7
 8003ecc:	4639      	mov	r1, r7
 8003ece:	f7fc fe2d 	bl	8000b2c <__aeabi_dcmpun>
 8003ed2:	b128      	cbz	r0, 8003ee0 <_scanf_float+0x404>
 8003ed4:	4808      	ldr	r0, [pc, #32]	; (8003ef8 <_scanf_float+0x41c>)
 8003ed6:	f000 f9b7 	bl	8004248 <nanf>
 8003eda:	ed88 0a00 	vstr	s0, [r8]
 8003ede:	e7cd      	b.n	8003e7c <_scanf_float+0x3a0>
 8003ee0:	4630      	mov	r0, r6
 8003ee2:	4639      	mov	r1, r7
 8003ee4:	f7fc fe80 	bl	8000be8 <__aeabi_d2f>
 8003ee8:	f8c8 0000 	str.w	r0, [r8]
 8003eec:	e7c6      	b.n	8003e7c <_scanf_float+0x3a0>
 8003eee:	2500      	movs	r5, #0
 8003ef0:	e635      	b.n	8003b5e <_scanf_float+0x82>
 8003ef2:	bf00      	nop
 8003ef4:	08007a4b 	.word	0x08007a4b
 8003ef8:	08007ddd 	.word	0x08007ddd

08003efc <std>:
 8003efc:	2300      	movs	r3, #0
 8003efe:	b510      	push	{r4, lr}
 8003f00:	4604      	mov	r4, r0
 8003f02:	e9c0 3300 	strd	r3, r3, [r0]
 8003f06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f0a:	6083      	str	r3, [r0, #8]
 8003f0c:	8181      	strh	r1, [r0, #12]
 8003f0e:	6643      	str	r3, [r0, #100]	; 0x64
 8003f10:	81c2      	strh	r2, [r0, #14]
 8003f12:	6183      	str	r3, [r0, #24]
 8003f14:	4619      	mov	r1, r3
 8003f16:	2208      	movs	r2, #8
 8003f18:	305c      	adds	r0, #92	; 0x5c
 8003f1a:	f000 f914 	bl	8004146 <memset>
 8003f1e:	4b0d      	ldr	r3, [pc, #52]	; (8003f54 <std+0x58>)
 8003f20:	6263      	str	r3, [r4, #36]	; 0x24
 8003f22:	4b0d      	ldr	r3, [pc, #52]	; (8003f58 <std+0x5c>)
 8003f24:	62a3      	str	r3, [r4, #40]	; 0x28
 8003f26:	4b0d      	ldr	r3, [pc, #52]	; (8003f5c <std+0x60>)
 8003f28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003f2a:	4b0d      	ldr	r3, [pc, #52]	; (8003f60 <std+0x64>)
 8003f2c:	6323      	str	r3, [r4, #48]	; 0x30
 8003f2e:	4b0d      	ldr	r3, [pc, #52]	; (8003f64 <std+0x68>)
 8003f30:	6224      	str	r4, [r4, #32]
 8003f32:	429c      	cmp	r4, r3
 8003f34:	d006      	beq.n	8003f44 <std+0x48>
 8003f36:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003f3a:	4294      	cmp	r4, r2
 8003f3c:	d002      	beq.n	8003f44 <std+0x48>
 8003f3e:	33d0      	adds	r3, #208	; 0xd0
 8003f40:	429c      	cmp	r4, r3
 8003f42:	d105      	bne.n	8003f50 <std+0x54>
 8003f44:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f4c:	f000 b978 	b.w	8004240 <__retarget_lock_init_recursive>
 8003f50:	bd10      	pop	{r4, pc}
 8003f52:	bf00      	nop
 8003f54:	080040c1 	.word	0x080040c1
 8003f58:	080040e3 	.word	0x080040e3
 8003f5c:	0800411b 	.word	0x0800411b
 8003f60:	0800413f 	.word	0x0800413f
 8003f64:	200001f8 	.word	0x200001f8

08003f68 <stdio_exit_handler>:
 8003f68:	4a02      	ldr	r2, [pc, #8]	; (8003f74 <stdio_exit_handler+0xc>)
 8003f6a:	4903      	ldr	r1, [pc, #12]	; (8003f78 <stdio_exit_handler+0x10>)
 8003f6c:	4803      	ldr	r0, [pc, #12]	; (8003f7c <stdio_exit_handler+0x14>)
 8003f6e:	f000 b869 	b.w	8004044 <_fwalk_sglue>
 8003f72:	bf00      	nop
 8003f74:	20000008 	.word	0x20000008
 8003f78:	08006b91 	.word	0x08006b91
 8003f7c:	20000014 	.word	0x20000014

08003f80 <cleanup_stdio>:
 8003f80:	6841      	ldr	r1, [r0, #4]
 8003f82:	4b0c      	ldr	r3, [pc, #48]	; (8003fb4 <cleanup_stdio+0x34>)
 8003f84:	4299      	cmp	r1, r3
 8003f86:	b510      	push	{r4, lr}
 8003f88:	4604      	mov	r4, r0
 8003f8a:	d001      	beq.n	8003f90 <cleanup_stdio+0x10>
 8003f8c:	f002 fe00 	bl	8006b90 <_fflush_r>
 8003f90:	68a1      	ldr	r1, [r4, #8]
 8003f92:	4b09      	ldr	r3, [pc, #36]	; (8003fb8 <cleanup_stdio+0x38>)
 8003f94:	4299      	cmp	r1, r3
 8003f96:	d002      	beq.n	8003f9e <cleanup_stdio+0x1e>
 8003f98:	4620      	mov	r0, r4
 8003f9a:	f002 fdf9 	bl	8006b90 <_fflush_r>
 8003f9e:	68e1      	ldr	r1, [r4, #12]
 8003fa0:	4b06      	ldr	r3, [pc, #24]	; (8003fbc <cleanup_stdio+0x3c>)
 8003fa2:	4299      	cmp	r1, r3
 8003fa4:	d004      	beq.n	8003fb0 <cleanup_stdio+0x30>
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fac:	f002 bdf0 	b.w	8006b90 <_fflush_r>
 8003fb0:	bd10      	pop	{r4, pc}
 8003fb2:	bf00      	nop
 8003fb4:	200001f8 	.word	0x200001f8
 8003fb8:	20000260 	.word	0x20000260
 8003fbc:	200002c8 	.word	0x200002c8

08003fc0 <global_stdio_init.part.0>:
 8003fc0:	b510      	push	{r4, lr}
 8003fc2:	4b0b      	ldr	r3, [pc, #44]	; (8003ff0 <global_stdio_init.part.0+0x30>)
 8003fc4:	4c0b      	ldr	r4, [pc, #44]	; (8003ff4 <global_stdio_init.part.0+0x34>)
 8003fc6:	4a0c      	ldr	r2, [pc, #48]	; (8003ff8 <global_stdio_init.part.0+0x38>)
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	4620      	mov	r0, r4
 8003fcc:	2200      	movs	r2, #0
 8003fce:	2104      	movs	r1, #4
 8003fd0:	f7ff ff94 	bl	8003efc <std>
 8003fd4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003fd8:	2201      	movs	r2, #1
 8003fda:	2109      	movs	r1, #9
 8003fdc:	f7ff ff8e 	bl	8003efc <std>
 8003fe0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fea:	2112      	movs	r1, #18
 8003fec:	f7ff bf86 	b.w	8003efc <std>
 8003ff0:	20000330 	.word	0x20000330
 8003ff4:	200001f8 	.word	0x200001f8
 8003ff8:	08003f69 	.word	0x08003f69

08003ffc <__sfp_lock_acquire>:
 8003ffc:	4801      	ldr	r0, [pc, #4]	; (8004004 <__sfp_lock_acquire+0x8>)
 8003ffe:	f000 b920 	b.w	8004242 <__retarget_lock_acquire_recursive>
 8004002:	bf00      	nop
 8004004:	20000339 	.word	0x20000339

08004008 <__sfp_lock_release>:
 8004008:	4801      	ldr	r0, [pc, #4]	; (8004010 <__sfp_lock_release+0x8>)
 800400a:	f000 b91b 	b.w	8004244 <__retarget_lock_release_recursive>
 800400e:	bf00      	nop
 8004010:	20000339 	.word	0x20000339

08004014 <__sinit>:
 8004014:	b510      	push	{r4, lr}
 8004016:	4604      	mov	r4, r0
 8004018:	f7ff fff0 	bl	8003ffc <__sfp_lock_acquire>
 800401c:	6a23      	ldr	r3, [r4, #32]
 800401e:	b11b      	cbz	r3, 8004028 <__sinit+0x14>
 8004020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004024:	f7ff bff0 	b.w	8004008 <__sfp_lock_release>
 8004028:	4b04      	ldr	r3, [pc, #16]	; (800403c <__sinit+0x28>)
 800402a:	6223      	str	r3, [r4, #32]
 800402c:	4b04      	ldr	r3, [pc, #16]	; (8004040 <__sinit+0x2c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1f5      	bne.n	8004020 <__sinit+0xc>
 8004034:	f7ff ffc4 	bl	8003fc0 <global_stdio_init.part.0>
 8004038:	e7f2      	b.n	8004020 <__sinit+0xc>
 800403a:	bf00      	nop
 800403c:	08003f81 	.word	0x08003f81
 8004040:	20000330 	.word	0x20000330

08004044 <_fwalk_sglue>:
 8004044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004048:	4607      	mov	r7, r0
 800404a:	4688      	mov	r8, r1
 800404c:	4614      	mov	r4, r2
 800404e:	2600      	movs	r6, #0
 8004050:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004054:	f1b9 0901 	subs.w	r9, r9, #1
 8004058:	d505      	bpl.n	8004066 <_fwalk_sglue+0x22>
 800405a:	6824      	ldr	r4, [r4, #0]
 800405c:	2c00      	cmp	r4, #0
 800405e:	d1f7      	bne.n	8004050 <_fwalk_sglue+0xc>
 8004060:	4630      	mov	r0, r6
 8004062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004066:	89ab      	ldrh	r3, [r5, #12]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d907      	bls.n	800407c <_fwalk_sglue+0x38>
 800406c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004070:	3301      	adds	r3, #1
 8004072:	d003      	beq.n	800407c <_fwalk_sglue+0x38>
 8004074:	4629      	mov	r1, r5
 8004076:	4638      	mov	r0, r7
 8004078:	47c0      	blx	r8
 800407a:	4306      	orrs	r6, r0
 800407c:	3568      	adds	r5, #104	; 0x68
 800407e:	e7e9      	b.n	8004054 <_fwalk_sglue+0x10>

08004080 <siprintf>:
 8004080:	b40e      	push	{r1, r2, r3}
 8004082:	b500      	push	{lr}
 8004084:	b09c      	sub	sp, #112	; 0x70
 8004086:	ab1d      	add	r3, sp, #116	; 0x74
 8004088:	9002      	str	r0, [sp, #8]
 800408a:	9006      	str	r0, [sp, #24]
 800408c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004090:	4809      	ldr	r0, [pc, #36]	; (80040b8 <siprintf+0x38>)
 8004092:	9107      	str	r1, [sp, #28]
 8004094:	9104      	str	r1, [sp, #16]
 8004096:	4909      	ldr	r1, [pc, #36]	; (80040bc <siprintf+0x3c>)
 8004098:	f853 2b04 	ldr.w	r2, [r3], #4
 800409c:	9105      	str	r1, [sp, #20]
 800409e:	6800      	ldr	r0, [r0, #0]
 80040a0:	9301      	str	r3, [sp, #4]
 80040a2:	a902      	add	r1, sp, #8
 80040a4:	f002 fbf0 	bl	8006888 <_svfiprintf_r>
 80040a8:	9b02      	ldr	r3, [sp, #8]
 80040aa:	2200      	movs	r2, #0
 80040ac:	701a      	strb	r2, [r3, #0]
 80040ae:	b01c      	add	sp, #112	; 0x70
 80040b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80040b4:	b003      	add	sp, #12
 80040b6:	4770      	bx	lr
 80040b8:	20000060 	.word	0x20000060
 80040bc:	ffff0208 	.word	0xffff0208

080040c0 <__sread>:
 80040c0:	b510      	push	{r4, lr}
 80040c2:	460c      	mov	r4, r1
 80040c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040c8:	f000 f86c 	bl	80041a4 <_read_r>
 80040cc:	2800      	cmp	r0, #0
 80040ce:	bfab      	itete	ge
 80040d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80040d2:	89a3      	ldrhlt	r3, [r4, #12]
 80040d4:	181b      	addge	r3, r3, r0
 80040d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80040da:	bfac      	ite	ge
 80040dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80040de:	81a3      	strhlt	r3, [r4, #12]
 80040e0:	bd10      	pop	{r4, pc}

080040e2 <__swrite>:
 80040e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040e6:	461f      	mov	r7, r3
 80040e8:	898b      	ldrh	r3, [r1, #12]
 80040ea:	05db      	lsls	r3, r3, #23
 80040ec:	4605      	mov	r5, r0
 80040ee:	460c      	mov	r4, r1
 80040f0:	4616      	mov	r6, r2
 80040f2:	d505      	bpl.n	8004100 <__swrite+0x1e>
 80040f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040f8:	2302      	movs	r3, #2
 80040fa:	2200      	movs	r2, #0
 80040fc:	f000 f840 	bl	8004180 <_lseek_r>
 8004100:	89a3      	ldrh	r3, [r4, #12]
 8004102:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004106:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800410a:	81a3      	strh	r3, [r4, #12]
 800410c:	4632      	mov	r2, r6
 800410e:	463b      	mov	r3, r7
 8004110:	4628      	mov	r0, r5
 8004112:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004116:	f000 b857 	b.w	80041c8 <_write_r>

0800411a <__sseek>:
 800411a:	b510      	push	{r4, lr}
 800411c:	460c      	mov	r4, r1
 800411e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004122:	f000 f82d 	bl	8004180 <_lseek_r>
 8004126:	1c43      	adds	r3, r0, #1
 8004128:	89a3      	ldrh	r3, [r4, #12]
 800412a:	bf15      	itete	ne
 800412c:	6560      	strne	r0, [r4, #84]	; 0x54
 800412e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004132:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004136:	81a3      	strheq	r3, [r4, #12]
 8004138:	bf18      	it	ne
 800413a:	81a3      	strhne	r3, [r4, #12]
 800413c:	bd10      	pop	{r4, pc}

0800413e <__sclose>:
 800413e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004142:	f000 b80d 	b.w	8004160 <_close_r>

08004146 <memset>:
 8004146:	4402      	add	r2, r0
 8004148:	4603      	mov	r3, r0
 800414a:	4293      	cmp	r3, r2
 800414c:	d100      	bne.n	8004150 <memset+0xa>
 800414e:	4770      	bx	lr
 8004150:	f803 1b01 	strb.w	r1, [r3], #1
 8004154:	e7f9      	b.n	800414a <memset+0x4>
	...

08004158 <_localeconv_r>:
 8004158:	4800      	ldr	r0, [pc, #0]	; (800415c <_localeconv_r+0x4>)
 800415a:	4770      	bx	lr
 800415c:	20000154 	.word	0x20000154

08004160 <_close_r>:
 8004160:	b538      	push	{r3, r4, r5, lr}
 8004162:	4d06      	ldr	r5, [pc, #24]	; (800417c <_close_r+0x1c>)
 8004164:	2300      	movs	r3, #0
 8004166:	4604      	mov	r4, r0
 8004168:	4608      	mov	r0, r1
 800416a:	602b      	str	r3, [r5, #0]
 800416c:	f7fd fd05 	bl	8001b7a <_close>
 8004170:	1c43      	adds	r3, r0, #1
 8004172:	d102      	bne.n	800417a <_close_r+0x1a>
 8004174:	682b      	ldr	r3, [r5, #0]
 8004176:	b103      	cbz	r3, 800417a <_close_r+0x1a>
 8004178:	6023      	str	r3, [r4, #0]
 800417a:	bd38      	pop	{r3, r4, r5, pc}
 800417c:	20000334 	.word	0x20000334

08004180 <_lseek_r>:
 8004180:	b538      	push	{r3, r4, r5, lr}
 8004182:	4d07      	ldr	r5, [pc, #28]	; (80041a0 <_lseek_r+0x20>)
 8004184:	4604      	mov	r4, r0
 8004186:	4608      	mov	r0, r1
 8004188:	4611      	mov	r1, r2
 800418a:	2200      	movs	r2, #0
 800418c:	602a      	str	r2, [r5, #0]
 800418e:	461a      	mov	r2, r3
 8004190:	f7fd fd1a 	bl	8001bc8 <_lseek>
 8004194:	1c43      	adds	r3, r0, #1
 8004196:	d102      	bne.n	800419e <_lseek_r+0x1e>
 8004198:	682b      	ldr	r3, [r5, #0]
 800419a:	b103      	cbz	r3, 800419e <_lseek_r+0x1e>
 800419c:	6023      	str	r3, [r4, #0]
 800419e:	bd38      	pop	{r3, r4, r5, pc}
 80041a0:	20000334 	.word	0x20000334

080041a4 <_read_r>:
 80041a4:	b538      	push	{r3, r4, r5, lr}
 80041a6:	4d07      	ldr	r5, [pc, #28]	; (80041c4 <_read_r+0x20>)
 80041a8:	4604      	mov	r4, r0
 80041aa:	4608      	mov	r0, r1
 80041ac:	4611      	mov	r1, r2
 80041ae:	2200      	movs	r2, #0
 80041b0:	602a      	str	r2, [r5, #0]
 80041b2:	461a      	mov	r2, r3
 80041b4:	f7fd fca8 	bl	8001b08 <_read>
 80041b8:	1c43      	adds	r3, r0, #1
 80041ba:	d102      	bne.n	80041c2 <_read_r+0x1e>
 80041bc:	682b      	ldr	r3, [r5, #0]
 80041be:	b103      	cbz	r3, 80041c2 <_read_r+0x1e>
 80041c0:	6023      	str	r3, [r4, #0]
 80041c2:	bd38      	pop	{r3, r4, r5, pc}
 80041c4:	20000334 	.word	0x20000334

080041c8 <_write_r>:
 80041c8:	b538      	push	{r3, r4, r5, lr}
 80041ca:	4d07      	ldr	r5, [pc, #28]	; (80041e8 <_write_r+0x20>)
 80041cc:	4604      	mov	r4, r0
 80041ce:	4608      	mov	r0, r1
 80041d0:	4611      	mov	r1, r2
 80041d2:	2200      	movs	r2, #0
 80041d4:	602a      	str	r2, [r5, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	f7fd fcb3 	bl	8001b42 <_write>
 80041dc:	1c43      	adds	r3, r0, #1
 80041de:	d102      	bne.n	80041e6 <_write_r+0x1e>
 80041e0:	682b      	ldr	r3, [r5, #0]
 80041e2:	b103      	cbz	r3, 80041e6 <_write_r+0x1e>
 80041e4:	6023      	str	r3, [r4, #0]
 80041e6:	bd38      	pop	{r3, r4, r5, pc}
 80041e8:	20000334 	.word	0x20000334

080041ec <__errno>:
 80041ec:	4b01      	ldr	r3, [pc, #4]	; (80041f4 <__errno+0x8>)
 80041ee:	6818      	ldr	r0, [r3, #0]
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	20000060 	.word	0x20000060

080041f8 <__libc_init_array>:
 80041f8:	b570      	push	{r4, r5, r6, lr}
 80041fa:	4d0d      	ldr	r5, [pc, #52]	; (8004230 <__libc_init_array+0x38>)
 80041fc:	4c0d      	ldr	r4, [pc, #52]	; (8004234 <__libc_init_array+0x3c>)
 80041fe:	1b64      	subs	r4, r4, r5
 8004200:	10a4      	asrs	r4, r4, #2
 8004202:	2600      	movs	r6, #0
 8004204:	42a6      	cmp	r6, r4
 8004206:	d109      	bne.n	800421c <__libc_init_array+0x24>
 8004208:	4d0b      	ldr	r5, [pc, #44]	; (8004238 <__libc_init_array+0x40>)
 800420a:	4c0c      	ldr	r4, [pc, #48]	; (800423c <__libc_init_array+0x44>)
 800420c:	f003 fbd8 	bl	80079c0 <_init>
 8004210:	1b64      	subs	r4, r4, r5
 8004212:	10a4      	asrs	r4, r4, #2
 8004214:	2600      	movs	r6, #0
 8004216:	42a6      	cmp	r6, r4
 8004218:	d105      	bne.n	8004226 <__libc_init_array+0x2e>
 800421a:	bd70      	pop	{r4, r5, r6, pc}
 800421c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004220:	4798      	blx	r3
 8004222:	3601      	adds	r6, #1
 8004224:	e7ee      	b.n	8004204 <__libc_init_array+0xc>
 8004226:	f855 3b04 	ldr.w	r3, [r5], #4
 800422a:	4798      	blx	r3
 800422c:	3601      	adds	r6, #1
 800422e:	e7f2      	b.n	8004216 <__libc_init_array+0x1e>
 8004230:	08007e40 	.word	0x08007e40
 8004234:	08007e40 	.word	0x08007e40
 8004238:	08007e40 	.word	0x08007e40
 800423c:	08007e44 	.word	0x08007e44

08004240 <__retarget_lock_init_recursive>:
 8004240:	4770      	bx	lr

08004242 <__retarget_lock_acquire_recursive>:
 8004242:	4770      	bx	lr

08004244 <__retarget_lock_release_recursive>:
 8004244:	4770      	bx	lr
	...

08004248 <nanf>:
 8004248:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004250 <nanf+0x8>
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	7fc00000 	.word	0x7fc00000

08004254 <quorem>:
 8004254:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004258:	6903      	ldr	r3, [r0, #16]
 800425a:	690c      	ldr	r4, [r1, #16]
 800425c:	42a3      	cmp	r3, r4
 800425e:	4607      	mov	r7, r0
 8004260:	db7e      	blt.n	8004360 <quorem+0x10c>
 8004262:	3c01      	subs	r4, #1
 8004264:	f101 0814 	add.w	r8, r1, #20
 8004268:	f100 0514 	add.w	r5, r0, #20
 800426c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004270:	9301      	str	r3, [sp, #4]
 8004272:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004276:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800427a:	3301      	adds	r3, #1
 800427c:	429a      	cmp	r2, r3
 800427e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004282:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004286:	fbb2 f6f3 	udiv	r6, r2, r3
 800428a:	d331      	bcc.n	80042f0 <quorem+0x9c>
 800428c:	f04f 0e00 	mov.w	lr, #0
 8004290:	4640      	mov	r0, r8
 8004292:	46ac      	mov	ip, r5
 8004294:	46f2      	mov	sl, lr
 8004296:	f850 2b04 	ldr.w	r2, [r0], #4
 800429a:	b293      	uxth	r3, r2
 800429c:	fb06 e303 	mla	r3, r6, r3, lr
 80042a0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80042a4:	0c1a      	lsrs	r2, r3, #16
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	ebaa 0303 	sub.w	r3, sl, r3
 80042ac:	f8dc a000 	ldr.w	sl, [ip]
 80042b0:	fa13 f38a 	uxtah	r3, r3, sl
 80042b4:	fb06 220e 	mla	r2, r6, lr, r2
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	9b00      	ldr	r3, [sp, #0]
 80042bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80042c0:	b292      	uxth	r2, r2
 80042c2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80042c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80042ca:	f8bd 3000 	ldrh.w	r3, [sp]
 80042ce:	4581      	cmp	r9, r0
 80042d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80042d4:	f84c 3b04 	str.w	r3, [ip], #4
 80042d8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80042dc:	d2db      	bcs.n	8004296 <quorem+0x42>
 80042de:	f855 300b 	ldr.w	r3, [r5, fp]
 80042e2:	b92b      	cbnz	r3, 80042f0 <quorem+0x9c>
 80042e4:	9b01      	ldr	r3, [sp, #4]
 80042e6:	3b04      	subs	r3, #4
 80042e8:	429d      	cmp	r5, r3
 80042ea:	461a      	mov	r2, r3
 80042ec:	d32c      	bcc.n	8004348 <quorem+0xf4>
 80042ee:	613c      	str	r4, [r7, #16]
 80042f0:	4638      	mov	r0, r7
 80042f2:	f001 f9f1 	bl	80056d8 <__mcmp>
 80042f6:	2800      	cmp	r0, #0
 80042f8:	db22      	blt.n	8004340 <quorem+0xec>
 80042fa:	3601      	adds	r6, #1
 80042fc:	4629      	mov	r1, r5
 80042fe:	2000      	movs	r0, #0
 8004300:	f858 2b04 	ldr.w	r2, [r8], #4
 8004304:	f8d1 c000 	ldr.w	ip, [r1]
 8004308:	b293      	uxth	r3, r2
 800430a:	1ac3      	subs	r3, r0, r3
 800430c:	0c12      	lsrs	r2, r2, #16
 800430e:	fa13 f38c 	uxtah	r3, r3, ip
 8004312:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004316:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800431a:	b29b      	uxth	r3, r3
 800431c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004320:	45c1      	cmp	r9, r8
 8004322:	f841 3b04 	str.w	r3, [r1], #4
 8004326:	ea4f 4022 	mov.w	r0, r2, asr #16
 800432a:	d2e9      	bcs.n	8004300 <quorem+0xac>
 800432c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004330:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004334:	b922      	cbnz	r2, 8004340 <quorem+0xec>
 8004336:	3b04      	subs	r3, #4
 8004338:	429d      	cmp	r5, r3
 800433a:	461a      	mov	r2, r3
 800433c:	d30a      	bcc.n	8004354 <quorem+0x100>
 800433e:	613c      	str	r4, [r7, #16]
 8004340:	4630      	mov	r0, r6
 8004342:	b003      	add	sp, #12
 8004344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004348:	6812      	ldr	r2, [r2, #0]
 800434a:	3b04      	subs	r3, #4
 800434c:	2a00      	cmp	r2, #0
 800434e:	d1ce      	bne.n	80042ee <quorem+0x9a>
 8004350:	3c01      	subs	r4, #1
 8004352:	e7c9      	b.n	80042e8 <quorem+0x94>
 8004354:	6812      	ldr	r2, [r2, #0]
 8004356:	3b04      	subs	r3, #4
 8004358:	2a00      	cmp	r2, #0
 800435a:	d1f0      	bne.n	800433e <quorem+0xea>
 800435c:	3c01      	subs	r4, #1
 800435e:	e7eb      	b.n	8004338 <quorem+0xe4>
 8004360:	2000      	movs	r0, #0
 8004362:	e7ee      	b.n	8004342 <quorem+0xee>
 8004364:	0000      	movs	r0, r0
	...

08004368 <_dtoa_r>:
 8004368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800436c:	ed2d 8b04 	vpush	{d8-d9}
 8004370:	69c5      	ldr	r5, [r0, #28]
 8004372:	b093      	sub	sp, #76	; 0x4c
 8004374:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004378:	ec57 6b10 	vmov	r6, r7, d0
 800437c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004380:	9107      	str	r1, [sp, #28]
 8004382:	4604      	mov	r4, r0
 8004384:	920a      	str	r2, [sp, #40]	; 0x28
 8004386:	930d      	str	r3, [sp, #52]	; 0x34
 8004388:	b975      	cbnz	r5, 80043a8 <_dtoa_r+0x40>
 800438a:	2010      	movs	r0, #16
 800438c:	f000 fe2a 	bl	8004fe4 <malloc>
 8004390:	4602      	mov	r2, r0
 8004392:	61e0      	str	r0, [r4, #28]
 8004394:	b920      	cbnz	r0, 80043a0 <_dtoa_r+0x38>
 8004396:	4bae      	ldr	r3, [pc, #696]	; (8004650 <_dtoa_r+0x2e8>)
 8004398:	21ef      	movs	r1, #239	; 0xef
 800439a:	48ae      	ldr	r0, [pc, #696]	; (8004654 <_dtoa_r+0x2ec>)
 800439c:	f002 fc74 	bl	8006c88 <__assert_func>
 80043a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80043a4:	6005      	str	r5, [r0, #0]
 80043a6:	60c5      	str	r5, [r0, #12]
 80043a8:	69e3      	ldr	r3, [r4, #28]
 80043aa:	6819      	ldr	r1, [r3, #0]
 80043ac:	b151      	cbz	r1, 80043c4 <_dtoa_r+0x5c>
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	604a      	str	r2, [r1, #4]
 80043b2:	2301      	movs	r3, #1
 80043b4:	4093      	lsls	r3, r2
 80043b6:	608b      	str	r3, [r1, #8]
 80043b8:	4620      	mov	r0, r4
 80043ba:	f000 ff07 	bl	80051cc <_Bfree>
 80043be:	69e3      	ldr	r3, [r4, #28]
 80043c0:	2200      	movs	r2, #0
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	1e3b      	subs	r3, r7, #0
 80043c6:	bfbb      	ittet	lt
 80043c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80043cc:	9303      	strlt	r3, [sp, #12]
 80043ce:	2300      	movge	r3, #0
 80043d0:	2201      	movlt	r2, #1
 80043d2:	bfac      	ite	ge
 80043d4:	f8c8 3000 	strge.w	r3, [r8]
 80043d8:	f8c8 2000 	strlt.w	r2, [r8]
 80043dc:	4b9e      	ldr	r3, [pc, #632]	; (8004658 <_dtoa_r+0x2f0>)
 80043de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80043e2:	ea33 0308 	bics.w	r3, r3, r8
 80043e6:	d11b      	bne.n	8004420 <_dtoa_r+0xb8>
 80043e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80043ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80043f4:	4333      	orrs	r3, r6
 80043f6:	f000 8593 	beq.w	8004f20 <_dtoa_r+0xbb8>
 80043fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80043fc:	b963      	cbnz	r3, 8004418 <_dtoa_r+0xb0>
 80043fe:	4b97      	ldr	r3, [pc, #604]	; (800465c <_dtoa_r+0x2f4>)
 8004400:	e027      	b.n	8004452 <_dtoa_r+0xea>
 8004402:	4b97      	ldr	r3, [pc, #604]	; (8004660 <_dtoa_r+0x2f8>)
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	3308      	adds	r3, #8
 8004408:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800440a:	6013      	str	r3, [r2, #0]
 800440c:	9800      	ldr	r0, [sp, #0]
 800440e:	b013      	add	sp, #76	; 0x4c
 8004410:	ecbd 8b04 	vpop	{d8-d9}
 8004414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004418:	4b90      	ldr	r3, [pc, #576]	; (800465c <_dtoa_r+0x2f4>)
 800441a:	9300      	str	r3, [sp, #0]
 800441c:	3303      	adds	r3, #3
 800441e:	e7f3      	b.n	8004408 <_dtoa_r+0xa0>
 8004420:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004424:	2200      	movs	r2, #0
 8004426:	ec51 0b17 	vmov	r0, r1, d7
 800442a:	eeb0 8a47 	vmov.f32	s16, s14
 800442e:	eef0 8a67 	vmov.f32	s17, s15
 8004432:	2300      	movs	r3, #0
 8004434:	f7fc fb48 	bl	8000ac8 <__aeabi_dcmpeq>
 8004438:	4681      	mov	r9, r0
 800443a:	b160      	cbz	r0, 8004456 <_dtoa_r+0xee>
 800443c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800443e:	2301      	movs	r3, #1
 8004440:	6013      	str	r3, [r2, #0]
 8004442:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 8568 	beq.w	8004f1a <_dtoa_r+0xbb2>
 800444a:	4b86      	ldr	r3, [pc, #536]	; (8004664 <_dtoa_r+0x2fc>)
 800444c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800444e:	6013      	str	r3, [r2, #0]
 8004450:	3b01      	subs	r3, #1
 8004452:	9300      	str	r3, [sp, #0]
 8004454:	e7da      	b.n	800440c <_dtoa_r+0xa4>
 8004456:	aa10      	add	r2, sp, #64	; 0x40
 8004458:	a911      	add	r1, sp, #68	; 0x44
 800445a:	4620      	mov	r0, r4
 800445c:	eeb0 0a48 	vmov.f32	s0, s16
 8004460:	eef0 0a68 	vmov.f32	s1, s17
 8004464:	f001 fa4e 	bl	8005904 <__d2b>
 8004468:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800446c:	4682      	mov	sl, r0
 800446e:	2d00      	cmp	r5, #0
 8004470:	d07f      	beq.n	8004572 <_dtoa_r+0x20a>
 8004472:	ee18 3a90 	vmov	r3, s17
 8004476:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800447a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800447e:	ec51 0b18 	vmov	r0, r1, d8
 8004482:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004486:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800448a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800448e:	4619      	mov	r1, r3
 8004490:	2200      	movs	r2, #0
 8004492:	4b75      	ldr	r3, [pc, #468]	; (8004668 <_dtoa_r+0x300>)
 8004494:	f7fb fef8 	bl	8000288 <__aeabi_dsub>
 8004498:	a367      	add	r3, pc, #412	; (adr r3, 8004638 <_dtoa_r+0x2d0>)
 800449a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449e:	f7fc f8ab 	bl	80005f8 <__aeabi_dmul>
 80044a2:	a367      	add	r3, pc, #412	; (adr r3, 8004640 <_dtoa_r+0x2d8>)
 80044a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a8:	f7fb fef0 	bl	800028c <__adddf3>
 80044ac:	4606      	mov	r6, r0
 80044ae:	4628      	mov	r0, r5
 80044b0:	460f      	mov	r7, r1
 80044b2:	f7fc f837 	bl	8000524 <__aeabi_i2d>
 80044b6:	a364      	add	r3, pc, #400	; (adr r3, 8004648 <_dtoa_r+0x2e0>)
 80044b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044bc:	f7fc f89c 	bl	80005f8 <__aeabi_dmul>
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	4630      	mov	r0, r6
 80044c6:	4639      	mov	r1, r7
 80044c8:	f7fb fee0 	bl	800028c <__adddf3>
 80044cc:	4606      	mov	r6, r0
 80044ce:	460f      	mov	r7, r1
 80044d0:	f7fc fb42 	bl	8000b58 <__aeabi_d2iz>
 80044d4:	2200      	movs	r2, #0
 80044d6:	4683      	mov	fp, r0
 80044d8:	2300      	movs	r3, #0
 80044da:	4630      	mov	r0, r6
 80044dc:	4639      	mov	r1, r7
 80044de:	f7fc fafd 	bl	8000adc <__aeabi_dcmplt>
 80044e2:	b148      	cbz	r0, 80044f8 <_dtoa_r+0x190>
 80044e4:	4658      	mov	r0, fp
 80044e6:	f7fc f81d 	bl	8000524 <__aeabi_i2d>
 80044ea:	4632      	mov	r2, r6
 80044ec:	463b      	mov	r3, r7
 80044ee:	f7fc faeb 	bl	8000ac8 <__aeabi_dcmpeq>
 80044f2:	b908      	cbnz	r0, 80044f8 <_dtoa_r+0x190>
 80044f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80044f8:	f1bb 0f16 	cmp.w	fp, #22
 80044fc:	d857      	bhi.n	80045ae <_dtoa_r+0x246>
 80044fe:	4b5b      	ldr	r3, [pc, #364]	; (800466c <_dtoa_r+0x304>)
 8004500:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004508:	ec51 0b18 	vmov	r0, r1, d8
 800450c:	f7fc fae6 	bl	8000adc <__aeabi_dcmplt>
 8004510:	2800      	cmp	r0, #0
 8004512:	d04e      	beq.n	80045b2 <_dtoa_r+0x24a>
 8004514:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004518:	2300      	movs	r3, #0
 800451a:	930c      	str	r3, [sp, #48]	; 0x30
 800451c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800451e:	1b5b      	subs	r3, r3, r5
 8004520:	1e5a      	subs	r2, r3, #1
 8004522:	bf45      	ittet	mi
 8004524:	f1c3 0301 	rsbmi	r3, r3, #1
 8004528:	9305      	strmi	r3, [sp, #20]
 800452a:	2300      	movpl	r3, #0
 800452c:	2300      	movmi	r3, #0
 800452e:	9206      	str	r2, [sp, #24]
 8004530:	bf54      	ite	pl
 8004532:	9305      	strpl	r3, [sp, #20]
 8004534:	9306      	strmi	r3, [sp, #24]
 8004536:	f1bb 0f00 	cmp.w	fp, #0
 800453a:	db3c      	blt.n	80045b6 <_dtoa_r+0x24e>
 800453c:	9b06      	ldr	r3, [sp, #24]
 800453e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004542:	445b      	add	r3, fp
 8004544:	9306      	str	r3, [sp, #24]
 8004546:	2300      	movs	r3, #0
 8004548:	9308      	str	r3, [sp, #32]
 800454a:	9b07      	ldr	r3, [sp, #28]
 800454c:	2b09      	cmp	r3, #9
 800454e:	d868      	bhi.n	8004622 <_dtoa_r+0x2ba>
 8004550:	2b05      	cmp	r3, #5
 8004552:	bfc4      	itt	gt
 8004554:	3b04      	subgt	r3, #4
 8004556:	9307      	strgt	r3, [sp, #28]
 8004558:	9b07      	ldr	r3, [sp, #28]
 800455a:	f1a3 0302 	sub.w	r3, r3, #2
 800455e:	bfcc      	ite	gt
 8004560:	2500      	movgt	r5, #0
 8004562:	2501      	movle	r5, #1
 8004564:	2b03      	cmp	r3, #3
 8004566:	f200 8085 	bhi.w	8004674 <_dtoa_r+0x30c>
 800456a:	e8df f003 	tbb	[pc, r3]
 800456e:	3b2e      	.short	0x3b2e
 8004570:	5839      	.short	0x5839
 8004572:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004576:	441d      	add	r5, r3
 8004578:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800457c:	2b20      	cmp	r3, #32
 800457e:	bfc1      	itttt	gt
 8004580:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004584:	fa08 f803 	lslgt.w	r8, r8, r3
 8004588:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800458c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004590:	bfd6      	itet	le
 8004592:	f1c3 0320 	rsble	r3, r3, #32
 8004596:	ea48 0003 	orrgt.w	r0, r8, r3
 800459a:	fa06 f003 	lslle.w	r0, r6, r3
 800459e:	f7fb ffb1 	bl	8000504 <__aeabi_ui2d>
 80045a2:	2201      	movs	r2, #1
 80045a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80045a8:	3d01      	subs	r5, #1
 80045aa:	920e      	str	r2, [sp, #56]	; 0x38
 80045ac:	e76f      	b.n	800448e <_dtoa_r+0x126>
 80045ae:	2301      	movs	r3, #1
 80045b0:	e7b3      	b.n	800451a <_dtoa_r+0x1b2>
 80045b2:	900c      	str	r0, [sp, #48]	; 0x30
 80045b4:	e7b2      	b.n	800451c <_dtoa_r+0x1b4>
 80045b6:	9b05      	ldr	r3, [sp, #20]
 80045b8:	eba3 030b 	sub.w	r3, r3, fp
 80045bc:	9305      	str	r3, [sp, #20]
 80045be:	f1cb 0300 	rsb	r3, fp, #0
 80045c2:	9308      	str	r3, [sp, #32]
 80045c4:	2300      	movs	r3, #0
 80045c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80045c8:	e7bf      	b.n	800454a <_dtoa_r+0x1e2>
 80045ca:	2300      	movs	r3, #0
 80045cc:	9309      	str	r3, [sp, #36]	; 0x24
 80045ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	dc52      	bgt.n	800467a <_dtoa_r+0x312>
 80045d4:	2301      	movs	r3, #1
 80045d6:	9301      	str	r3, [sp, #4]
 80045d8:	9304      	str	r3, [sp, #16]
 80045da:	461a      	mov	r2, r3
 80045dc:	920a      	str	r2, [sp, #40]	; 0x28
 80045de:	e00b      	b.n	80045f8 <_dtoa_r+0x290>
 80045e0:	2301      	movs	r3, #1
 80045e2:	e7f3      	b.n	80045cc <_dtoa_r+0x264>
 80045e4:	2300      	movs	r3, #0
 80045e6:	9309      	str	r3, [sp, #36]	; 0x24
 80045e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045ea:	445b      	add	r3, fp
 80045ec:	9301      	str	r3, [sp, #4]
 80045ee:	3301      	adds	r3, #1
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	9304      	str	r3, [sp, #16]
 80045f4:	bfb8      	it	lt
 80045f6:	2301      	movlt	r3, #1
 80045f8:	69e0      	ldr	r0, [r4, #28]
 80045fa:	2100      	movs	r1, #0
 80045fc:	2204      	movs	r2, #4
 80045fe:	f102 0614 	add.w	r6, r2, #20
 8004602:	429e      	cmp	r6, r3
 8004604:	d93d      	bls.n	8004682 <_dtoa_r+0x31a>
 8004606:	6041      	str	r1, [r0, #4]
 8004608:	4620      	mov	r0, r4
 800460a:	f000 fd9f 	bl	800514c <_Balloc>
 800460e:	9000      	str	r0, [sp, #0]
 8004610:	2800      	cmp	r0, #0
 8004612:	d139      	bne.n	8004688 <_dtoa_r+0x320>
 8004614:	4b16      	ldr	r3, [pc, #88]	; (8004670 <_dtoa_r+0x308>)
 8004616:	4602      	mov	r2, r0
 8004618:	f240 11af 	movw	r1, #431	; 0x1af
 800461c:	e6bd      	b.n	800439a <_dtoa_r+0x32>
 800461e:	2301      	movs	r3, #1
 8004620:	e7e1      	b.n	80045e6 <_dtoa_r+0x27e>
 8004622:	2501      	movs	r5, #1
 8004624:	2300      	movs	r3, #0
 8004626:	9307      	str	r3, [sp, #28]
 8004628:	9509      	str	r5, [sp, #36]	; 0x24
 800462a:	f04f 33ff 	mov.w	r3, #4294967295
 800462e:	9301      	str	r3, [sp, #4]
 8004630:	9304      	str	r3, [sp, #16]
 8004632:	2200      	movs	r2, #0
 8004634:	2312      	movs	r3, #18
 8004636:	e7d1      	b.n	80045dc <_dtoa_r+0x274>
 8004638:	636f4361 	.word	0x636f4361
 800463c:	3fd287a7 	.word	0x3fd287a7
 8004640:	8b60c8b3 	.word	0x8b60c8b3
 8004644:	3fc68a28 	.word	0x3fc68a28
 8004648:	509f79fb 	.word	0x509f79fb
 800464c:	3fd34413 	.word	0x3fd34413
 8004650:	08007a5d 	.word	0x08007a5d
 8004654:	08007a74 	.word	0x08007a74
 8004658:	7ff00000 	.word	0x7ff00000
 800465c:	08007a59 	.word	0x08007a59
 8004660:	08007a50 	.word	0x08007a50
 8004664:	08007a28 	.word	0x08007a28
 8004668:	3ff80000 	.word	0x3ff80000
 800466c:	08007b60 	.word	0x08007b60
 8004670:	08007acc 	.word	0x08007acc
 8004674:	2301      	movs	r3, #1
 8004676:	9309      	str	r3, [sp, #36]	; 0x24
 8004678:	e7d7      	b.n	800462a <_dtoa_r+0x2c2>
 800467a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800467c:	9301      	str	r3, [sp, #4]
 800467e:	9304      	str	r3, [sp, #16]
 8004680:	e7ba      	b.n	80045f8 <_dtoa_r+0x290>
 8004682:	3101      	adds	r1, #1
 8004684:	0052      	lsls	r2, r2, #1
 8004686:	e7ba      	b.n	80045fe <_dtoa_r+0x296>
 8004688:	69e3      	ldr	r3, [r4, #28]
 800468a:	9a00      	ldr	r2, [sp, #0]
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	9b04      	ldr	r3, [sp, #16]
 8004690:	2b0e      	cmp	r3, #14
 8004692:	f200 80a8 	bhi.w	80047e6 <_dtoa_r+0x47e>
 8004696:	2d00      	cmp	r5, #0
 8004698:	f000 80a5 	beq.w	80047e6 <_dtoa_r+0x47e>
 800469c:	f1bb 0f00 	cmp.w	fp, #0
 80046a0:	dd38      	ble.n	8004714 <_dtoa_r+0x3ac>
 80046a2:	4bc0      	ldr	r3, [pc, #768]	; (80049a4 <_dtoa_r+0x63c>)
 80046a4:	f00b 020f 	and.w	r2, fp, #15
 80046a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80046ac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80046b0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80046b4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80046b8:	d019      	beq.n	80046ee <_dtoa_r+0x386>
 80046ba:	4bbb      	ldr	r3, [pc, #748]	; (80049a8 <_dtoa_r+0x640>)
 80046bc:	ec51 0b18 	vmov	r0, r1, d8
 80046c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80046c4:	f7fc f8c2 	bl	800084c <__aeabi_ddiv>
 80046c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046cc:	f008 080f 	and.w	r8, r8, #15
 80046d0:	2503      	movs	r5, #3
 80046d2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80049a8 <_dtoa_r+0x640>
 80046d6:	f1b8 0f00 	cmp.w	r8, #0
 80046da:	d10a      	bne.n	80046f2 <_dtoa_r+0x38a>
 80046dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046e0:	4632      	mov	r2, r6
 80046e2:	463b      	mov	r3, r7
 80046e4:	f7fc f8b2 	bl	800084c <__aeabi_ddiv>
 80046e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046ec:	e02b      	b.n	8004746 <_dtoa_r+0x3de>
 80046ee:	2502      	movs	r5, #2
 80046f0:	e7ef      	b.n	80046d2 <_dtoa_r+0x36a>
 80046f2:	f018 0f01 	tst.w	r8, #1
 80046f6:	d008      	beq.n	800470a <_dtoa_r+0x3a2>
 80046f8:	4630      	mov	r0, r6
 80046fa:	4639      	mov	r1, r7
 80046fc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004700:	f7fb ff7a 	bl	80005f8 <__aeabi_dmul>
 8004704:	3501      	adds	r5, #1
 8004706:	4606      	mov	r6, r0
 8004708:	460f      	mov	r7, r1
 800470a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800470e:	f109 0908 	add.w	r9, r9, #8
 8004712:	e7e0      	b.n	80046d6 <_dtoa_r+0x36e>
 8004714:	f000 809f 	beq.w	8004856 <_dtoa_r+0x4ee>
 8004718:	f1cb 0600 	rsb	r6, fp, #0
 800471c:	4ba1      	ldr	r3, [pc, #644]	; (80049a4 <_dtoa_r+0x63c>)
 800471e:	4fa2      	ldr	r7, [pc, #648]	; (80049a8 <_dtoa_r+0x640>)
 8004720:	f006 020f 	and.w	r2, r6, #15
 8004724:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472c:	ec51 0b18 	vmov	r0, r1, d8
 8004730:	f7fb ff62 	bl	80005f8 <__aeabi_dmul>
 8004734:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004738:	1136      	asrs	r6, r6, #4
 800473a:	2300      	movs	r3, #0
 800473c:	2502      	movs	r5, #2
 800473e:	2e00      	cmp	r6, #0
 8004740:	d17e      	bne.n	8004840 <_dtoa_r+0x4d8>
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1d0      	bne.n	80046e8 <_dtoa_r+0x380>
 8004746:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004748:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 8084 	beq.w	800485a <_dtoa_r+0x4f2>
 8004752:	4b96      	ldr	r3, [pc, #600]	; (80049ac <_dtoa_r+0x644>)
 8004754:	2200      	movs	r2, #0
 8004756:	4640      	mov	r0, r8
 8004758:	4649      	mov	r1, r9
 800475a:	f7fc f9bf 	bl	8000adc <__aeabi_dcmplt>
 800475e:	2800      	cmp	r0, #0
 8004760:	d07b      	beq.n	800485a <_dtoa_r+0x4f2>
 8004762:	9b04      	ldr	r3, [sp, #16]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d078      	beq.n	800485a <_dtoa_r+0x4f2>
 8004768:	9b01      	ldr	r3, [sp, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	dd39      	ble.n	80047e2 <_dtoa_r+0x47a>
 800476e:	4b90      	ldr	r3, [pc, #576]	; (80049b0 <_dtoa_r+0x648>)
 8004770:	2200      	movs	r2, #0
 8004772:	4640      	mov	r0, r8
 8004774:	4649      	mov	r1, r9
 8004776:	f7fb ff3f 	bl	80005f8 <__aeabi_dmul>
 800477a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800477e:	9e01      	ldr	r6, [sp, #4]
 8004780:	f10b 37ff 	add.w	r7, fp, #4294967295
 8004784:	3501      	adds	r5, #1
 8004786:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800478a:	4628      	mov	r0, r5
 800478c:	f7fb feca 	bl	8000524 <__aeabi_i2d>
 8004790:	4642      	mov	r2, r8
 8004792:	464b      	mov	r3, r9
 8004794:	f7fb ff30 	bl	80005f8 <__aeabi_dmul>
 8004798:	4b86      	ldr	r3, [pc, #536]	; (80049b4 <_dtoa_r+0x64c>)
 800479a:	2200      	movs	r2, #0
 800479c:	f7fb fd76 	bl	800028c <__adddf3>
 80047a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80047a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047a8:	9303      	str	r3, [sp, #12]
 80047aa:	2e00      	cmp	r6, #0
 80047ac:	d158      	bne.n	8004860 <_dtoa_r+0x4f8>
 80047ae:	4b82      	ldr	r3, [pc, #520]	; (80049b8 <_dtoa_r+0x650>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	4640      	mov	r0, r8
 80047b4:	4649      	mov	r1, r9
 80047b6:	f7fb fd67 	bl	8000288 <__aeabi_dsub>
 80047ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80047be:	4680      	mov	r8, r0
 80047c0:	4689      	mov	r9, r1
 80047c2:	f7fc f9a9 	bl	8000b18 <__aeabi_dcmpgt>
 80047c6:	2800      	cmp	r0, #0
 80047c8:	f040 8296 	bne.w	8004cf8 <_dtoa_r+0x990>
 80047cc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80047d0:	4640      	mov	r0, r8
 80047d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80047d6:	4649      	mov	r1, r9
 80047d8:	f7fc f980 	bl	8000adc <__aeabi_dcmplt>
 80047dc:	2800      	cmp	r0, #0
 80047de:	f040 8289 	bne.w	8004cf4 <_dtoa_r+0x98c>
 80047e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80047e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f2c0 814e 	blt.w	8004a8a <_dtoa_r+0x722>
 80047ee:	f1bb 0f0e 	cmp.w	fp, #14
 80047f2:	f300 814a 	bgt.w	8004a8a <_dtoa_r+0x722>
 80047f6:	4b6b      	ldr	r3, [pc, #428]	; (80049a4 <_dtoa_r+0x63c>)
 80047f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80047fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004802:	2b00      	cmp	r3, #0
 8004804:	f280 80dc 	bge.w	80049c0 <_dtoa_r+0x658>
 8004808:	9b04      	ldr	r3, [sp, #16]
 800480a:	2b00      	cmp	r3, #0
 800480c:	f300 80d8 	bgt.w	80049c0 <_dtoa_r+0x658>
 8004810:	f040 826f 	bne.w	8004cf2 <_dtoa_r+0x98a>
 8004814:	4b68      	ldr	r3, [pc, #416]	; (80049b8 <_dtoa_r+0x650>)
 8004816:	2200      	movs	r2, #0
 8004818:	4640      	mov	r0, r8
 800481a:	4649      	mov	r1, r9
 800481c:	f7fb feec 	bl	80005f8 <__aeabi_dmul>
 8004820:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004824:	f7fc f96e 	bl	8000b04 <__aeabi_dcmpge>
 8004828:	9e04      	ldr	r6, [sp, #16]
 800482a:	4637      	mov	r7, r6
 800482c:	2800      	cmp	r0, #0
 800482e:	f040 8245 	bne.w	8004cbc <_dtoa_r+0x954>
 8004832:	9d00      	ldr	r5, [sp, #0]
 8004834:	2331      	movs	r3, #49	; 0x31
 8004836:	f805 3b01 	strb.w	r3, [r5], #1
 800483a:	f10b 0b01 	add.w	fp, fp, #1
 800483e:	e241      	b.n	8004cc4 <_dtoa_r+0x95c>
 8004840:	07f2      	lsls	r2, r6, #31
 8004842:	d505      	bpl.n	8004850 <_dtoa_r+0x4e8>
 8004844:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004848:	f7fb fed6 	bl	80005f8 <__aeabi_dmul>
 800484c:	3501      	adds	r5, #1
 800484e:	2301      	movs	r3, #1
 8004850:	1076      	asrs	r6, r6, #1
 8004852:	3708      	adds	r7, #8
 8004854:	e773      	b.n	800473e <_dtoa_r+0x3d6>
 8004856:	2502      	movs	r5, #2
 8004858:	e775      	b.n	8004746 <_dtoa_r+0x3de>
 800485a:	9e04      	ldr	r6, [sp, #16]
 800485c:	465f      	mov	r7, fp
 800485e:	e792      	b.n	8004786 <_dtoa_r+0x41e>
 8004860:	9900      	ldr	r1, [sp, #0]
 8004862:	4b50      	ldr	r3, [pc, #320]	; (80049a4 <_dtoa_r+0x63c>)
 8004864:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004868:	4431      	add	r1, r6
 800486a:	9102      	str	r1, [sp, #8]
 800486c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800486e:	eeb0 9a47 	vmov.f32	s18, s14
 8004872:	eef0 9a67 	vmov.f32	s19, s15
 8004876:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800487a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800487e:	2900      	cmp	r1, #0
 8004880:	d044      	beq.n	800490c <_dtoa_r+0x5a4>
 8004882:	494e      	ldr	r1, [pc, #312]	; (80049bc <_dtoa_r+0x654>)
 8004884:	2000      	movs	r0, #0
 8004886:	f7fb ffe1 	bl	800084c <__aeabi_ddiv>
 800488a:	ec53 2b19 	vmov	r2, r3, d9
 800488e:	f7fb fcfb 	bl	8000288 <__aeabi_dsub>
 8004892:	9d00      	ldr	r5, [sp, #0]
 8004894:	ec41 0b19 	vmov	d9, r0, r1
 8004898:	4649      	mov	r1, r9
 800489a:	4640      	mov	r0, r8
 800489c:	f7fc f95c 	bl	8000b58 <__aeabi_d2iz>
 80048a0:	4606      	mov	r6, r0
 80048a2:	f7fb fe3f 	bl	8000524 <__aeabi_i2d>
 80048a6:	4602      	mov	r2, r0
 80048a8:	460b      	mov	r3, r1
 80048aa:	4640      	mov	r0, r8
 80048ac:	4649      	mov	r1, r9
 80048ae:	f7fb fceb 	bl	8000288 <__aeabi_dsub>
 80048b2:	3630      	adds	r6, #48	; 0x30
 80048b4:	f805 6b01 	strb.w	r6, [r5], #1
 80048b8:	ec53 2b19 	vmov	r2, r3, d9
 80048bc:	4680      	mov	r8, r0
 80048be:	4689      	mov	r9, r1
 80048c0:	f7fc f90c 	bl	8000adc <__aeabi_dcmplt>
 80048c4:	2800      	cmp	r0, #0
 80048c6:	d164      	bne.n	8004992 <_dtoa_r+0x62a>
 80048c8:	4642      	mov	r2, r8
 80048ca:	464b      	mov	r3, r9
 80048cc:	4937      	ldr	r1, [pc, #220]	; (80049ac <_dtoa_r+0x644>)
 80048ce:	2000      	movs	r0, #0
 80048d0:	f7fb fcda 	bl	8000288 <__aeabi_dsub>
 80048d4:	ec53 2b19 	vmov	r2, r3, d9
 80048d8:	f7fc f900 	bl	8000adc <__aeabi_dcmplt>
 80048dc:	2800      	cmp	r0, #0
 80048de:	f040 80b6 	bne.w	8004a4e <_dtoa_r+0x6e6>
 80048e2:	9b02      	ldr	r3, [sp, #8]
 80048e4:	429d      	cmp	r5, r3
 80048e6:	f43f af7c 	beq.w	80047e2 <_dtoa_r+0x47a>
 80048ea:	4b31      	ldr	r3, [pc, #196]	; (80049b0 <_dtoa_r+0x648>)
 80048ec:	ec51 0b19 	vmov	r0, r1, d9
 80048f0:	2200      	movs	r2, #0
 80048f2:	f7fb fe81 	bl	80005f8 <__aeabi_dmul>
 80048f6:	4b2e      	ldr	r3, [pc, #184]	; (80049b0 <_dtoa_r+0x648>)
 80048f8:	ec41 0b19 	vmov	d9, r0, r1
 80048fc:	2200      	movs	r2, #0
 80048fe:	4640      	mov	r0, r8
 8004900:	4649      	mov	r1, r9
 8004902:	f7fb fe79 	bl	80005f8 <__aeabi_dmul>
 8004906:	4680      	mov	r8, r0
 8004908:	4689      	mov	r9, r1
 800490a:	e7c5      	b.n	8004898 <_dtoa_r+0x530>
 800490c:	ec51 0b17 	vmov	r0, r1, d7
 8004910:	f7fb fe72 	bl	80005f8 <__aeabi_dmul>
 8004914:	9b02      	ldr	r3, [sp, #8]
 8004916:	9d00      	ldr	r5, [sp, #0]
 8004918:	930f      	str	r3, [sp, #60]	; 0x3c
 800491a:	ec41 0b19 	vmov	d9, r0, r1
 800491e:	4649      	mov	r1, r9
 8004920:	4640      	mov	r0, r8
 8004922:	f7fc f919 	bl	8000b58 <__aeabi_d2iz>
 8004926:	4606      	mov	r6, r0
 8004928:	f7fb fdfc 	bl	8000524 <__aeabi_i2d>
 800492c:	3630      	adds	r6, #48	; 0x30
 800492e:	4602      	mov	r2, r0
 8004930:	460b      	mov	r3, r1
 8004932:	4640      	mov	r0, r8
 8004934:	4649      	mov	r1, r9
 8004936:	f7fb fca7 	bl	8000288 <__aeabi_dsub>
 800493a:	f805 6b01 	strb.w	r6, [r5], #1
 800493e:	9b02      	ldr	r3, [sp, #8]
 8004940:	429d      	cmp	r5, r3
 8004942:	4680      	mov	r8, r0
 8004944:	4689      	mov	r9, r1
 8004946:	f04f 0200 	mov.w	r2, #0
 800494a:	d124      	bne.n	8004996 <_dtoa_r+0x62e>
 800494c:	4b1b      	ldr	r3, [pc, #108]	; (80049bc <_dtoa_r+0x654>)
 800494e:	ec51 0b19 	vmov	r0, r1, d9
 8004952:	f7fb fc9b 	bl	800028c <__adddf3>
 8004956:	4602      	mov	r2, r0
 8004958:	460b      	mov	r3, r1
 800495a:	4640      	mov	r0, r8
 800495c:	4649      	mov	r1, r9
 800495e:	f7fc f8db 	bl	8000b18 <__aeabi_dcmpgt>
 8004962:	2800      	cmp	r0, #0
 8004964:	d173      	bne.n	8004a4e <_dtoa_r+0x6e6>
 8004966:	ec53 2b19 	vmov	r2, r3, d9
 800496a:	4914      	ldr	r1, [pc, #80]	; (80049bc <_dtoa_r+0x654>)
 800496c:	2000      	movs	r0, #0
 800496e:	f7fb fc8b 	bl	8000288 <__aeabi_dsub>
 8004972:	4602      	mov	r2, r0
 8004974:	460b      	mov	r3, r1
 8004976:	4640      	mov	r0, r8
 8004978:	4649      	mov	r1, r9
 800497a:	f7fc f8af 	bl	8000adc <__aeabi_dcmplt>
 800497e:	2800      	cmp	r0, #0
 8004980:	f43f af2f 	beq.w	80047e2 <_dtoa_r+0x47a>
 8004984:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004986:	1e6b      	subs	r3, r5, #1
 8004988:	930f      	str	r3, [sp, #60]	; 0x3c
 800498a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800498e:	2b30      	cmp	r3, #48	; 0x30
 8004990:	d0f8      	beq.n	8004984 <_dtoa_r+0x61c>
 8004992:	46bb      	mov	fp, r7
 8004994:	e04a      	b.n	8004a2c <_dtoa_r+0x6c4>
 8004996:	4b06      	ldr	r3, [pc, #24]	; (80049b0 <_dtoa_r+0x648>)
 8004998:	f7fb fe2e 	bl	80005f8 <__aeabi_dmul>
 800499c:	4680      	mov	r8, r0
 800499e:	4689      	mov	r9, r1
 80049a0:	e7bd      	b.n	800491e <_dtoa_r+0x5b6>
 80049a2:	bf00      	nop
 80049a4:	08007b60 	.word	0x08007b60
 80049a8:	08007b38 	.word	0x08007b38
 80049ac:	3ff00000 	.word	0x3ff00000
 80049b0:	40240000 	.word	0x40240000
 80049b4:	401c0000 	.word	0x401c0000
 80049b8:	40140000 	.word	0x40140000
 80049bc:	3fe00000 	.word	0x3fe00000
 80049c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80049c4:	9d00      	ldr	r5, [sp, #0]
 80049c6:	4642      	mov	r2, r8
 80049c8:	464b      	mov	r3, r9
 80049ca:	4630      	mov	r0, r6
 80049cc:	4639      	mov	r1, r7
 80049ce:	f7fb ff3d 	bl	800084c <__aeabi_ddiv>
 80049d2:	f7fc f8c1 	bl	8000b58 <__aeabi_d2iz>
 80049d6:	9001      	str	r0, [sp, #4]
 80049d8:	f7fb fda4 	bl	8000524 <__aeabi_i2d>
 80049dc:	4642      	mov	r2, r8
 80049de:	464b      	mov	r3, r9
 80049e0:	f7fb fe0a 	bl	80005f8 <__aeabi_dmul>
 80049e4:	4602      	mov	r2, r0
 80049e6:	460b      	mov	r3, r1
 80049e8:	4630      	mov	r0, r6
 80049ea:	4639      	mov	r1, r7
 80049ec:	f7fb fc4c 	bl	8000288 <__aeabi_dsub>
 80049f0:	9e01      	ldr	r6, [sp, #4]
 80049f2:	9f04      	ldr	r7, [sp, #16]
 80049f4:	3630      	adds	r6, #48	; 0x30
 80049f6:	f805 6b01 	strb.w	r6, [r5], #1
 80049fa:	9e00      	ldr	r6, [sp, #0]
 80049fc:	1bae      	subs	r6, r5, r6
 80049fe:	42b7      	cmp	r7, r6
 8004a00:	4602      	mov	r2, r0
 8004a02:	460b      	mov	r3, r1
 8004a04:	d134      	bne.n	8004a70 <_dtoa_r+0x708>
 8004a06:	f7fb fc41 	bl	800028c <__adddf3>
 8004a0a:	4642      	mov	r2, r8
 8004a0c:	464b      	mov	r3, r9
 8004a0e:	4606      	mov	r6, r0
 8004a10:	460f      	mov	r7, r1
 8004a12:	f7fc f881 	bl	8000b18 <__aeabi_dcmpgt>
 8004a16:	b9c8      	cbnz	r0, 8004a4c <_dtoa_r+0x6e4>
 8004a18:	4642      	mov	r2, r8
 8004a1a:	464b      	mov	r3, r9
 8004a1c:	4630      	mov	r0, r6
 8004a1e:	4639      	mov	r1, r7
 8004a20:	f7fc f852 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a24:	b110      	cbz	r0, 8004a2c <_dtoa_r+0x6c4>
 8004a26:	9b01      	ldr	r3, [sp, #4]
 8004a28:	07db      	lsls	r3, r3, #31
 8004a2a:	d40f      	bmi.n	8004a4c <_dtoa_r+0x6e4>
 8004a2c:	4651      	mov	r1, sl
 8004a2e:	4620      	mov	r0, r4
 8004a30:	f000 fbcc 	bl	80051cc <_Bfree>
 8004a34:	2300      	movs	r3, #0
 8004a36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004a38:	702b      	strb	r3, [r5, #0]
 8004a3a:	f10b 0301 	add.w	r3, fp, #1
 8004a3e:	6013      	str	r3, [r2, #0]
 8004a40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f43f ace2 	beq.w	800440c <_dtoa_r+0xa4>
 8004a48:	601d      	str	r5, [r3, #0]
 8004a4a:	e4df      	b.n	800440c <_dtoa_r+0xa4>
 8004a4c:	465f      	mov	r7, fp
 8004a4e:	462b      	mov	r3, r5
 8004a50:	461d      	mov	r5, r3
 8004a52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004a56:	2a39      	cmp	r2, #57	; 0x39
 8004a58:	d106      	bne.n	8004a68 <_dtoa_r+0x700>
 8004a5a:	9a00      	ldr	r2, [sp, #0]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d1f7      	bne.n	8004a50 <_dtoa_r+0x6e8>
 8004a60:	9900      	ldr	r1, [sp, #0]
 8004a62:	2230      	movs	r2, #48	; 0x30
 8004a64:	3701      	adds	r7, #1
 8004a66:	700a      	strb	r2, [r1, #0]
 8004a68:	781a      	ldrb	r2, [r3, #0]
 8004a6a:	3201      	adds	r2, #1
 8004a6c:	701a      	strb	r2, [r3, #0]
 8004a6e:	e790      	b.n	8004992 <_dtoa_r+0x62a>
 8004a70:	4ba3      	ldr	r3, [pc, #652]	; (8004d00 <_dtoa_r+0x998>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	f7fb fdc0 	bl	80005f8 <__aeabi_dmul>
 8004a78:	2200      	movs	r2, #0
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	4606      	mov	r6, r0
 8004a7e:	460f      	mov	r7, r1
 8004a80:	f7fc f822 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a84:	2800      	cmp	r0, #0
 8004a86:	d09e      	beq.n	80049c6 <_dtoa_r+0x65e>
 8004a88:	e7d0      	b.n	8004a2c <_dtoa_r+0x6c4>
 8004a8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a8c:	2a00      	cmp	r2, #0
 8004a8e:	f000 80ca 	beq.w	8004c26 <_dtoa_r+0x8be>
 8004a92:	9a07      	ldr	r2, [sp, #28]
 8004a94:	2a01      	cmp	r2, #1
 8004a96:	f300 80ad 	bgt.w	8004bf4 <_dtoa_r+0x88c>
 8004a9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a9c:	2a00      	cmp	r2, #0
 8004a9e:	f000 80a5 	beq.w	8004bec <_dtoa_r+0x884>
 8004aa2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004aa6:	9e08      	ldr	r6, [sp, #32]
 8004aa8:	9d05      	ldr	r5, [sp, #20]
 8004aaa:	9a05      	ldr	r2, [sp, #20]
 8004aac:	441a      	add	r2, r3
 8004aae:	9205      	str	r2, [sp, #20]
 8004ab0:	9a06      	ldr	r2, [sp, #24]
 8004ab2:	2101      	movs	r1, #1
 8004ab4:	441a      	add	r2, r3
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	9206      	str	r2, [sp, #24]
 8004aba:	f000 fc87 	bl	80053cc <__i2b>
 8004abe:	4607      	mov	r7, r0
 8004ac0:	b165      	cbz	r5, 8004adc <_dtoa_r+0x774>
 8004ac2:	9b06      	ldr	r3, [sp, #24]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	dd09      	ble.n	8004adc <_dtoa_r+0x774>
 8004ac8:	42ab      	cmp	r3, r5
 8004aca:	9a05      	ldr	r2, [sp, #20]
 8004acc:	bfa8      	it	ge
 8004ace:	462b      	movge	r3, r5
 8004ad0:	1ad2      	subs	r2, r2, r3
 8004ad2:	9205      	str	r2, [sp, #20]
 8004ad4:	9a06      	ldr	r2, [sp, #24]
 8004ad6:	1aed      	subs	r5, r5, r3
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	9306      	str	r3, [sp, #24]
 8004adc:	9b08      	ldr	r3, [sp, #32]
 8004ade:	b1f3      	cbz	r3, 8004b1e <_dtoa_r+0x7b6>
 8004ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f000 80a3 	beq.w	8004c2e <_dtoa_r+0x8c6>
 8004ae8:	2e00      	cmp	r6, #0
 8004aea:	dd10      	ble.n	8004b0e <_dtoa_r+0x7a6>
 8004aec:	4639      	mov	r1, r7
 8004aee:	4632      	mov	r2, r6
 8004af0:	4620      	mov	r0, r4
 8004af2:	f000 fd2b 	bl	800554c <__pow5mult>
 8004af6:	4652      	mov	r2, sl
 8004af8:	4601      	mov	r1, r0
 8004afa:	4607      	mov	r7, r0
 8004afc:	4620      	mov	r0, r4
 8004afe:	f000 fc7b 	bl	80053f8 <__multiply>
 8004b02:	4651      	mov	r1, sl
 8004b04:	4680      	mov	r8, r0
 8004b06:	4620      	mov	r0, r4
 8004b08:	f000 fb60 	bl	80051cc <_Bfree>
 8004b0c:	46c2      	mov	sl, r8
 8004b0e:	9b08      	ldr	r3, [sp, #32]
 8004b10:	1b9a      	subs	r2, r3, r6
 8004b12:	d004      	beq.n	8004b1e <_dtoa_r+0x7b6>
 8004b14:	4651      	mov	r1, sl
 8004b16:	4620      	mov	r0, r4
 8004b18:	f000 fd18 	bl	800554c <__pow5mult>
 8004b1c:	4682      	mov	sl, r0
 8004b1e:	2101      	movs	r1, #1
 8004b20:	4620      	mov	r0, r4
 8004b22:	f000 fc53 	bl	80053cc <__i2b>
 8004b26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	4606      	mov	r6, r0
 8004b2c:	f340 8081 	ble.w	8004c32 <_dtoa_r+0x8ca>
 8004b30:	461a      	mov	r2, r3
 8004b32:	4601      	mov	r1, r0
 8004b34:	4620      	mov	r0, r4
 8004b36:	f000 fd09 	bl	800554c <__pow5mult>
 8004b3a:	9b07      	ldr	r3, [sp, #28]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	4606      	mov	r6, r0
 8004b40:	dd7a      	ble.n	8004c38 <_dtoa_r+0x8d0>
 8004b42:	f04f 0800 	mov.w	r8, #0
 8004b46:	6933      	ldr	r3, [r6, #16]
 8004b48:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004b4c:	6918      	ldr	r0, [r3, #16]
 8004b4e:	f000 fbef 	bl	8005330 <__hi0bits>
 8004b52:	f1c0 0020 	rsb	r0, r0, #32
 8004b56:	9b06      	ldr	r3, [sp, #24]
 8004b58:	4418      	add	r0, r3
 8004b5a:	f010 001f 	ands.w	r0, r0, #31
 8004b5e:	f000 8094 	beq.w	8004c8a <_dtoa_r+0x922>
 8004b62:	f1c0 0320 	rsb	r3, r0, #32
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	f340 8085 	ble.w	8004c76 <_dtoa_r+0x90e>
 8004b6c:	9b05      	ldr	r3, [sp, #20]
 8004b6e:	f1c0 001c 	rsb	r0, r0, #28
 8004b72:	4403      	add	r3, r0
 8004b74:	9305      	str	r3, [sp, #20]
 8004b76:	9b06      	ldr	r3, [sp, #24]
 8004b78:	4403      	add	r3, r0
 8004b7a:	4405      	add	r5, r0
 8004b7c:	9306      	str	r3, [sp, #24]
 8004b7e:	9b05      	ldr	r3, [sp, #20]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	dd05      	ble.n	8004b90 <_dtoa_r+0x828>
 8004b84:	4651      	mov	r1, sl
 8004b86:	461a      	mov	r2, r3
 8004b88:	4620      	mov	r0, r4
 8004b8a:	f000 fd39 	bl	8005600 <__lshift>
 8004b8e:	4682      	mov	sl, r0
 8004b90:	9b06      	ldr	r3, [sp, #24]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	dd05      	ble.n	8004ba2 <_dtoa_r+0x83a>
 8004b96:	4631      	mov	r1, r6
 8004b98:	461a      	mov	r2, r3
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	f000 fd30 	bl	8005600 <__lshift>
 8004ba0:	4606      	mov	r6, r0
 8004ba2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d072      	beq.n	8004c8e <_dtoa_r+0x926>
 8004ba8:	4631      	mov	r1, r6
 8004baa:	4650      	mov	r0, sl
 8004bac:	f000 fd94 	bl	80056d8 <__mcmp>
 8004bb0:	2800      	cmp	r0, #0
 8004bb2:	da6c      	bge.n	8004c8e <_dtoa_r+0x926>
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	4651      	mov	r1, sl
 8004bb8:	220a      	movs	r2, #10
 8004bba:	4620      	mov	r0, r4
 8004bbc:	f000 fb28 	bl	8005210 <__multadd>
 8004bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004bc6:	4682      	mov	sl, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 81b0 	beq.w	8004f2e <_dtoa_r+0xbc6>
 8004bce:	2300      	movs	r3, #0
 8004bd0:	4639      	mov	r1, r7
 8004bd2:	220a      	movs	r2, #10
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	f000 fb1b 	bl	8005210 <__multadd>
 8004bda:	9b01      	ldr	r3, [sp, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	4607      	mov	r7, r0
 8004be0:	f300 8096 	bgt.w	8004d10 <_dtoa_r+0x9a8>
 8004be4:	9b07      	ldr	r3, [sp, #28]
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	dc59      	bgt.n	8004c9e <_dtoa_r+0x936>
 8004bea:	e091      	b.n	8004d10 <_dtoa_r+0x9a8>
 8004bec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004bee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004bf2:	e758      	b.n	8004aa6 <_dtoa_r+0x73e>
 8004bf4:	9b04      	ldr	r3, [sp, #16]
 8004bf6:	1e5e      	subs	r6, r3, #1
 8004bf8:	9b08      	ldr	r3, [sp, #32]
 8004bfa:	42b3      	cmp	r3, r6
 8004bfc:	bfbf      	itttt	lt
 8004bfe:	9b08      	ldrlt	r3, [sp, #32]
 8004c00:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8004c02:	9608      	strlt	r6, [sp, #32]
 8004c04:	1af3      	sublt	r3, r6, r3
 8004c06:	bfb4      	ite	lt
 8004c08:	18d2      	addlt	r2, r2, r3
 8004c0a:	1b9e      	subge	r6, r3, r6
 8004c0c:	9b04      	ldr	r3, [sp, #16]
 8004c0e:	bfbc      	itt	lt
 8004c10:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8004c12:	2600      	movlt	r6, #0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	bfb7      	itett	lt
 8004c18:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8004c1c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8004c20:	1a9d      	sublt	r5, r3, r2
 8004c22:	2300      	movlt	r3, #0
 8004c24:	e741      	b.n	8004aaa <_dtoa_r+0x742>
 8004c26:	9e08      	ldr	r6, [sp, #32]
 8004c28:	9d05      	ldr	r5, [sp, #20]
 8004c2a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004c2c:	e748      	b.n	8004ac0 <_dtoa_r+0x758>
 8004c2e:	9a08      	ldr	r2, [sp, #32]
 8004c30:	e770      	b.n	8004b14 <_dtoa_r+0x7ac>
 8004c32:	9b07      	ldr	r3, [sp, #28]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	dc19      	bgt.n	8004c6c <_dtoa_r+0x904>
 8004c38:	9b02      	ldr	r3, [sp, #8]
 8004c3a:	b9bb      	cbnz	r3, 8004c6c <_dtoa_r+0x904>
 8004c3c:	9b03      	ldr	r3, [sp, #12]
 8004c3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c42:	b99b      	cbnz	r3, 8004c6c <_dtoa_r+0x904>
 8004c44:	9b03      	ldr	r3, [sp, #12]
 8004c46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c4a:	0d1b      	lsrs	r3, r3, #20
 8004c4c:	051b      	lsls	r3, r3, #20
 8004c4e:	b183      	cbz	r3, 8004c72 <_dtoa_r+0x90a>
 8004c50:	9b05      	ldr	r3, [sp, #20]
 8004c52:	3301      	adds	r3, #1
 8004c54:	9305      	str	r3, [sp, #20]
 8004c56:	9b06      	ldr	r3, [sp, #24]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	9306      	str	r3, [sp, #24]
 8004c5c:	f04f 0801 	mov.w	r8, #1
 8004c60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f47f af6f 	bne.w	8004b46 <_dtoa_r+0x7de>
 8004c68:	2001      	movs	r0, #1
 8004c6a:	e774      	b.n	8004b56 <_dtoa_r+0x7ee>
 8004c6c:	f04f 0800 	mov.w	r8, #0
 8004c70:	e7f6      	b.n	8004c60 <_dtoa_r+0x8f8>
 8004c72:	4698      	mov	r8, r3
 8004c74:	e7f4      	b.n	8004c60 <_dtoa_r+0x8f8>
 8004c76:	d082      	beq.n	8004b7e <_dtoa_r+0x816>
 8004c78:	9a05      	ldr	r2, [sp, #20]
 8004c7a:	331c      	adds	r3, #28
 8004c7c:	441a      	add	r2, r3
 8004c7e:	9205      	str	r2, [sp, #20]
 8004c80:	9a06      	ldr	r2, [sp, #24]
 8004c82:	441a      	add	r2, r3
 8004c84:	441d      	add	r5, r3
 8004c86:	9206      	str	r2, [sp, #24]
 8004c88:	e779      	b.n	8004b7e <_dtoa_r+0x816>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	e7f4      	b.n	8004c78 <_dtoa_r+0x910>
 8004c8e:	9b04      	ldr	r3, [sp, #16]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	dc37      	bgt.n	8004d04 <_dtoa_r+0x99c>
 8004c94:	9b07      	ldr	r3, [sp, #28]
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	dd34      	ble.n	8004d04 <_dtoa_r+0x99c>
 8004c9a:	9b04      	ldr	r3, [sp, #16]
 8004c9c:	9301      	str	r3, [sp, #4]
 8004c9e:	9b01      	ldr	r3, [sp, #4]
 8004ca0:	b963      	cbnz	r3, 8004cbc <_dtoa_r+0x954>
 8004ca2:	4631      	mov	r1, r6
 8004ca4:	2205      	movs	r2, #5
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	f000 fab2 	bl	8005210 <__multadd>
 8004cac:	4601      	mov	r1, r0
 8004cae:	4606      	mov	r6, r0
 8004cb0:	4650      	mov	r0, sl
 8004cb2:	f000 fd11 	bl	80056d8 <__mcmp>
 8004cb6:	2800      	cmp	r0, #0
 8004cb8:	f73f adbb 	bgt.w	8004832 <_dtoa_r+0x4ca>
 8004cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cbe:	9d00      	ldr	r5, [sp, #0]
 8004cc0:	ea6f 0b03 	mvn.w	fp, r3
 8004cc4:	f04f 0800 	mov.w	r8, #0
 8004cc8:	4631      	mov	r1, r6
 8004cca:	4620      	mov	r0, r4
 8004ccc:	f000 fa7e 	bl	80051cc <_Bfree>
 8004cd0:	2f00      	cmp	r7, #0
 8004cd2:	f43f aeab 	beq.w	8004a2c <_dtoa_r+0x6c4>
 8004cd6:	f1b8 0f00 	cmp.w	r8, #0
 8004cda:	d005      	beq.n	8004ce8 <_dtoa_r+0x980>
 8004cdc:	45b8      	cmp	r8, r7
 8004cde:	d003      	beq.n	8004ce8 <_dtoa_r+0x980>
 8004ce0:	4641      	mov	r1, r8
 8004ce2:	4620      	mov	r0, r4
 8004ce4:	f000 fa72 	bl	80051cc <_Bfree>
 8004ce8:	4639      	mov	r1, r7
 8004cea:	4620      	mov	r0, r4
 8004cec:	f000 fa6e 	bl	80051cc <_Bfree>
 8004cf0:	e69c      	b.n	8004a2c <_dtoa_r+0x6c4>
 8004cf2:	2600      	movs	r6, #0
 8004cf4:	4637      	mov	r7, r6
 8004cf6:	e7e1      	b.n	8004cbc <_dtoa_r+0x954>
 8004cf8:	46bb      	mov	fp, r7
 8004cfa:	4637      	mov	r7, r6
 8004cfc:	e599      	b.n	8004832 <_dtoa_r+0x4ca>
 8004cfe:	bf00      	nop
 8004d00:	40240000 	.word	0x40240000
 8004d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 80c8 	beq.w	8004e9c <_dtoa_r+0xb34>
 8004d0c:	9b04      	ldr	r3, [sp, #16]
 8004d0e:	9301      	str	r3, [sp, #4]
 8004d10:	2d00      	cmp	r5, #0
 8004d12:	dd05      	ble.n	8004d20 <_dtoa_r+0x9b8>
 8004d14:	4639      	mov	r1, r7
 8004d16:	462a      	mov	r2, r5
 8004d18:	4620      	mov	r0, r4
 8004d1a:	f000 fc71 	bl	8005600 <__lshift>
 8004d1e:	4607      	mov	r7, r0
 8004d20:	f1b8 0f00 	cmp.w	r8, #0
 8004d24:	d05b      	beq.n	8004dde <_dtoa_r+0xa76>
 8004d26:	6879      	ldr	r1, [r7, #4]
 8004d28:	4620      	mov	r0, r4
 8004d2a:	f000 fa0f 	bl	800514c <_Balloc>
 8004d2e:	4605      	mov	r5, r0
 8004d30:	b928      	cbnz	r0, 8004d3e <_dtoa_r+0x9d6>
 8004d32:	4b83      	ldr	r3, [pc, #524]	; (8004f40 <_dtoa_r+0xbd8>)
 8004d34:	4602      	mov	r2, r0
 8004d36:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004d3a:	f7ff bb2e 	b.w	800439a <_dtoa_r+0x32>
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	3202      	adds	r2, #2
 8004d42:	0092      	lsls	r2, r2, #2
 8004d44:	f107 010c 	add.w	r1, r7, #12
 8004d48:	300c      	adds	r0, #12
 8004d4a:	f001 ff85 	bl	8006c58 <memcpy>
 8004d4e:	2201      	movs	r2, #1
 8004d50:	4629      	mov	r1, r5
 8004d52:	4620      	mov	r0, r4
 8004d54:	f000 fc54 	bl	8005600 <__lshift>
 8004d58:	9b00      	ldr	r3, [sp, #0]
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	9304      	str	r3, [sp, #16]
 8004d5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d62:	4413      	add	r3, r2
 8004d64:	9308      	str	r3, [sp, #32]
 8004d66:	9b02      	ldr	r3, [sp, #8]
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	46b8      	mov	r8, r7
 8004d6e:	9306      	str	r3, [sp, #24]
 8004d70:	4607      	mov	r7, r0
 8004d72:	9b04      	ldr	r3, [sp, #16]
 8004d74:	4631      	mov	r1, r6
 8004d76:	3b01      	subs	r3, #1
 8004d78:	4650      	mov	r0, sl
 8004d7a:	9301      	str	r3, [sp, #4]
 8004d7c:	f7ff fa6a 	bl	8004254 <quorem>
 8004d80:	4641      	mov	r1, r8
 8004d82:	9002      	str	r0, [sp, #8]
 8004d84:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004d88:	4650      	mov	r0, sl
 8004d8a:	f000 fca5 	bl	80056d8 <__mcmp>
 8004d8e:	463a      	mov	r2, r7
 8004d90:	9005      	str	r0, [sp, #20]
 8004d92:	4631      	mov	r1, r6
 8004d94:	4620      	mov	r0, r4
 8004d96:	f000 fcbb 	bl	8005710 <__mdiff>
 8004d9a:	68c2      	ldr	r2, [r0, #12]
 8004d9c:	4605      	mov	r5, r0
 8004d9e:	bb02      	cbnz	r2, 8004de2 <_dtoa_r+0xa7a>
 8004da0:	4601      	mov	r1, r0
 8004da2:	4650      	mov	r0, sl
 8004da4:	f000 fc98 	bl	80056d8 <__mcmp>
 8004da8:	4602      	mov	r2, r0
 8004daa:	4629      	mov	r1, r5
 8004dac:	4620      	mov	r0, r4
 8004dae:	9209      	str	r2, [sp, #36]	; 0x24
 8004db0:	f000 fa0c 	bl	80051cc <_Bfree>
 8004db4:	9b07      	ldr	r3, [sp, #28]
 8004db6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004db8:	9d04      	ldr	r5, [sp, #16]
 8004dba:	ea43 0102 	orr.w	r1, r3, r2
 8004dbe:	9b06      	ldr	r3, [sp, #24]
 8004dc0:	4319      	orrs	r1, r3
 8004dc2:	d110      	bne.n	8004de6 <_dtoa_r+0xa7e>
 8004dc4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004dc8:	d029      	beq.n	8004e1e <_dtoa_r+0xab6>
 8004dca:	9b05      	ldr	r3, [sp, #20]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	dd02      	ble.n	8004dd6 <_dtoa_r+0xa6e>
 8004dd0:	9b02      	ldr	r3, [sp, #8]
 8004dd2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8004dd6:	9b01      	ldr	r3, [sp, #4]
 8004dd8:	f883 9000 	strb.w	r9, [r3]
 8004ddc:	e774      	b.n	8004cc8 <_dtoa_r+0x960>
 8004dde:	4638      	mov	r0, r7
 8004de0:	e7ba      	b.n	8004d58 <_dtoa_r+0x9f0>
 8004de2:	2201      	movs	r2, #1
 8004de4:	e7e1      	b.n	8004daa <_dtoa_r+0xa42>
 8004de6:	9b05      	ldr	r3, [sp, #20]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	db04      	blt.n	8004df6 <_dtoa_r+0xa8e>
 8004dec:	9907      	ldr	r1, [sp, #28]
 8004dee:	430b      	orrs	r3, r1
 8004df0:	9906      	ldr	r1, [sp, #24]
 8004df2:	430b      	orrs	r3, r1
 8004df4:	d120      	bne.n	8004e38 <_dtoa_r+0xad0>
 8004df6:	2a00      	cmp	r2, #0
 8004df8:	dded      	ble.n	8004dd6 <_dtoa_r+0xa6e>
 8004dfa:	4651      	mov	r1, sl
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	4620      	mov	r0, r4
 8004e00:	f000 fbfe 	bl	8005600 <__lshift>
 8004e04:	4631      	mov	r1, r6
 8004e06:	4682      	mov	sl, r0
 8004e08:	f000 fc66 	bl	80056d8 <__mcmp>
 8004e0c:	2800      	cmp	r0, #0
 8004e0e:	dc03      	bgt.n	8004e18 <_dtoa_r+0xab0>
 8004e10:	d1e1      	bne.n	8004dd6 <_dtoa_r+0xa6e>
 8004e12:	f019 0f01 	tst.w	r9, #1
 8004e16:	d0de      	beq.n	8004dd6 <_dtoa_r+0xa6e>
 8004e18:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004e1c:	d1d8      	bne.n	8004dd0 <_dtoa_r+0xa68>
 8004e1e:	9a01      	ldr	r2, [sp, #4]
 8004e20:	2339      	movs	r3, #57	; 0x39
 8004e22:	7013      	strb	r3, [r2, #0]
 8004e24:	462b      	mov	r3, r5
 8004e26:	461d      	mov	r5, r3
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004e2e:	2a39      	cmp	r2, #57	; 0x39
 8004e30:	d06c      	beq.n	8004f0c <_dtoa_r+0xba4>
 8004e32:	3201      	adds	r2, #1
 8004e34:	701a      	strb	r2, [r3, #0]
 8004e36:	e747      	b.n	8004cc8 <_dtoa_r+0x960>
 8004e38:	2a00      	cmp	r2, #0
 8004e3a:	dd07      	ble.n	8004e4c <_dtoa_r+0xae4>
 8004e3c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004e40:	d0ed      	beq.n	8004e1e <_dtoa_r+0xab6>
 8004e42:	9a01      	ldr	r2, [sp, #4]
 8004e44:	f109 0301 	add.w	r3, r9, #1
 8004e48:	7013      	strb	r3, [r2, #0]
 8004e4a:	e73d      	b.n	8004cc8 <_dtoa_r+0x960>
 8004e4c:	9b04      	ldr	r3, [sp, #16]
 8004e4e:	9a08      	ldr	r2, [sp, #32]
 8004e50:	f803 9c01 	strb.w	r9, [r3, #-1]
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d043      	beq.n	8004ee0 <_dtoa_r+0xb78>
 8004e58:	4651      	mov	r1, sl
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	220a      	movs	r2, #10
 8004e5e:	4620      	mov	r0, r4
 8004e60:	f000 f9d6 	bl	8005210 <__multadd>
 8004e64:	45b8      	cmp	r8, r7
 8004e66:	4682      	mov	sl, r0
 8004e68:	f04f 0300 	mov.w	r3, #0
 8004e6c:	f04f 020a 	mov.w	r2, #10
 8004e70:	4641      	mov	r1, r8
 8004e72:	4620      	mov	r0, r4
 8004e74:	d107      	bne.n	8004e86 <_dtoa_r+0xb1e>
 8004e76:	f000 f9cb 	bl	8005210 <__multadd>
 8004e7a:	4680      	mov	r8, r0
 8004e7c:	4607      	mov	r7, r0
 8004e7e:	9b04      	ldr	r3, [sp, #16]
 8004e80:	3301      	adds	r3, #1
 8004e82:	9304      	str	r3, [sp, #16]
 8004e84:	e775      	b.n	8004d72 <_dtoa_r+0xa0a>
 8004e86:	f000 f9c3 	bl	8005210 <__multadd>
 8004e8a:	4639      	mov	r1, r7
 8004e8c:	4680      	mov	r8, r0
 8004e8e:	2300      	movs	r3, #0
 8004e90:	220a      	movs	r2, #10
 8004e92:	4620      	mov	r0, r4
 8004e94:	f000 f9bc 	bl	8005210 <__multadd>
 8004e98:	4607      	mov	r7, r0
 8004e9a:	e7f0      	b.n	8004e7e <_dtoa_r+0xb16>
 8004e9c:	9b04      	ldr	r3, [sp, #16]
 8004e9e:	9301      	str	r3, [sp, #4]
 8004ea0:	9d00      	ldr	r5, [sp, #0]
 8004ea2:	4631      	mov	r1, r6
 8004ea4:	4650      	mov	r0, sl
 8004ea6:	f7ff f9d5 	bl	8004254 <quorem>
 8004eaa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004eae:	9b00      	ldr	r3, [sp, #0]
 8004eb0:	f805 9b01 	strb.w	r9, [r5], #1
 8004eb4:	1aea      	subs	r2, r5, r3
 8004eb6:	9b01      	ldr	r3, [sp, #4]
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	dd07      	ble.n	8004ecc <_dtoa_r+0xb64>
 8004ebc:	4651      	mov	r1, sl
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	220a      	movs	r2, #10
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	f000 f9a4 	bl	8005210 <__multadd>
 8004ec8:	4682      	mov	sl, r0
 8004eca:	e7ea      	b.n	8004ea2 <_dtoa_r+0xb3a>
 8004ecc:	9b01      	ldr	r3, [sp, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	bfc8      	it	gt
 8004ed2:	461d      	movgt	r5, r3
 8004ed4:	9b00      	ldr	r3, [sp, #0]
 8004ed6:	bfd8      	it	le
 8004ed8:	2501      	movle	r5, #1
 8004eda:	441d      	add	r5, r3
 8004edc:	f04f 0800 	mov.w	r8, #0
 8004ee0:	4651      	mov	r1, sl
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	f000 fb8b 	bl	8005600 <__lshift>
 8004eea:	4631      	mov	r1, r6
 8004eec:	4682      	mov	sl, r0
 8004eee:	f000 fbf3 	bl	80056d8 <__mcmp>
 8004ef2:	2800      	cmp	r0, #0
 8004ef4:	dc96      	bgt.n	8004e24 <_dtoa_r+0xabc>
 8004ef6:	d102      	bne.n	8004efe <_dtoa_r+0xb96>
 8004ef8:	f019 0f01 	tst.w	r9, #1
 8004efc:	d192      	bne.n	8004e24 <_dtoa_r+0xabc>
 8004efe:	462b      	mov	r3, r5
 8004f00:	461d      	mov	r5, r3
 8004f02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f06:	2a30      	cmp	r2, #48	; 0x30
 8004f08:	d0fa      	beq.n	8004f00 <_dtoa_r+0xb98>
 8004f0a:	e6dd      	b.n	8004cc8 <_dtoa_r+0x960>
 8004f0c:	9a00      	ldr	r2, [sp, #0]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d189      	bne.n	8004e26 <_dtoa_r+0xabe>
 8004f12:	f10b 0b01 	add.w	fp, fp, #1
 8004f16:	2331      	movs	r3, #49	; 0x31
 8004f18:	e796      	b.n	8004e48 <_dtoa_r+0xae0>
 8004f1a:	4b0a      	ldr	r3, [pc, #40]	; (8004f44 <_dtoa_r+0xbdc>)
 8004f1c:	f7ff ba99 	b.w	8004452 <_dtoa_r+0xea>
 8004f20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f47f aa6d 	bne.w	8004402 <_dtoa_r+0x9a>
 8004f28:	4b07      	ldr	r3, [pc, #28]	; (8004f48 <_dtoa_r+0xbe0>)
 8004f2a:	f7ff ba92 	b.w	8004452 <_dtoa_r+0xea>
 8004f2e:	9b01      	ldr	r3, [sp, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	dcb5      	bgt.n	8004ea0 <_dtoa_r+0xb38>
 8004f34:	9b07      	ldr	r3, [sp, #28]
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	f73f aeb1 	bgt.w	8004c9e <_dtoa_r+0x936>
 8004f3c:	e7b0      	b.n	8004ea0 <_dtoa_r+0xb38>
 8004f3e:	bf00      	nop
 8004f40:	08007acc 	.word	0x08007acc
 8004f44:	08007a27 	.word	0x08007a27
 8004f48:	08007a50 	.word	0x08007a50

08004f4c <_free_r>:
 8004f4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f4e:	2900      	cmp	r1, #0
 8004f50:	d044      	beq.n	8004fdc <_free_r+0x90>
 8004f52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f56:	9001      	str	r0, [sp, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f1a1 0404 	sub.w	r4, r1, #4
 8004f5e:	bfb8      	it	lt
 8004f60:	18e4      	addlt	r4, r4, r3
 8004f62:	f000 f8e7 	bl	8005134 <__malloc_lock>
 8004f66:	4a1e      	ldr	r2, [pc, #120]	; (8004fe0 <_free_r+0x94>)
 8004f68:	9801      	ldr	r0, [sp, #4]
 8004f6a:	6813      	ldr	r3, [r2, #0]
 8004f6c:	b933      	cbnz	r3, 8004f7c <_free_r+0x30>
 8004f6e:	6063      	str	r3, [r4, #4]
 8004f70:	6014      	str	r4, [r2, #0]
 8004f72:	b003      	add	sp, #12
 8004f74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f78:	f000 b8e2 	b.w	8005140 <__malloc_unlock>
 8004f7c:	42a3      	cmp	r3, r4
 8004f7e:	d908      	bls.n	8004f92 <_free_r+0x46>
 8004f80:	6825      	ldr	r5, [r4, #0]
 8004f82:	1961      	adds	r1, r4, r5
 8004f84:	428b      	cmp	r3, r1
 8004f86:	bf01      	itttt	eq
 8004f88:	6819      	ldreq	r1, [r3, #0]
 8004f8a:	685b      	ldreq	r3, [r3, #4]
 8004f8c:	1949      	addeq	r1, r1, r5
 8004f8e:	6021      	streq	r1, [r4, #0]
 8004f90:	e7ed      	b.n	8004f6e <_free_r+0x22>
 8004f92:	461a      	mov	r2, r3
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	b10b      	cbz	r3, 8004f9c <_free_r+0x50>
 8004f98:	42a3      	cmp	r3, r4
 8004f9a:	d9fa      	bls.n	8004f92 <_free_r+0x46>
 8004f9c:	6811      	ldr	r1, [r2, #0]
 8004f9e:	1855      	adds	r5, r2, r1
 8004fa0:	42a5      	cmp	r5, r4
 8004fa2:	d10b      	bne.n	8004fbc <_free_r+0x70>
 8004fa4:	6824      	ldr	r4, [r4, #0]
 8004fa6:	4421      	add	r1, r4
 8004fa8:	1854      	adds	r4, r2, r1
 8004faa:	42a3      	cmp	r3, r4
 8004fac:	6011      	str	r1, [r2, #0]
 8004fae:	d1e0      	bne.n	8004f72 <_free_r+0x26>
 8004fb0:	681c      	ldr	r4, [r3, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	6053      	str	r3, [r2, #4]
 8004fb6:	440c      	add	r4, r1
 8004fb8:	6014      	str	r4, [r2, #0]
 8004fba:	e7da      	b.n	8004f72 <_free_r+0x26>
 8004fbc:	d902      	bls.n	8004fc4 <_free_r+0x78>
 8004fbe:	230c      	movs	r3, #12
 8004fc0:	6003      	str	r3, [r0, #0]
 8004fc2:	e7d6      	b.n	8004f72 <_free_r+0x26>
 8004fc4:	6825      	ldr	r5, [r4, #0]
 8004fc6:	1961      	adds	r1, r4, r5
 8004fc8:	428b      	cmp	r3, r1
 8004fca:	bf04      	itt	eq
 8004fcc:	6819      	ldreq	r1, [r3, #0]
 8004fce:	685b      	ldreq	r3, [r3, #4]
 8004fd0:	6063      	str	r3, [r4, #4]
 8004fd2:	bf04      	itt	eq
 8004fd4:	1949      	addeq	r1, r1, r5
 8004fd6:	6021      	streq	r1, [r4, #0]
 8004fd8:	6054      	str	r4, [r2, #4]
 8004fda:	e7ca      	b.n	8004f72 <_free_r+0x26>
 8004fdc:	b003      	add	sp, #12
 8004fde:	bd30      	pop	{r4, r5, pc}
 8004fe0:	2000033c 	.word	0x2000033c

08004fe4 <malloc>:
 8004fe4:	4b02      	ldr	r3, [pc, #8]	; (8004ff0 <malloc+0xc>)
 8004fe6:	4601      	mov	r1, r0
 8004fe8:	6818      	ldr	r0, [r3, #0]
 8004fea:	f000 b823 	b.w	8005034 <_malloc_r>
 8004fee:	bf00      	nop
 8004ff0:	20000060 	.word	0x20000060

08004ff4 <sbrk_aligned>:
 8004ff4:	b570      	push	{r4, r5, r6, lr}
 8004ff6:	4e0e      	ldr	r6, [pc, #56]	; (8005030 <sbrk_aligned+0x3c>)
 8004ff8:	460c      	mov	r4, r1
 8004ffa:	6831      	ldr	r1, [r6, #0]
 8004ffc:	4605      	mov	r5, r0
 8004ffe:	b911      	cbnz	r1, 8005006 <sbrk_aligned+0x12>
 8005000:	f001 fe1a 	bl	8006c38 <_sbrk_r>
 8005004:	6030      	str	r0, [r6, #0]
 8005006:	4621      	mov	r1, r4
 8005008:	4628      	mov	r0, r5
 800500a:	f001 fe15 	bl	8006c38 <_sbrk_r>
 800500e:	1c43      	adds	r3, r0, #1
 8005010:	d00a      	beq.n	8005028 <sbrk_aligned+0x34>
 8005012:	1cc4      	adds	r4, r0, #3
 8005014:	f024 0403 	bic.w	r4, r4, #3
 8005018:	42a0      	cmp	r0, r4
 800501a:	d007      	beq.n	800502c <sbrk_aligned+0x38>
 800501c:	1a21      	subs	r1, r4, r0
 800501e:	4628      	mov	r0, r5
 8005020:	f001 fe0a 	bl	8006c38 <_sbrk_r>
 8005024:	3001      	adds	r0, #1
 8005026:	d101      	bne.n	800502c <sbrk_aligned+0x38>
 8005028:	f04f 34ff 	mov.w	r4, #4294967295
 800502c:	4620      	mov	r0, r4
 800502e:	bd70      	pop	{r4, r5, r6, pc}
 8005030:	20000340 	.word	0x20000340

08005034 <_malloc_r>:
 8005034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005038:	1ccd      	adds	r5, r1, #3
 800503a:	f025 0503 	bic.w	r5, r5, #3
 800503e:	3508      	adds	r5, #8
 8005040:	2d0c      	cmp	r5, #12
 8005042:	bf38      	it	cc
 8005044:	250c      	movcc	r5, #12
 8005046:	2d00      	cmp	r5, #0
 8005048:	4607      	mov	r7, r0
 800504a:	db01      	blt.n	8005050 <_malloc_r+0x1c>
 800504c:	42a9      	cmp	r1, r5
 800504e:	d905      	bls.n	800505c <_malloc_r+0x28>
 8005050:	230c      	movs	r3, #12
 8005052:	603b      	str	r3, [r7, #0]
 8005054:	2600      	movs	r6, #0
 8005056:	4630      	mov	r0, r6
 8005058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800505c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005130 <_malloc_r+0xfc>
 8005060:	f000 f868 	bl	8005134 <__malloc_lock>
 8005064:	f8d8 3000 	ldr.w	r3, [r8]
 8005068:	461c      	mov	r4, r3
 800506a:	bb5c      	cbnz	r4, 80050c4 <_malloc_r+0x90>
 800506c:	4629      	mov	r1, r5
 800506e:	4638      	mov	r0, r7
 8005070:	f7ff ffc0 	bl	8004ff4 <sbrk_aligned>
 8005074:	1c43      	adds	r3, r0, #1
 8005076:	4604      	mov	r4, r0
 8005078:	d155      	bne.n	8005126 <_malloc_r+0xf2>
 800507a:	f8d8 4000 	ldr.w	r4, [r8]
 800507e:	4626      	mov	r6, r4
 8005080:	2e00      	cmp	r6, #0
 8005082:	d145      	bne.n	8005110 <_malloc_r+0xdc>
 8005084:	2c00      	cmp	r4, #0
 8005086:	d048      	beq.n	800511a <_malloc_r+0xe6>
 8005088:	6823      	ldr	r3, [r4, #0]
 800508a:	4631      	mov	r1, r6
 800508c:	4638      	mov	r0, r7
 800508e:	eb04 0903 	add.w	r9, r4, r3
 8005092:	f001 fdd1 	bl	8006c38 <_sbrk_r>
 8005096:	4581      	cmp	r9, r0
 8005098:	d13f      	bne.n	800511a <_malloc_r+0xe6>
 800509a:	6821      	ldr	r1, [r4, #0]
 800509c:	1a6d      	subs	r5, r5, r1
 800509e:	4629      	mov	r1, r5
 80050a0:	4638      	mov	r0, r7
 80050a2:	f7ff ffa7 	bl	8004ff4 <sbrk_aligned>
 80050a6:	3001      	adds	r0, #1
 80050a8:	d037      	beq.n	800511a <_malloc_r+0xe6>
 80050aa:	6823      	ldr	r3, [r4, #0]
 80050ac:	442b      	add	r3, r5
 80050ae:	6023      	str	r3, [r4, #0]
 80050b0:	f8d8 3000 	ldr.w	r3, [r8]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d038      	beq.n	800512a <_malloc_r+0xf6>
 80050b8:	685a      	ldr	r2, [r3, #4]
 80050ba:	42a2      	cmp	r2, r4
 80050bc:	d12b      	bne.n	8005116 <_malloc_r+0xe2>
 80050be:	2200      	movs	r2, #0
 80050c0:	605a      	str	r2, [r3, #4]
 80050c2:	e00f      	b.n	80050e4 <_malloc_r+0xb0>
 80050c4:	6822      	ldr	r2, [r4, #0]
 80050c6:	1b52      	subs	r2, r2, r5
 80050c8:	d41f      	bmi.n	800510a <_malloc_r+0xd6>
 80050ca:	2a0b      	cmp	r2, #11
 80050cc:	d917      	bls.n	80050fe <_malloc_r+0xca>
 80050ce:	1961      	adds	r1, r4, r5
 80050d0:	42a3      	cmp	r3, r4
 80050d2:	6025      	str	r5, [r4, #0]
 80050d4:	bf18      	it	ne
 80050d6:	6059      	strne	r1, [r3, #4]
 80050d8:	6863      	ldr	r3, [r4, #4]
 80050da:	bf08      	it	eq
 80050dc:	f8c8 1000 	streq.w	r1, [r8]
 80050e0:	5162      	str	r2, [r4, r5]
 80050e2:	604b      	str	r3, [r1, #4]
 80050e4:	4638      	mov	r0, r7
 80050e6:	f104 060b 	add.w	r6, r4, #11
 80050ea:	f000 f829 	bl	8005140 <__malloc_unlock>
 80050ee:	f026 0607 	bic.w	r6, r6, #7
 80050f2:	1d23      	adds	r3, r4, #4
 80050f4:	1af2      	subs	r2, r6, r3
 80050f6:	d0ae      	beq.n	8005056 <_malloc_r+0x22>
 80050f8:	1b9b      	subs	r3, r3, r6
 80050fa:	50a3      	str	r3, [r4, r2]
 80050fc:	e7ab      	b.n	8005056 <_malloc_r+0x22>
 80050fe:	42a3      	cmp	r3, r4
 8005100:	6862      	ldr	r2, [r4, #4]
 8005102:	d1dd      	bne.n	80050c0 <_malloc_r+0x8c>
 8005104:	f8c8 2000 	str.w	r2, [r8]
 8005108:	e7ec      	b.n	80050e4 <_malloc_r+0xb0>
 800510a:	4623      	mov	r3, r4
 800510c:	6864      	ldr	r4, [r4, #4]
 800510e:	e7ac      	b.n	800506a <_malloc_r+0x36>
 8005110:	4634      	mov	r4, r6
 8005112:	6876      	ldr	r6, [r6, #4]
 8005114:	e7b4      	b.n	8005080 <_malloc_r+0x4c>
 8005116:	4613      	mov	r3, r2
 8005118:	e7cc      	b.n	80050b4 <_malloc_r+0x80>
 800511a:	230c      	movs	r3, #12
 800511c:	603b      	str	r3, [r7, #0]
 800511e:	4638      	mov	r0, r7
 8005120:	f000 f80e 	bl	8005140 <__malloc_unlock>
 8005124:	e797      	b.n	8005056 <_malloc_r+0x22>
 8005126:	6025      	str	r5, [r4, #0]
 8005128:	e7dc      	b.n	80050e4 <_malloc_r+0xb0>
 800512a:	605b      	str	r3, [r3, #4]
 800512c:	deff      	udf	#255	; 0xff
 800512e:	bf00      	nop
 8005130:	2000033c 	.word	0x2000033c

08005134 <__malloc_lock>:
 8005134:	4801      	ldr	r0, [pc, #4]	; (800513c <__malloc_lock+0x8>)
 8005136:	f7ff b884 	b.w	8004242 <__retarget_lock_acquire_recursive>
 800513a:	bf00      	nop
 800513c:	20000338 	.word	0x20000338

08005140 <__malloc_unlock>:
 8005140:	4801      	ldr	r0, [pc, #4]	; (8005148 <__malloc_unlock+0x8>)
 8005142:	f7ff b87f 	b.w	8004244 <__retarget_lock_release_recursive>
 8005146:	bf00      	nop
 8005148:	20000338 	.word	0x20000338

0800514c <_Balloc>:
 800514c:	b570      	push	{r4, r5, r6, lr}
 800514e:	69c6      	ldr	r6, [r0, #28]
 8005150:	4604      	mov	r4, r0
 8005152:	460d      	mov	r5, r1
 8005154:	b976      	cbnz	r6, 8005174 <_Balloc+0x28>
 8005156:	2010      	movs	r0, #16
 8005158:	f7ff ff44 	bl	8004fe4 <malloc>
 800515c:	4602      	mov	r2, r0
 800515e:	61e0      	str	r0, [r4, #28]
 8005160:	b920      	cbnz	r0, 800516c <_Balloc+0x20>
 8005162:	4b18      	ldr	r3, [pc, #96]	; (80051c4 <_Balloc+0x78>)
 8005164:	4818      	ldr	r0, [pc, #96]	; (80051c8 <_Balloc+0x7c>)
 8005166:	216b      	movs	r1, #107	; 0x6b
 8005168:	f001 fd8e 	bl	8006c88 <__assert_func>
 800516c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005170:	6006      	str	r6, [r0, #0]
 8005172:	60c6      	str	r6, [r0, #12]
 8005174:	69e6      	ldr	r6, [r4, #28]
 8005176:	68f3      	ldr	r3, [r6, #12]
 8005178:	b183      	cbz	r3, 800519c <_Balloc+0x50>
 800517a:	69e3      	ldr	r3, [r4, #28]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005182:	b9b8      	cbnz	r0, 80051b4 <_Balloc+0x68>
 8005184:	2101      	movs	r1, #1
 8005186:	fa01 f605 	lsl.w	r6, r1, r5
 800518a:	1d72      	adds	r2, r6, #5
 800518c:	0092      	lsls	r2, r2, #2
 800518e:	4620      	mov	r0, r4
 8005190:	f001 fd98 	bl	8006cc4 <_calloc_r>
 8005194:	b160      	cbz	r0, 80051b0 <_Balloc+0x64>
 8005196:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800519a:	e00e      	b.n	80051ba <_Balloc+0x6e>
 800519c:	2221      	movs	r2, #33	; 0x21
 800519e:	2104      	movs	r1, #4
 80051a0:	4620      	mov	r0, r4
 80051a2:	f001 fd8f 	bl	8006cc4 <_calloc_r>
 80051a6:	69e3      	ldr	r3, [r4, #28]
 80051a8:	60f0      	str	r0, [r6, #12]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1e4      	bne.n	800517a <_Balloc+0x2e>
 80051b0:	2000      	movs	r0, #0
 80051b2:	bd70      	pop	{r4, r5, r6, pc}
 80051b4:	6802      	ldr	r2, [r0, #0]
 80051b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80051ba:	2300      	movs	r3, #0
 80051bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80051c0:	e7f7      	b.n	80051b2 <_Balloc+0x66>
 80051c2:	bf00      	nop
 80051c4:	08007a5d 	.word	0x08007a5d
 80051c8:	08007add 	.word	0x08007add

080051cc <_Bfree>:
 80051cc:	b570      	push	{r4, r5, r6, lr}
 80051ce:	69c6      	ldr	r6, [r0, #28]
 80051d0:	4605      	mov	r5, r0
 80051d2:	460c      	mov	r4, r1
 80051d4:	b976      	cbnz	r6, 80051f4 <_Bfree+0x28>
 80051d6:	2010      	movs	r0, #16
 80051d8:	f7ff ff04 	bl	8004fe4 <malloc>
 80051dc:	4602      	mov	r2, r0
 80051de:	61e8      	str	r0, [r5, #28]
 80051e0:	b920      	cbnz	r0, 80051ec <_Bfree+0x20>
 80051e2:	4b09      	ldr	r3, [pc, #36]	; (8005208 <_Bfree+0x3c>)
 80051e4:	4809      	ldr	r0, [pc, #36]	; (800520c <_Bfree+0x40>)
 80051e6:	218f      	movs	r1, #143	; 0x8f
 80051e8:	f001 fd4e 	bl	8006c88 <__assert_func>
 80051ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80051f0:	6006      	str	r6, [r0, #0]
 80051f2:	60c6      	str	r6, [r0, #12]
 80051f4:	b13c      	cbz	r4, 8005206 <_Bfree+0x3a>
 80051f6:	69eb      	ldr	r3, [r5, #28]
 80051f8:	6862      	ldr	r2, [r4, #4]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005200:	6021      	str	r1, [r4, #0]
 8005202:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005206:	bd70      	pop	{r4, r5, r6, pc}
 8005208:	08007a5d 	.word	0x08007a5d
 800520c:	08007add 	.word	0x08007add

08005210 <__multadd>:
 8005210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005214:	690d      	ldr	r5, [r1, #16]
 8005216:	4607      	mov	r7, r0
 8005218:	460c      	mov	r4, r1
 800521a:	461e      	mov	r6, r3
 800521c:	f101 0c14 	add.w	ip, r1, #20
 8005220:	2000      	movs	r0, #0
 8005222:	f8dc 3000 	ldr.w	r3, [ip]
 8005226:	b299      	uxth	r1, r3
 8005228:	fb02 6101 	mla	r1, r2, r1, r6
 800522c:	0c1e      	lsrs	r6, r3, #16
 800522e:	0c0b      	lsrs	r3, r1, #16
 8005230:	fb02 3306 	mla	r3, r2, r6, r3
 8005234:	b289      	uxth	r1, r1
 8005236:	3001      	adds	r0, #1
 8005238:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800523c:	4285      	cmp	r5, r0
 800523e:	f84c 1b04 	str.w	r1, [ip], #4
 8005242:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005246:	dcec      	bgt.n	8005222 <__multadd+0x12>
 8005248:	b30e      	cbz	r6, 800528e <__multadd+0x7e>
 800524a:	68a3      	ldr	r3, [r4, #8]
 800524c:	42ab      	cmp	r3, r5
 800524e:	dc19      	bgt.n	8005284 <__multadd+0x74>
 8005250:	6861      	ldr	r1, [r4, #4]
 8005252:	4638      	mov	r0, r7
 8005254:	3101      	adds	r1, #1
 8005256:	f7ff ff79 	bl	800514c <_Balloc>
 800525a:	4680      	mov	r8, r0
 800525c:	b928      	cbnz	r0, 800526a <__multadd+0x5a>
 800525e:	4602      	mov	r2, r0
 8005260:	4b0c      	ldr	r3, [pc, #48]	; (8005294 <__multadd+0x84>)
 8005262:	480d      	ldr	r0, [pc, #52]	; (8005298 <__multadd+0x88>)
 8005264:	21ba      	movs	r1, #186	; 0xba
 8005266:	f001 fd0f 	bl	8006c88 <__assert_func>
 800526a:	6922      	ldr	r2, [r4, #16]
 800526c:	3202      	adds	r2, #2
 800526e:	f104 010c 	add.w	r1, r4, #12
 8005272:	0092      	lsls	r2, r2, #2
 8005274:	300c      	adds	r0, #12
 8005276:	f001 fcef 	bl	8006c58 <memcpy>
 800527a:	4621      	mov	r1, r4
 800527c:	4638      	mov	r0, r7
 800527e:	f7ff ffa5 	bl	80051cc <_Bfree>
 8005282:	4644      	mov	r4, r8
 8005284:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005288:	3501      	adds	r5, #1
 800528a:	615e      	str	r6, [r3, #20]
 800528c:	6125      	str	r5, [r4, #16]
 800528e:	4620      	mov	r0, r4
 8005290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005294:	08007acc 	.word	0x08007acc
 8005298:	08007add 	.word	0x08007add

0800529c <__s2b>:
 800529c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052a0:	460c      	mov	r4, r1
 80052a2:	4615      	mov	r5, r2
 80052a4:	461f      	mov	r7, r3
 80052a6:	2209      	movs	r2, #9
 80052a8:	3308      	adds	r3, #8
 80052aa:	4606      	mov	r6, r0
 80052ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80052b0:	2100      	movs	r1, #0
 80052b2:	2201      	movs	r2, #1
 80052b4:	429a      	cmp	r2, r3
 80052b6:	db09      	blt.n	80052cc <__s2b+0x30>
 80052b8:	4630      	mov	r0, r6
 80052ba:	f7ff ff47 	bl	800514c <_Balloc>
 80052be:	b940      	cbnz	r0, 80052d2 <__s2b+0x36>
 80052c0:	4602      	mov	r2, r0
 80052c2:	4b19      	ldr	r3, [pc, #100]	; (8005328 <__s2b+0x8c>)
 80052c4:	4819      	ldr	r0, [pc, #100]	; (800532c <__s2b+0x90>)
 80052c6:	21d3      	movs	r1, #211	; 0xd3
 80052c8:	f001 fcde 	bl	8006c88 <__assert_func>
 80052cc:	0052      	lsls	r2, r2, #1
 80052ce:	3101      	adds	r1, #1
 80052d0:	e7f0      	b.n	80052b4 <__s2b+0x18>
 80052d2:	9b08      	ldr	r3, [sp, #32]
 80052d4:	6143      	str	r3, [r0, #20]
 80052d6:	2d09      	cmp	r5, #9
 80052d8:	f04f 0301 	mov.w	r3, #1
 80052dc:	6103      	str	r3, [r0, #16]
 80052de:	dd16      	ble.n	800530e <__s2b+0x72>
 80052e0:	f104 0909 	add.w	r9, r4, #9
 80052e4:	46c8      	mov	r8, r9
 80052e6:	442c      	add	r4, r5
 80052e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80052ec:	4601      	mov	r1, r0
 80052ee:	3b30      	subs	r3, #48	; 0x30
 80052f0:	220a      	movs	r2, #10
 80052f2:	4630      	mov	r0, r6
 80052f4:	f7ff ff8c 	bl	8005210 <__multadd>
 80052f8:	45a0      	cmp	r8, r4
 80052fa:	d1f5      	bne.n	80052e8 <__s2b+0x4c>
 80052fc:	f1a5 0408 	sub.w	r4, r5, #8
 8005300:	444c      	add	r4, r9
 8005302:	1b2d      	subs	r5, r5, r4
 8005304:	1963      	adds	r3, r4, r5
 8005306:	42bb      	cmp	r3, r7
 8005308:	db04      	blt.n	8005314 <__s2b+0x78>
 800530a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800530e:	340a      	adds	r4, #10
 8005310:	2509      	movs	r5, #9
 8005312:	e7f6      	b.n	8005302 <__s2b+0x66>
 8005314:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005318:	4601      	mov	r1, r0
 800531a:	3b30      	subs	r3, #48	; 0x30
 800531c:	220a      	movs	r2, #10
 800531e:	4630      	mov	r0, r6
 8005320:	f7ff ff76 	bl	8005210 <__multadd>
 8005324:	e7ee      	b.n	8005304 <__s2b+0x68>
 8005326:	bf00      	nop
 8005328:	08007acc 	.word	0x08007acc
 800532c:	08007add 	.word	0x08007add

08005330 <__hi0bits>:
 8005330:	0c03      	lsrs	r3, r0, #16
 8005332:	041b      	lsls	r3, r3, #16
 8005334:	b9d3      	cbnz	r3, 800536c <__hi0bits+0x3c>
 8005336:	0400      	lsls	r0, r0, #16
 8005338:	2310      	movs	r3, #16
 800533a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800533e:	bf04      	itt	eq
 8005340:	0200      	lsleq	r0, r0, #8
 8005342:	3308      	addeq	r3, #8
 8005344:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005348:	bf04      	itt	eq
 800534a:	0100      	lsleq	r0, r0, #4
 800534c:	3304      	addeq	r3, #4
 800534e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005352:	bf04      	itt	eq
 8005354:	0080      	lsleq	r0, r0, #2
 8005356:	3302      	addeq	r3, #2
 8005358:	2800      	cmp	r0, #0
 800535a:	db05      	blt.n	8005368 <__hi0bits+0x38>
 800535c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005360:	f103 0301 	add.w	r3, r3, #1
 8005364:	bf08      	it	eq
 8005366:	2320      	moveq	r3, #32
 8005368:	4618      	mov	r0, r3
 800536a:	4770      	bx	lr
 800536c:	2300      	movs	r3, #0
 800536e:	e7e4      	b.n	800533a <__hi0bits+0xa>

08005370 <__lo0bits>:
 8005370:	6803      	ldr	r3, [r0, #0]
 8005372:	f013 0207 	ands.w	r2, r3, #7
 8005376:	d00c      	beq.n	8005392 <__lo0bits+0x22>
 8005378:	07d9      	lsls	r1, r3, #31
 800537a:	d422      	bmi.n	80053c2 <__lo0bits+0x52>
 800537c:	079a      	lsls	r2, r3, #30
 800537e:	bf49      	itett	mi
 8005380:	085b      	lsrmi	r3, r3, #1
 8005382:	089b      	lsrpl	r3, r3, #2
 8005384:	6003      	strmi	r3, [r0, #0]
 8005386:	2201      	movmi	r2, #1
 8005388:	bf5c      	itt	pl
 800538a:	6003      	strpl	r3, [r0, #0]
 800538c:	2202      	movpl	r2, #2
 800538e:	4610      	mov	r0, r2
 8005390:	4770      	bx	lr
 8005392:	b299      	uxth	r1, r3
 8005394:	b909      	cbnz	r1, 800539a <__lo0bits+0x2a>
 8005396:	0c1b      	lsrs	r3, r3, #16
 8005398:	2210      	movs	r2, #16
 800539a:	b2d9      	uxtb	r1, r3
 800539c:	b909      	cbnz	r1, 80053a2 <__lo0bits+0x32>
 800539e:	3208      	adds	r2, #8
 80053a0:	0a1b      	lsrs	r3, r3, #8
 80053a2:	0719      	lsls	r1, r3, #28
 80053a4:	bf04      	itt	eq
 80053a6:	091b      	lsreq	r3, r3, #4
 80053a8:	3204      	addeq	r2, #4
 80053aa:	0799      	lsls	r1, r3, #30
 80053ac:	bf04      	itt	eq
 80053ae:	089b      	lsreq	r3, r3, #2
 80053b0:	3202      	addeq	r2, #2
 80053b2:	07d9      	lsls	r1, r3, #31
 80053b4:	d403      	bmi.n	80053be <__lo0bits+0x4e>
 80053b6:	085b      	lsrs	r3, r3, #1
 80053b8:	f102 0201 	add.w	r2, r2, #1
 80053bc:	d003      	beq.n	80053c6 <__lo0bits+0x56>
 80053be:	6003      	str	r3, [r0, #0]
 80053c0:	e7e5      	b.n	800538e <__lo0bits+0x1e>
 80053c2:	2200      	movs	r2, #0
 80053c4:	e7e3      	b.n	800538e <__lo0bits+0x1e>
 80053c6:	2220      	movs	r2, #32
 80053c8:	e7e1      	b.n	800538e <__lo0bits+0x1e>
	...

080053cc <__i2b>:
 80053cc:	b510      	push	{r4, lr}
 80053ce:	460c      	mov	r4, r1
 80053d0:	2101      	movs	r1, #1
 80053d2:	f7ff febb 	bl	800514c <_Balloc>
 80053d6:	4602      	mov	r2, r0
 80053d8:	b928      	cbnz	r0, 80053e6 <__i2b+0x1a>
 80053da:	4b05      	ldr	r3, [pc, #20]	; (80053f0 <__i2b+0x24>)
 80053dc:	4805      	ldr	r0, [pc, #20]	; (80053f4 <__i2b+0x28>)
 80053de:	f240 1145 	movw	r1, #325	; 0x145
 80053e2:	f001 fc51 	bl	8006c88 <__assert_func>
 80053e6:	2301      	movs	r3, #1
 80053e8:	6144      	str	r4, [r0, #20]
 80053ea:	6103      	str	r3, [r0, #16]
 80053ec:	bd10      	pop	{r4, pc}
 80053ee:	bf00      	nop
 80053f0:	08007acc 	.word	0x08007acc
 80053f4:	08007add 	.word	0x08007add

080053f8 <__multiply>:
 80053f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053fc:	4691      	mov	r9, r2
 80053fe:	690a      	ldr	r2, [r1, #16]
 8005400:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005404:	429a      	cmp	r2, r3
 8005406:	bfb8      	it	lt
 8005408:	460b      	movlt	r3, r1
 800540a:	460c      	mov	r4, r1
 800540c:	bfbc      	itt	lt
 800540e:	464c      	movlt	r4, r9
 8005410:	4699      	movlt	r9, r3
 8005412:	6927      	ldr	r7, [r4, #16]
 8005414:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005418:	68a3      	ldr	r3, [r4, #8]
 800541a:	6861      	ldr	r1, [r4, #4]
 800541c:	eb07 060a 	add.w	r6, r7, sl
 8005420:	42b3      	cmp	r3, r6
 8005422:	b085      	sub	sp, #20
 8005424:	bfb8      	it	lt
 8005426:	3101      	addlt	r1, #1
 8005428:	f7ff fe90 	bl	800514c <_Balloc>
 800542c:	b930      	cbnz	r0, 800543c <__multiply+0x44>
 800542e:	4602      	mov	r2, r0
 8005430:	4b44      	ldr	r3, [pc, #272]	; (8005544 <__multiply+0x14c>)
 8005432:	4845      	ldr	r0, [pc, #276]	; (8005548 <__multiply+0x150>)
 8005434:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005438:	f001 fc26 	bl	8006c88 <__assert_func>
 800543c:	f100 0514 	add.w	r5, r0, #20
 8005440:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005444:	462b      	mov	r3, r5
 8005446:	2200      	movs	r2, #0
 8005448:	4543      	cmp	r3, r8
 800544a:	d321      	bcc.n	8005490 <__multiply+0x98>
 800544c:	f104 0314 	add.w	r3, r4, #20
 8005450:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005454:	f109 0314 	add.w	r3, r9, #20
 8005458:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800545c:	9202      	str	r2, [sp, #8]
 800545e:	1b3a      	subs	r2, r7, r4
 8005460:	3a15      	subs	r2, #21
 8005462:	f022 0203 	bic.w	r2, r2, #3
 8005466:	3204      	adds	r2, #4
 8005468:	f104 0115 	add.w	r1, r4, #21
 800546c:	428f      	cmp	r7, r1
 800546e:	bf38      	it	cc
 8005470:	2204      	movcc	r2, #4
 8005472:	9201      	str	r2, [sp, #4]
 8005474:	9a02      	ldr	r2, [sp, #8]
 8005476:	9303      	str	r3, [sp, #12]
 8005478:	429a      	cmp	r2, r3
 800547a:	d80c      	bhi.n	8005496 <__multiply+0x9e>
 800547c:	2e00      	cmp	r6, #0
 800547e:	dd03      	ble.n	8005488 <__multiply+0x90>
 8005480:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005484:	2b00      	cmp	r3, #0
 8005486:	d05b      	beq.n	8005540 <__multiply+0x148>
 8005488:	6106      	str	r6, [r0, #16]
 800548a:	b005      	add	sp, #20
 800548c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005490:	f843 2b04 	str.w	r2, [r3], #4
 8005494:	e7d8      	b.n	8005448 <__multiply+0x50>
 8005496:	f8b3 a000 	ldrh.w	sl, [r3]
 800549a:	f1ba 0f00 	cmp.w	sl, #0
 800549e:	d024      	beq.n	80054ea <__multiply+0xf2>
 80054a0:	f104 0e14 	add.w	lr, r4, #20
 80054a4:	46a9      	mov	r9, r5
 80054a6:	f04f 0c00 	mov.w	ip, #0
 80054aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80054ae:	f8d9 1000 	ldr.w	r1, [r9]
 80054b2:	fa1f fb82 	uxth.w	fp, r2
 80054b6:	b289      	uxth	r1, r1
 80054b8:	fb0a 110b 	mla	r1, sl, fp, r1
 80054bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80054c0:	f8d9 2000 	ldr.w	r2, [r9]
 80054c4:	4461      	add	r1, ip
 80054c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80054ca:	fb0a c20b 	mla	r2, sl, fp, ip
 80054ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80054d2:	b289      	uxth	r1, r1
 80054d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80054d8:	4577      	cmp	r7, lr
 80054da:	f849 1b04 	str.w	r1, [r9], #4
 80054de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80054e2:	d8e2      	bhi.n	80054aa <__multiply+0xb2>
 80054e4:	9a01      	ldr	r2, [sp, #4]
 80054e6:	f845 c002 	str.w	ip, [r5, r2]
 80054ea:	9a03      	ldr	r2, [sp, #12]
 80054ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80054f0:	3304      	adds	r3, #4
 80054f2:	f1b9 0f00 	cmp.w	r9, #0
 80054f6:	d021      	beq.n	800553c <__multiply+0x144>
 80054f8:	6829      	ldr	r1, [r5, #0]
 80054fa:	f104 0c14 	add.w	ip, r4, #20
 80054fe:	46ae      	mov	lr, r5
 8005500:	f04f 0a00 	mov.w	sl, #0
 8005504:	f8bc b000 	ldrh.w	fp, [ip]
 8005508:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800550c:	fb09 220b 	mla	r2, r9, fp, r2
 8005510:	4452      	add	r2, sl
 8005512:	b289      	uxth	r1, r1
 8005514:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005518:	f84e 1b04 	str.w	r1, [lr], #4
 800551c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005520:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005524:	f8be 1000 	ldrh.w	r1, [lr]
 8005528:	fb09 110a 	mla	r1, r9, sl, r1
 800552c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005530:	4567      	cmp	r7, ip
 8005532:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005536:	d8e5      	bhi.n	8005504 <__multiply+0x10c>
 8005538:	9a01      	ldr	r2, [sp, #4]
 800553a:	50a9      	str	r1, [r5, r2]
 800553c:	3504      	adds	r5, #4
 800553e:	e799      	b.n	8005474 <__multiply+0x7c>
 8005540:	3e01      	subs	r6, #1
 8005542:	e79b      	b.n	800547c <__multiply+0x84>
 8005544:	08007acc 	.word	0x08007acc
 8005548:	08007add 	.word	0x08007add

0800554c <__pow5mult>:
 800554c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005550:	4615      	mov	r5, r2
 8005552:	f012 0203 	ands.w	r2, r2, #3
 8005556:	4606      	mov	r6, r0
 8005558:	460f      	mov	r7, r1
 800555a:	d007      	beq.n	800556c <__pow5mult+0x20>
 800555c:	4c25      	ldr	r4, [pc, #148]	; (80055f4 <__pow5mult+0xa8>)
 800555e:	3a01      	subs	r2, #1
 8005560:	2300      	movs	r3, #0
 8005562:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005566:	f7ff fe53 	bl	8005210 <__multadd>
 800556a:	4607      	mov	r7, r0
 800556c:	10ad      	asrs	r5, r5, #2
 800556e:	d03d      	beq.n	80055ec <__pow5mult+0xa0>
 8005570:	69f4      	ldr	r4, [r6, #28]
 8005572:	b97c      	cbnz	r4, 8005594 <__pow5mult+0x48>
 8005574:	2010      	movs	r0, #16
 8005576:	f7ff fd35 	bl	8004fe4 <malloc>
 800557a:	4602      	mov	r2, r0
 800557c:	61f0      	str	r0, [r6, #28]
 800557e:	b928      	cbnz	r0, 800558c <__pow5mult+0x40>
 8005580:	4b1d      	ldr	r3, [pc, #116]	; (80055f8 <__pow5mult+0xac>)
 8005582:	481e      	ldr	r0, [pc, #120]	; (80055fc <__pow5mult+0xb0>)
 8005584:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005588:	f001 fb7e 	bl	8006c88 <__assert_func>
 800558c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005590:	6004      	str	r4, [r0, #0]
 8005592:	60c4      	str	r4, [r0, #12]
 8005594:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005598:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800559c:	b94c      	cbnz	r4, 80055b2 <__pow5mult+0x66>
 800559e:	f240 2171 	movw	r1, #625	; 0x271
 80055a2:	4630      	mov	r0, r6
 80055a4:	f7ff ff12 	bl	80053cc <__i2b>
 80055a8:	2300      	movs	r3, #0
 80055aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80055ae:	4604      	mov	r4, r0
 80055b0:	6003      	str	r3, [r0, #0]
 80055b2:	f04f 0900 	mov.w	r9, #0
 80055b6:	07eb      	lsls	r3, r5, #31
 80055b8:	d50a      	bpl.n	80055d0 <__pow5mult+0x84>
 80055ba:	4639      	mov	r1, r7
 80055bc:	4622      	mov	r2, r4
 80055be:	4630      	mov	r0, r6
 80055c0:	f7ff ff1a 	bl	80053f8 <__multiply>
 80055c4:	4639      	mov	r1, r7
 80055c6:	4680      	mov	r8, r0
 80055c8:	4630      	mov	r0, r6
 80055ca:	f7ff fdff 	bl	80051cc <_Bfree>
 80055ce:	4647      	mov	r7, r8
 80055d0:	106d      	asrs	r5, r5, #1
 80055d2:	d00b      	beq.n	80055ec <__pow5mult+0xa0>
 80055d4:	6820      	ldr	r0, [r4, #0]
 80055d6:	b938      	cbnz	r0, 80055e8 <__pow5mult+0x9c>
 80055d8:	4622      	mov	r2, r4
 80055da:	4621      	mov	r1, r4
 80055dc:	4630      	mov	r0, r6
 80055de:	f7ff ff0b 	bl	80053f8 <__multiply>
 80055e2:	6020      	str	r0, [r4, #0]
 80055e4:	f8c0 9000 	str.w	r9, [r0]
 80055e8:	4604      	mov	r4, r0
 80055ea:	e7e4      	b.n	80055b6 <__pow5mult+0x6a>
 80055ec:	4638      	mov	r0, r7
 80055ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055f2:	bf00      	nop
 80055f4:	08007c28 	.word	0x08007c28
 80055f8:	08007a5d 	.word	0x08007a5d
 80055fc:	08007add 	.word	0x08007add

08005600 <__lshift>:
 8005600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005604:	460c      	mov	r4, r1
 8005606:	6849      	ldr	r1, [r1, #4]
 8005608:	6923      	ldr	r3, [r4, #16]
 800560a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800560e:	68a3      	ldr	r3, [r4, #8]
 8005610:	4607      	mov	r7, r0
 8005612:	4691      	mov	r9, r2
 8005614:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005618:	f108 0601 	add.w	r6, r8, #1
 800561c:	42b3      	cmp	r3, r6
 800561e:	db0b      	blt.n	8005638 <__lshift+0x38>
 8005620:	4638      	mov	r0, r7
 8005622:	f7ff fd93 	bl	800514c <_Balloc>
 8005626:	4605      	mov	r5, r0
 8005628:	b948      	cbnz	r0, 800563e <__lshift+0x3e>
 800562a:	4602      	mov	r2, r0
 800562c:	4b28      	ldr	r3, [pc, #160]	; (80056d0 <__lshift+0xd0>)
 800562e:	4829      	ldr	r0, [pc, #164]	; (80056d4 <__lshift+0xd4>)
 8005630:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005634:	f001 fb28 	bl	8006c88 <__assert_func>
 8005638:	3101      	adds	r1, #1
 800563a:	005b      	lsls	r3, r3, #1
 800563c:	e7ee      	b.n	800561c <__lshift+0x1c>
 800563e:	2300      	movs	r3, #0
 8005640:	f100 0114 	add.w	r1, r0, #20
 8005644:	f100 0210 	add.w	r2, r0, #16
 8005648:	4618      	mov	r0, r3
 800564a:	4553      	cmp	r3, sl
 800564c:	db33      	blt.n	80056b6 <__lshift+0xb6>
 800564e:	6920      	ldr	r0, [r4, #16]
 8005650:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005654:	f104 0314 	add.w	r3, r4, #20
 8005658:	f019 091f 	ands.w	r9, r9, #31
 800565c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005660:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005664:	d02b      	beq.n	80056be <__lshift+0xbe>
 8005666:	f1c9 0e20 	rsb	lr, r9, #32
 800566a:	468a      	mov	sl, r1
 800566c:	2200      	movs	r2, #0
 800566e:	6818      	ldr	r0, [r3, #0]
 8005670:	fa00 f009 	lsl.w	r0, r0, r9
 8005674:	4310      	orrs	r0, r2
 8005676:	f84a 0b04 	str.w	r0, [sl], #4
 800567a:	f853 2b04 	ldr.w	r2, [r3], #4
 800567e:	459c      	cmp	ip, r3
 8005680:	fa22 f20e 	lsr.w	r2, r2, lr
 8005684:	d8f3      	bhi.n	800566e <__lshift+0x6e>
 8005686:	ebac 0304 	sub.w	r3, ip, r4
 800568a:	3b15      	subs	r3, #21
 800568c:	f023 0303 	bic.w	r3, r3, #3
 8005690:	3304      	adds	r3, #4
 8005692:	f104 0015 	add.w	r0, r4, #21
 8005696:	4584      	cmp	ip, r0
 8005698:	bf38      	it	cc
 800569a:	2304      	movcc	r3, #4
 800569c:	50ca      	str	r2, [r1, r3]
 800569e:	b10a      	cbz	r2, 80056a4 <__lshift+0xa4>
 80056a0:	f108 0602 	add.w	r6, r8, #2
 80056a4:	3e01      	subs	r6, #1
 80056a6:	4638      	mov	r0, r7
 80056a8:	612e      	str	r6, [r5, #16]
 80056aa:	4621      	mov	r1, r4
 80056ac:	f7ff fd8e 	bl	80051cc <_Bfree>
 80056b0:	4628      	mov	r0, r5
 80056b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80056ba:	3301      	adds	r3, #1
 80056bc:	e7c5      	b.n	800564a <__lshift+0x4a>
 80056be:	3904      	subs	r1, #4
 80056c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80056c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80056c8:	459c      	cmp	ip, r3
 80056ca:	d8f9      	bhi.n	80056c0 <__lshift+0xc0>
 80056cc:	e7ea      	b.n	80056a4 <__lshift+0xa4>
 80056ce:	bf00      	nop
 80056d0:	08007acc 	.word	0x08007acc
 80056d4:	08007add 	.word	0x08007add

080056d8 <__mcmp>:
 80056d8:	b530      	push	{r4, r5, lr}
 80056da:	6902      	ldr	r2, [r0, #16]
 80056dc:	690c      	ldr	r4, [r1, #16]
 80056de:	1b12      	subs	r2, r2, r4
 80056e0:	d10e      	bne.n	8005700 <__mcmp+0x28>
 80056e2:	f100 0314 	add.w	r3, r0, #20
 80056e6:	3114      	adds	r1, #20
 80056e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80056ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80056f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80056f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80056f8:	42a5      	cmp	r5, r4
 80056fa:	d003      	beq.n	8005704 <__mcmp+0x2c>
 80056fc:	d305      	bcc.n	800570a <__mcmp+0x32>
 80056fe:	2201      	movs	r2, #1
 8005700:	4610      	mov	r0, r2
 8005702:	bd30      	pop	{r4, r5, pc}
 8005704:	4283      	cmp	r3, r0
 8005706:	d3f3      	bcc.n	80056f0 <__mcmp+0x18>
 8005708:	e7fa      	b.n	8005700 <__mcmp+0x28>
 800570a:	f04f 32ff 	mov.w	r2, #4294967295
 800570e:	e7f7      	b.n	8005700 <__mcmp+0x28>

08005710 <__mdiff>:
 8005710:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005714:	460c      	mov	r4, r1
 8005716:	4606      	mov	r6, r0
 8005718:	4611      	mov	r1, r2
 800571a:	4620      	mov	r0, r4
 800571c:	4690      	mov	r8, r2
 800571e:	f7ff ffdb 	bl	80056d8 <__mcmp>
 8005722:	1e05      	subs	r5, r0, #0
 8005724:	d110      	bne.n	8005748 <__mdiff+0x38>
 8005726:	4629      	mov	r1, r5
 8005728:	4630      	mov	r0, r6
 800572a:	f7ff fd0f 	bl	800514c <_Balloc>
 800572e:	b930      	cbnz	r0, 800573e <__mdiff+0x2e>
 8005730:	4b3a      	ldr	r3, [pc, #232]	; (800581c <__mdiff+0x10c>)
 8005732:	4602      	mov	r2, r0
 8005734:	f240 2137 	movw	r1, #567	; 0x237
 8005738:	4839      	ldr	r0, [pc, #228]	; (8005820 <__mdiff+0x110>)
 800573a:	f001 faa5 	bl	8006c88 <__assert_func>
 800573e:	2301      	movs	r3, #1
 8005740:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005744:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005748:	bfa4      	itt	ge
 800574a:	4643      	movge	r3, r8
 800574c:	46a0      	movge	r8, r4
 800574e:	4630      	mov	r0, r6
 8005750:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005754:	bfa6      	itte	ge
 8005756:	461c      	movge	r4, r3
 8005758:	2500      	movge	r5, #0
 800575a:	2501      	movlt	r5, #1
 800575c:	f7ff fcf6 	bl	800514c <_Balloc>
 8005760:	b920      	cbnz	r0, 800576c <__mdiff+0x5c>
 8005762:	4b2e      	ldr	r3, [pc, #184]	; (800581c <__mdiff+0x10c>)
 8005764:	4602      	mov	r2, r0
 8005766:	f240 2145 	movw	r1, #581	; 0x245
 800576a:	e7e5      	b.n	8005738 <__mdiff+0x28>
 800576c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005770:	6926      	ldr	r6, [r4, #16]
 8005772:	60c5      	str	r5, [r0, #12]
 8005774:	f104 0914 	add.w	r9, r4, #20
 8005778:	f108 0514 	add.w	r5, r8, #20
 800577c:	f100 0e14 	add.w	lr, r0, #20
 8005780:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005784:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005788:	f108 0210 	add.w	r2, r8, #16
 800578c:	46f2      	mov	sl, lr
 800578e:	2100      	movs	r1, #0
 8005790:	f859 3b04 	ldr.w	r3, [r9], #4
 8005794:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005798:	fa11 f88b 	uxtah	r8, r1, fp
 800579c:	b299      	uxth	r1, r3
 800579e:	0c1b      	lsrs	r3, r3, #16
 80057a0:	eba8 0801 	sub.w	r8, r8, r1
 80057a4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80057a8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80057ac:	fa1f f888 	uxth.w	r8, r8
 80057b0:	1419      	asrs	r1, r3, #16
 80057b2:	454e      	cmp	r6, r9
 80057b4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80057b8:	f84a 3b04 	str.w	r3, [sl], #4
 80057bc:	d8e8      	bhi.n	8005790 <__mdiff+0x80>
 80057be:	1b33      	subs	r3, r6, r4
 80057c0:	3b15      	subs	r3, #21
 80057c2:	f023 0303 	bic.w	r3, r3, #3
 80057c6:	3304      	adds	r3, #4
 80057c8:	3415      	adds	r4, #21
 80057ca:	42a6      	cmp	r6, r4
 80057cc:	bf38      	it	cc
 80057ce:	2304      	movcc	r3, #4
 80057d0:	441d      	add	r5, r3
 80057d2:	4473      	add	r3, lr
 80057d4:	469e      	mov	lr, r3
 80057d6:	462e      	mov	r6, r5
 80057d8:	4566      	cmp	r6, ip
 80057da:	d30e      	bcc.n	80057fa <__mdiff+0xea>
 80057dc:	f10c 0203 	add.w	r2, ip, #3
 80057e0:	1b52      	subs	r2, r2, r5
 80057e2:	f022 0203 	bic.w	r2, r2, #3
 80057e6:	3d03      	subs	r5, #3
 80057e8:	45ac      	cmp	ip, r5
 80057ea:	bf38      	it	cc
 80057ec:	2200      	movcc	r2, #0
 80057ee:	4413      	add	r3, r2
 80057f0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80057f4:	b17a      	cbz	r2, 8005816 <__mdiff+0x106>
 80057f6:	6107      	str	r7, [r0, #16]
 80057f8:	e7a4      	b.n	8005744 <__mdiff+0x34>
 80057fa:	f856 8b04 	ldr.w	r8, [r6], #4
 80057fe:	fa11 f288 	uxtah	r2, r1, r8
 8005802:	1414      	asrs	r4, r2, #16
 8005804:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005808:	b292      	uxth	r2, r2
 800580a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800580e:	f84e 2b04 	str.w	r2, [lr], #4
 8005812:	1421      	asrs	r1, r4, #16
 8005814:	e7e0      	b.n	80057d8 <__mdiff+0xc8>
 8005816:	3f01      	subs	r7, #1
 8005818:	e7ea      	b.n	80057f0 <__mdiff+0xe0>
 800581a:	bf00      	nop
 800581c:	08007acc 	.word	0x08007acc
 8005820:	08007add 	.word	0x08007add

08005824 <__ulp>:
 8005824:	b082      	sub	sp, #8
 8005826:	ed8d 0b00 	vstr	d0, [sp]
 800582a:	9a01      	ldr	r2, [sp, #4]
 800582c:	4b0f      	ldr	r3, [pc, #60]	; (800586c <__ulp+0x48>)
 800582e:	4013      	ands	r3, r2
 8005830:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8005834:	2b00      	cmp	r3, #0
 8005836:	dc08      	bgt.n	800584a <__ulp+0x26>
 8005838:	425b      	negs	r3, r3
 800583a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800583e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005842:	da04      	bge.n	800584e <__ulp+0x2a>
 8005844:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005848:	4113      	asrs	r3, r2
 800584a:	2200      	movs	r2, #0
 800584c:	e008      	b.n	8005860 <__ulp+0x3c>
 800584e:	f1a2 0314 	sub.w	r3, r2, #20
 8005852:	2b1e      	cmp	r3, #30
 8005854:	bfda      	itte	le
 8005856:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800585a:	40da      	lsrle	r2, r3
 800585c:	2201      	movgt	r2, #1
 800585e:	2300      	movs	r3, #0
 8005860:	4619      	mov	r1, r3
 8005862:	4610      	mov	r0, r2
 8005864:	ec41 0b10 	vmov	d0, r0, r1
 8005868:	b002      	add	sp, #8
 800586a:	4770      	bx	lr
 800586c:	7ff00000 	.word	0x7ff00000

08005870 <__b2d>:
 8005870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005874:	6906      	ldr	r6, [r0, #16]
 8005876:	f100 0814 	add.w	r8, r0, #20
 800587a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800587e:	1f37      	subs	r7, r6, #4
 8005880:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005884:	4610      	mov	r0, r2
 8005886:	f7ff fd53 	bl	8005330 <__hi0bits>
 800588a:	f1c0 0320 	rsb	r3, r0, #32
 800588e:	280a      	cmp	r0, #10
 8005890:	600b      	str	r3, [r1, #0]
 8005892:	491b      	ldr	r1, [pc, #108]	; (8005900 <__b2d+0x90>)
 8005894:	dc15      	bgt.n	80058c2 <__b2d+0x52>
 8005896:	f1c0 0c0b 	rsb	ip, r0, #11
 800589a:	fa22 f30c 	lsr.w	r3, r2, ip
 800589e:	45b8      	cmp	r8, r7
 80058a0:	ea43 0501 	orr.w	r5, r3, r1
 80058a4:	bf34      	ite	cc
 80058a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80058aa:	2300      	movcs	r3, #0
 80058ac:	3015      	adds	r0, #21
 80058ae:	fa02 f000 	lsl.w	r0, r2, r0
 80058b2:	fa23 f30c 	lsr.w	r3, r3, ip
 80058b6:	4303      	orrs	r3, r0
 80058b8:	461c      	mov	r4, r3
 80058ba:	ec45 4b10 	vmov	d0, r4, r5
 80058be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058c2:	45b8      	cmp	r8, r7
 80058c4:	bf3a      	itte	cc
 80058c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80058ca:	f1a6 0708 	subcc.w	r7, r6, #8
 80058ce:	2300      	movcs	r3, #0
 80058d0:	380b      	subs	r0, #11
 80058d2:	d012      	beq.n	80058fa <__b2d+0x8a>
 80058d4:	f1c0 0120 	rsb	r1, r0, #32
 80058d8:	fa23 f401 	lsr.w	r4, r3, r1
 80058dc:	4082      	lsls	r2, r0
 80058de:	4322      	orrs	r2, r4
 80058e0:	4547      	cmp	r7, r8
 80058e2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80058e6:	bf8c      	ite	hi
 80058e8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80058ec:	2200      	movls	r2, #0
 80058ee:	4083      	lsls	r3, r0
 80058f0:	40ca      	lsrs	r2, r1
 80058f2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80058f6:	4313      	orrs	r3, r2
 80058f8:	e7de      	b.n	80058b8 <__b2d+0x48>
 80058fa:	ea42 0501 	orr.w	r5, r2, r1
 80058fe:	e7db      	b.n	80058b8 <__b2d+0x48>
 8005900:	3ff00000 	.word	0x3ff00000

08005904 <__d2b>:
 8005904:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005908:	460f      	mov	r7, r1
 800590a:	2101      	movs	r1, #1
 800590c:	ec59 8b10 	vmov	r8, r9, d0
 8005910:	4616      	mov	r6, r2
 8005912:	f7ff fc1b 	bl	800514c <_Balloc>
 8005916:	4604      	mov	r4, r0
 8005918:	b930      	cbnz	r0, 8005928 <__d2b+0x24>
 800591a:	4602      	mov	r2, r0
 800591c:	4b24      	ldr	r3, [pc, #144]	; (80059b0 <__d2b+0xac>)
 800591e:	4825      	ldr	r0, [pc, #148]	; (80059b4 <__d2b+0xb0>)
 8005920:	f240 310f 	movw	r1, #783	; 0x30f
 8005924:	f001 f9b0 	bl	8006c88 <__assert_func>
 8005928:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800592c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005930:	bb2d      	cbnz	r5, 800597e <__d2b+0x7a>
 8005932:	9301      	str	r3, [sp, #4]
 8005934:	f1b8 0300 	subs.w	r3, r8, #0
 8005938:	d026      	beq.n	8005988 <__d2b+0x84>
 800593a:	4668      	mov	r0, sp
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	f7ff fd17 	bl	8005370 <__lo0bits>
 8005942:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005946:	b1e8      	cbz	r0, 8005984 <__d2b+0x80>
 8005948:	f1c0 0320 	rsb	r3, r0, #32
 800594c:	fa02 f303 	lsl.w	r3, r2, r3
 8005950:	430b      	orrs	r3, r1
 8005952:	40c2      	lsrs	r2, r0
 8005954:	6163      	str	r3, [r4, #20]
 8005956:	9201      	str	r2, [sp, #4]
 8005958:	9b01      	ldr	r3, [sp, #4]
 800595a:	61a3      	str	r3, [r4, #24]
 800595c:	2b00      	cmp	r3, #0
 800595e:	bf14      	ite	ne
 8005960:	2202      	movne	r2, #2
 8005962:	2201      	moveq	r2, #1
 8005964:	6122      	str	r2, [r4, #16]
 8005966:	b1bd      	cbz	r5, 8005998 <__d2b+0x94>
 8005968:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800596c:	4405      	add	r5, r0
 800596e:	603d      	str	r5, [r7, #0]
 8005970:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005974:	6030      	str	r0, [r6, #0]
 8005976:	4620      	mov	r0, r4
 8005978:	b003      	add	sp, #12
 800597a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800597e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005982:	e7d6      	b.n	8005932 <__d2b+0x2e>
 8005984:	6161      	str	r1, [r4, #20]
 8005986:	e7e7      	b.n	8005958 <__d2b+0x54>
 8005988:	a801      	add	r0, sp, #4
 800598a:	f7ff fcf1 	bl	8005370 <__lo0bits>
 800598e:	9b01      	ldr	r3, [sp, #4]
 8005990:	6163      	str	r3, [r4, #20]
 8005992:	3020      	adds	r0, #32
 8005994:	2201      	movs	r2, #1
 8005996:	e7e5      	b.n	8005964 <__d2b+0x60>
 8005998:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800599c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80059a0:	6038      	str	r0, [r7, #0]
 80059a2:	6918      	ldr	r0, [r3, #16]
 80059a4:	f7ff fcc4 	bl	8005330 <__hi0bits>
 80059a8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80059ac:	e7e2      	b.n	8005974 <__d2b+0x70>
 80059ae:	bf00      	nop
 80059b0:	08007acc 	.word	0x08007acc
 80059b4:	08007add 	.word	0x08007add

080059b8 <__ratio>:
 80059b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059bc:	4688      	mov	r8, r1
 80059be:	4669      	mov	r1, sp
 80059c0:	4681      	mov	r9, r0
 80059c2:	f7ff ff55 	bl	8005870 <__b2d>
 80059c6:	a901      	add	r1, sp, #4
 80059c8:	4640      	mov	r0, r8
 80059ca:	ec55 4b10 	vmov	r4, r5, d0
 80059ce:	f7ff ff4f 	bl	8005870 <__b2d>
 80059d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80059d6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80059da:	eba3 0c02 	sub.w	ip, r3, r2
 80059de:	e9dd 3200 	ldrd	r3, r2, [sp]
 80059e2:	1a9b      	subs	r3, r3, r2
 80059e4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80059e8:	ec51 0b10 	vmov	r0, r1, d0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	bfd6      	itet	le
 80059f0:	460a      	movle	r2, r1
 80059f2:	462a      	movgt	r2, r5
 80059f4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80059f8:	468b      	mov	fp, r1
 80059fa:	462f      	mov	r7, r5
 80059fc:	bfd4      	ite	le
 80059fe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8005a02:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8005a06:	4620      	mov	r0, r4
 8005a08:	ee10 2a10 	vmov	r2, s0
 8005a0c:	465b      	mov	r3, fp
 8005a0e:	4639      	mov	r1, r7
 8005a10:	f7fa ff1c 	bl	800084c <__aeabi_ddiv>
 8005a14:	ec41 0b10 	vmov	d0, r0, r1
 8005a18:	b003      	add	sp, #12
 8005a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005a1e <__copybits>:
 8005a1e:	3901      	subs	r1, #1
 8005a20:	b570      	push	{r4, r5, r6, lr}
 8005a22:	1149      	asrs	r1, r1, #5
 8005a24:	6914      	ldr	r4, [r2, #16]
 8005a26:	3101      	adds	r1, #1
 8005a28:	f102 0314 	add.w	r3, r2, #20
 8005a2c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005a30:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005a34:	1f05      	subs	r5, r0, #4
 8005a36:	42a3      	cmp	r3, r4
 8005a38:	d30c      	bcc.n	8005a54 <__copybits+0x36>
 8005a3a:	1aa3      	subs	r3, r4, r2
 8005a3c:	3b11      	subs	r3, #17
 8005a3e:	f023 0303 	bic.w	r3, r3, #3
 8005a42:	3211      	adds	r2, #17
 8005a44:	42a2      	cmp	r2, r4
 8005a46:	bf88      	it	hi
 8005a48:	2300      	movhi	r3, #0
 8005a4a:	4418      	add	r0, r3
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	4288      	cmp	r0, r1
 8005a50:	d305      	bcc.n	8005a5e <__copybits+0x40>
 8005a52:	bd70      	pop	{r4, r5, r6, pc}
 8005a54:	f853 6b04 	ldr.w	r6, [r3], #4
 8005a58:	f845 6f04 	str.w	r6, [r5, #4]!
 8005a5c:	e7eb      	b.n	8005a36 <__copybits+0x18>
 8005a5e:	f840 3b04 	str.w	r3, [r0], #4
 8005a62:	e7f4      	b.n	8005a4e <__copybits+0x30>

08005a64 <__any_on>:
 8005a64:	f100 0214 	add.w	r2, r0, #20
 8005a68:	6900      	ldr	r0, [r0, #16]
 8005a6a:	114b      	asrs	r3, r1, #5
 8005a6c:	4298      	cmp	r0, r3
 8005a6e:	b510      	push	{r4, lr}
 8005a70:	db11      	blt.n	8005a96 <__any_on+0x32>
 8005a72:	dd0a      	ble.n	8005a8a <__any_on+0x26>
 8005a74:	f011 011f 	ands.w	r1, r1, #31
 8005a78:	d007      	beq.n	8005a8a <__any_on+0x26>
 8005a7a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005a7e:	fa24 f001 	lsr.w	r0, r4, r1
 8005a82:	fa00 f101 	lsl.w	r1, r0, r1
 8005a86:	428c      	cmp	r4, r1
 8005a88:	d10b      	bne.n	8005aa2 <__any_on+0x3e>
 8005a8a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d803      	bhi.n	8005a9a <__any_on+0x36>
 8005a92:	2000      	movs	r0, #0
 8005a94:	bd10      	pop	{r4, pc}
 8005a96:	4603      	mov	r3, r0
 8005a98:	e7f7      	b.n	8005a8a <__any_on+0x26>
 8005a9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005a9e:	2900      	cmp	r1, #0
 8005aa0:	d0f5      	beq.n	8005a8e <__any_on+0x2a>
 8005aa2:	2001      	movs	r0, #1
 8005aa4:	e7f6      	b.n	8005a94 <__any_on+0x30>

08005aa6 <sulp>:
 8005aa6:	b570      	push	{r4, r5, r6, lr}
 8005aa8:	4604      	mov	r4, r0
 8005aaa:	460d      	mov	r5, r1
 8005aac:	ec45 4b10 	vmov	d0, r4, r5
 8005ab0:	4616      	mov	r6, r2
 8005ab2:	f7ff feb7 	bl	8005824 <__ulp>
 8005ab6:	ec51 0b10 	vmov	r0, r1, d0
 8005aba:	b17e      	cbz	r6, 8005adc <sulp+0x36>
 8005abc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005ac0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	dd09      	ble.n	8005adc <sulp+0x36>
 8005ac8:	051b      	lsls	r3, r3, #20
 8005aca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005ace:	2400      	movs	r4, #0
 8005ad0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005ad4:	4622      	mov	r2, r4
 8005ad6:	462b      	mov	r3, r5
 8005ad8:	f7fa fd8e 	bl	80005f8 <__aeabi_dmul>
 8005adc:	bd70      	pop	{r4, r5, r6, pc}
	...

08005ae0 <_strtod_l>:
 8005ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae4:	ed2d 8b02 	vpush	{d8}
 8005ae8:	b09b      	sub	sp, #108	; 0x6c
 8005aea:	4604      	mov	r4, r0
 8005aec:	9213      	str	r2, [sp, #76]	; 0x4c
 8005aee:	2200      	movs	r2, #0
 8005af0:	9216      	str	r2, [sp, #88]	; 0x58
 8005af2:	460d      	mov	r5, r1
 8005af4:	f04f 0800 	mov.w	r8, #0
 8005af8:	f04f 0900 	mov.w	r9, #0
 8005afc:	460a      	mov	r2, r1
 8005afe:	9215      	str	r2, [sp, #84]	; 0x54
 8005b00:	7811      	ldrb	r1, [r2, #0]
 8005b02:	292b      	cmp	r1, #43	; 0x2b
 8005b04:	d04c      	beq.n	8005ba0 <_strtod_l+0xc0>
 8005b06:	d83a      	bhi.n	8005b7e <_strtod_l+0x9e>
 8005b08:	290d      	cmp	r1, #13
 8005b0a:	d834      	bhi.n	8005b76 <_strtod_l+0x96>
 8005b0c:	2908      	cmp	r1, #8
 8005b0e:	d834      	bhi.n	8005b7a <_strtod_l+0x9a>
 8005b10:	2900      	cmp	r1, #0
 8005b12:	d03d      	beq.n	8005b90 <_strtod_l+0xb0>
 8005b14:	2200      	movs	r2, #0
 8005b16:	920a      	str	r2, [sp, #40]	; 0x28
 8005b18:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8005b1a:	7832      	ldrb	r2, [r6, #0]
 8005b1c:	2a30      	cmp	r2, #48	; 0x30
 8005b1e:	f040 80b4 	bne.w	8005c8a <_strtod_l+0x1aa>
 8005b22:	7872      	ldrb	r2, [r6, #1]
 8005b24:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8005b28:	2a58      	cmp	r2, #88	; 0x58
 8005b2a:	d170      	bne.n	8005c0e <_strtod_l+0x12e>
 8005b2c:	9302      	str	r3, [sp, #8]
 8005b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b30:	9301      	str	r3, [sp, #4]
 8005b32:	ab16      	add	r3, sp, #88	; 0x58
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	4a8e      	ldr	r2, [pc, #568]	; (8005d70 <_strtod_l+0x290>)
 8005b38:	ab17      	add	r3, sp, #92	; 0x5c
 8005b3a:	a915      	add	r1, sp, #84	; 0x54
 8005b3c:	4620      	mov	r0, r4
 8005b3e:	f001 f93f 	bl	8006dc0 <__gethex>
 8005b42:	f010 070f 	ands.w	r7, r0, #15
 8005b46:	4605      	mov	r5, r0
 8005b48:	d005      	beq.n	8005b56 <_strtod_l+0x76>
 8005b4a:	2f06      	cmp	r7, #6
 8005b4c:	d12a      	bne.n	8005ba4 <_strtod_l+0xc4>
 8005b4e:	3601      	adds	r6, #1
 8005b50:	2300      	movs	r3, #0
 8005b52:	9615      	str	r6, [sp, #84]	; 0x54
 8005b54:	930a      	str	r3, [sp, #40]	; 0x28
 8005b56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f040 857f 	bne.w	800665c <_strtod_l+0xb7c>
 8005b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b60:	b1db      	cbz	r3, 8005b9a <_strtod_l+0xba>
 8005b62:	4642      	mov	r2, r8
 8005b64:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005b68:	ec43 2b10 	vmov	d0, r2, r3
 8005b6c:	b01b      	add	sp, #108	; 0x6c
 8005b6e:	ecbd 8b02 	vpop	{d8}
 8005b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b76:	2920      	cmp	r1, #32
 8005b78:	d1cc      	bne.n	8005b14 <_strtod_l+0x34>
 8005b7a:	3201      	adds	r2, #1
 8005b7c:	e7bf      	b.n	8005afe <_strtod_l+0x1e>
 8005b7e:	292d      	cmp	r1, #45	; 0x2d
 8005b80:	d1c8      	bne.n	8005b14 <_strtod_l+0x34>
 8005b82:	2101      	movs	r1, #1
 8005b84:	910a      	str	r1, [sp, #40]	; 0x28
 8005b86:	1c51      	adds	r1, r2, #1
 8005b88:	9115      	str	r1, [sp, #84]	; 0x54
 8005b8a:	7852      	ldrb	r2, [r2, #1]
 8005b8c:	2a00      	cmp	r2, #0
 8005b8e:	d1c3      	bne.n	8005b18 <_strtod_l+0x38>
 8005b90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005b92:	9515      	str	r5, [sp, #84]	; 0x54
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f040 855f 	bne.w	8006658 <_strtod_l+0xb78>
 8005b9a:	4642      	mov	r2, r8
 8005b9c:	464b      	mov	r3, r9
 8005b9e:	e7e3      	b.n	8005b68 <_strtod_l+0x88>
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	e7ef      	b.n	8005b84 <_strtod_l+0xa4>
 8005ba4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005ba6:	b13a      	cbz	r2, 8005bb8 <_strtod_l+0xd8>
 8005ba8:	2135      	movs	r1, #53	; 0x35
 8005baa:	a818      	add	r0, sp, #96	; 0x60
 8005bac:	f7ff ff37 	bl	8005a1e <__copybits>
 8005bb0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005bb2:	4620      	mov	r0, r4
 8005bb4:	f7ff fb0a 	bl	80051cc <_Bfree>
 8005bb8:	3f01      	subs	r7, #1
 8005bba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005bbc:	2f04      	cmp	r7, #4
 8005bbe:	d806      	bhi.n	8005bce <_strtod_l+0xee>
 8005bc0:	e8df f007 	tbb	[pc, r7]
 8005bc4:	201d0314 	.word	0x201d0314
 8005bc8:	14          	.byte	0x14
 8005bc9:	00          	.byte	0x00
 8005bca:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8005bce:	05e9      	lsls	r1, r5, #23
 8005bd0:	bf48      	it	mi
 8005bd2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8005bd6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005bda:	0d1b      	lsrs	r3, r3, #20
 8005bdc:	051b      	lsls	r3, r3, #20
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1b9      	bne.n	8005b56 <_strtod_l+0x76>
 8005be2:	f7fe fb03 	bl	80041ec <__errno>
 8005be6:	2322      	movs	r3, #34	; 0x22
 8005be8:	6003      	str	r3, [r0, #0]
 8005bea:	e7b4      	b.n	8005b56 <_strtod_l+0x76>
 8005bec:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8005bf0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005bf4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005bf8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005bfc:	e7e7      	b.n	8005bce <_strtod_l+0xee>
 8005bfe:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005d78 <_strtod_l+0x298>
 8005c02:	e7e4      	b.n	8005bce <_strtod_l+0xee>
 8005c04:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005c08:	f04f 38ff 	mov.w	r8, #4294967295
 8005c0c:	e7df      	b.n	8005bce <_strtod_l+0xee>
 8005c0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005c10:	1c5a      	adds	r2, r3, #1
 8005c12:	9215      	str	r2, [sp, #84]	; 0x54
 8005c14:	785b      	ldrb	r3, [r3, #1]
 8005c16:	2b30      	cmp	r3, #48	; 0x30
 8005c18:	d0f9      	beq.n	8005c0e <_strtod_l+0x12e>
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d09b      	beq.n	8005b56 <_strtod_l+0x76>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	f04f 0a00 	mov.w	sl, #0
 8005c24:	9304      	str	r3, [sp, #16]
 8005c26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005c28:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c2a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005c2e:	46d3      	mov	fp, sl
 8005c30:	220a      	movs	r2, #10
 8005c32:	9815      	ldr	r0, [sp, #84]	; 0x54
 8005c34:	7806      	ldrb	r6, [r0, #0]
 8005c36:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005c3a:	b2d9      	uxtb	r1, r3
 8005c3c:	2909      	cmp	r1, #9
 8005c3e:	d926      	bls.n	8005c8e <_strtod_l+0x1ae>
 8005c40:	494c      	ldr	r1, [pc, #304]	; (8005d74 <_strtod_l+0x294>)
 8005c42:	2201      	movs	r2, #1
 8005c44:	f000 ffe6 	bl	8006c14 <strncmp>
 8005c48:	2800      	cmp	r0, #0
 8005c4a:	d030      	beq.n	8005cae <_strtod_l+0x1ce>
 8005c4c:	2000      	movs	r0, #0
 8005c4e:	4632      	mov	r2, r6
 8005c50:	9005      	str	r0, [sp, #20]
 8005c52:	465e      	mov	r6, fp
 8005c54:	4603      	mov	r3, r0
 8005c56:	2a65      	cmp	r2, #101	; 0x65
 8005c58:	d001      	beq.n	8005c5e <_strtod_l+0x17e>
 8005c5a:	2a45      	cmp	r2, #69	; 0x45
 8005c5c:	d113      	bne.n	8005c86 <_strtod_l+0x1a6>
 8005c5e:	b91e      	cbnz	r6, 8005c68 <_strtod_l+0x188>
 8005c60:	9a04      	ldr	r2, [sp, #16]
 8005c62:	4302      	orrs	r2, r0
 8005c64:	d094      	beq.n	8005b90 <_strtod_l+0xb0>
 8005c66:	2600      	movs	r6, #0
 8005c68:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8005c6a:	1c6a      	adds	r2, r5, #1
 8005c6c:	9215      	str	r2, [sp, #84]	; 0x54
 8005c6e:	786a      	ldrb	r2, [r5, #1]
 8005c70:	2a2b      	cmp	r2, #43	; 0x2b
 8005c72:	d074      	beq.n	8005d5e <_strtod_l+0x27e>
 8005c74:	2a2d      	cmp	r2, #45	; 0x2d
 8005c76:	d078      	beq.n	8005d6a <_strtod_l+0x28a>
 8005c78:	f04f 0c00 	mov.w	ip, #0
 8005c7c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005c80:	2909      	cmp	r1, #9
 8005c82:	d97f      	bls.n	8005d84 <_strtod_l+0x2a4>
 8005c84:	9515      	str	r5, [sp, #84]	; 0x54
 8005c86:	2700      	movs	r7, #0
 8005c88:	e09e      	b.n	8005dc8 <_strtod_l+0x2e8>
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	e7c8      	b.n	8005c20 <_strtod_l+0x140>
 8005c8e:	f1bb 0f08 	cmp.w	fp, #8
 8005c92:	bfd8      	it	le
 8005c94:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8005c96:	f100 0001 	add.w	r0, r0, #1
 8005c9a:	bfda      	itte	le
 8005c9c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005ca0:	9309      	strle	r3, [sp, #36]	; 0x24
 8005ca2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8005ca6:	f10b 0b01 	add.w	fp, fp, #1
 8005caa:	9015      	str	r0, [sp, #84]	; 0x54
 8005cac:	e7c1      	b.n	8005c32 <_strtod_l+0x152>
 8005cae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005cb0:	1c5a      	adds	r2, r3, #1
 8005cb2:	9215      	str	r2, [sp, #84]	; 0x54
 8005cb4:	785a      	ldrb	r2, [r3, #1]
 8005cb6:	f1bb 0f00 	cmp.w	fp, #0
 8005cba:	d037      	beq.n	8005d2c <_strtod_l+0x24c>
 8005cbc:	9005      	str	r0, [sp, #20]
 8005cbe:	465e      	mov	r6, fp
 8005cc0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005cc4:	2b09      	cmp	r3, #9
 8005cc6:	d912      	bls.n	8005cee <_strtod_l+0x20e>
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e7c4      	b.n	8005c56 <_strtod_l+0x176>
 8005ccc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005cce:	1c5a      	adds	r2, r3, #1
 8005cd0:	9215      	str	r2, [sp, #84]	; 0x54
 8005cd2:	785a      	ldrb	r2, [r3, #1]
 8005cd4:	3001      	adds	r0, #1
 8005cd6:	2a30      	cmp	r2, #48	; 0x30
 8005cd8:	d0f8      	beq.n	8005ccc <_strtod_l+0x1ec>
 8005cda:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005cde:	2b08      	cmp	r3, #8
 8005ce0:	f200 84c1 	bhi.w	8006666 <_strtod_l+0xb86>
 8005ce4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005ce6:	9005      	str	r0, [sp, #20]
 8005ce8:	2000      	movs	r0, #0
 8005cea:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cec:	4606      	mov	r6, r0
 8005cee:	3a30      	subs	r2, #48	; 0x30
 8005cf0:	f100 0301 	add.w	r3, r0, #1
 8005cf4:	d014      	beq.n	8005d20 <_strtod_l+0x240>
 8005cf6:	9905      	ldr	r1, [sp, #20]
 8005cf8:	4419      	add	r1, r3
 8005cfa:	9105      	str	r1, [sp, #20]
 8005cfc:	4633      	mov	r3, r6
 8005cfe:	eb00 0c06 	add.w	ip, r0, r6
 8005d02:	210a      	movs	r1, #10
 8005d04:	4563      	cmp	r3, ip
 8005d06:	d113      	bne.n	8005d30 <_strtod_l+0x250>
 8005d08:	1833      	adds	r3, r6, r0
 8005d0a:	2b08      	cmp	r3, #8
 8005d0c:	f106 0601 	add.w	r6, r6, #1
 8005d10:	4406      	add	r6, r0
 8005d12:	dc1a      	bgt.n	8005d4a <_strtod_l+0x26a>
 8005d14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d16:	230a      	movs	r3, #10
 8005d18:	fb03 2301 	mla	r3, r3, r1, r2
 8005d1c:	9309      	str	r3, [sp, #36]	; 0x24
 8005d1e:	2300      	movs	r3, #0
 8005d20:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005d22:	1c51      	adds	r1, r2, #1
 8005d24:	9115      	str	r1, [sp, #84]	; 0x54
 8005d26:	7852      	ldrb	r2, [r2, #1]
 8005d28:	4618      	mov	r0, r3
 8005d2a:	e7c9      	b.n	8005cc0 <_strtod_l+0x1e0>
 8005d2c:	4658      	mov	r0, fp
 8005d2e:	e7d2      	b.n	8005cd6 <_strtod_l+0x1f6>
 8005d30:	2b08      	cmp	r3, #8
 8005d32:	f103 0301 	add.w	r3, r3, #1
 8005d36:	dc03      	bgt.n	8005d40 <_strtod_l+0x260>
 8005d38:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005d3a:	434f      	muls	r7, r1
 8005d3c:	9709      	str	r7, [sp, #36]	; 0x24
 8005d3e:	e7e1      	b.n	8005d04 <_strtod_l+0x224>
 8005d40:	2b10      	cmp	r3, #16
 8005d42:	bfd8      	it	le
 8005d44:	fb01 fa0a 	mulle.w	sl, r1, sl
 8005d48:	e7dc      	b.n	8005d04 <_strtod_l+0x224>
 8005d4a:	2e10      	cmp	r6, #16
 8005d4c:	bfdc      	itt	le
 8005d4e:	230a      	movle	r3, #10
 8005d50:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8005d54:	e7e3      	b.n	8005d1e <_strtod_l+0x23e>
 8005d56:	2300      	movs	r3, #0
 8005d58:	9305      	str	r3, [sp, #20]
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e780      	b.n	8005c60 <_strtod_l+0x180>
 8005d5e:	f04f 0c00 	mov.w	ip, #0
 8005d62:	1caa      	adds	r2, r5, #2
 8005d64:	9215      	str	r2, [sp, #84]	; 0x54
 8005d66:	78aa      	ldrb	r2, [r5, #2]
 8005d68:	e788      	b.n	8005c7c <_strtod_l+0x19c>
 8005d6a:	f04f 0c01 	mov.w	ip, #1
 8005d6e:	e7f8      	b.n	8005d62 <_strtod_l+0x282>
 8005d70:	08007c38 	.word	0x08007c38
 8005d74:	08007c34 	.word	0x08007c34
 8005d78:	7ff00000 	.word	0x7ff00000
 8005d7c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005d7e:	1c51      	adds	r1, r2, #1
 8005d80:	9115      	str	r1, [sp, #84]	; 0x54
 8005d82:	7852      	ldrb	r2, [r2, #1]
 8005d84:	2a30      	cmp	r2, #48	; 0x30
 8005d86:	d0f9      	beq.n	8005d7c <_strtod_l+0x29c>
 8005d88:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005d8c:	2908      	cmp	r1, #8
 8005d8e:	f63f af7a 	bhi.w	8005c86 <_strtod_l+0x1a6>
 8005d92:	3a30      	subs	r2, #48	; 0x30
 8005d94:	9208      	str	r2, [sp, #32]
 8005d96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005d98:	920c      	str	r2, [sp, #48]	; 0x30
 8005d9a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005d9c:	1c57      	adds	r7, r2, #1
 8005d9e:	9715      	str	r7, [sp, #84]	; 0x54
 8005da0:	7852      	ldrb	r2, [r2, #1]
 8005da2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005da6:	f1be 0f09 	cmp.w	lr, #9
 8005daa:	d938      	bls.n	8005e1e <_strtod_l+0x33e>
 8005dac:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005dae:	1a7f      	subs	r7, r7, r1
 8005db0:	2f08      	cmp	r7, #8
 8005db2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005db6:	dc03      	bgt.n	8005dc0 <_strtod_l+0x2e0>
 8005db8:	9908      	ldr	r1, [sp, #32]
 8005dba:	428f      	cmp	r7, r1
 8005dbc:	bfa8      	it	ge
 8005dbe:	460f      	movge	r7, r1
 8005dc0:	f1bc 0f00 	cmp.w	ip, #0
 8005dc4:	d000      	beq.n	8005dc8 <_strtod_l+0x2e8>
 8005dc6:	427f      	negs	r7, r7
 8005dc8:	2e00      	cmp	r6, #0
 8005dca:	d14f      	bne.n	8005e6c <_strtod_l+0x38c>
 8005dcc:	9904      	ldr	r1, [sp, #16]
 8005dce:	4301      	orrs	r1, r0
 8005dd0:	f47f aec1 	bne.w	8005b56 <_strtod_l+0x76>
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f47f aedb 	bne.w	8005b90 <_strtod_l+0xb0>
 8005dda:	2a69      	cmp	r2, #105	; 0x69
 8005ddc:	d029      	beq.n	8005e32 <_strtod_l+0x352>
 8005dde:	dc26      	bgt.n	8005e2e <_strtod_l+0x34e>
 8005de0:	2a49      	cmp	r2, #73	; 0x49
 8005de2:	d026      	beq.n	8005e32 <_strtod_l+0x352>
 8005de4:	2a4e      	cmp	r2, #78	; 0x4e
 8005de6:	f47f aed3 	bne.w	8005b90 <_strtod_l+0xb0>
 8005dea:	499b      	ldr	r1, [pc, #620]	; (8006058 <_strtod_l+0x578>)
 8005dec:	a815      	add	r0, sp, #84	; 0x54
 8005dee:	f001 fa27 	bl	8007240 <__match>
 8005df2:	2800      	cmp	r0, #0
 8005df4:	f43f aecc 	beq.w	8005b90 <_strtod_l+0xb0>
 8005df8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	2b28      	cmp	r3, #40	; 0x28
 8005dfe:	d12f      	bne.n	8005e60 <_strtod_l+0x380>
 8005e00:	4996      	ldr	r1, [pc, #600]	; (800605c <_strtod_l+0x57c>)
 8005e02:	aa18      	add	r2, sp, #96	; 0x60
 8005e04:	a815      	add	r0, sp, #84	; 0x54
 8005e06:	f001 fa2f 	bl	8007268 <__hexnan>
 8005e0a:	2805      	cmp	r0, #5
 8005e0c:	d128      	bne.n	8005e60 <_strtod_l+0x380>
 8005e0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005e10:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005e14:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005e18:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005e1c:	e69b      	b.n	8005b56 <_strtod_l+0x76>
 8005e1e:	9f08      	ldr	r7, [sp, #32]
 8005e20:	210a      	movs	r1, #10
 8005e22:	fb01 2107 	mla	r1, r1, r7, r2
 8005e26:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8005e2a:	9208      	str	r2, [sp, #32]
 8005e2c:	e7b5      	b.n	8005d9a <_strtod_l+0x2ba>
 8005e2e:	2a6e      	cmp	r2, #110	; 0x6e
 8005e30:	e7d9      	b.n	8005de6 <_strtod_l+0x306>
 8005e32:	498b      	ldr	r1, [pc, #556]	; (8006060 <_strtod_l+0x580>)
 8005e34:	a815      	add	r0, sp, #84	; 0x54
 8005e36:	f001 fa03 	bl	8007240 <__match>
 8005e3a:	2800      	cmp	r0, #0
 8005e3c:	f43f aea8 	beq.w	8005b90 <_strtod_l+0xb0>
 8005e40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005e42:	4988      	ldr	r1, [pc, #544]	; (8006064 <_strtod_l+0x584>)
 8005e44:	3b01      	subs	r3, #1
 8005e46:	a815      	add	r0, sp, #84	; 0x54
 8005e48:	9315      	str	r3, [sp, #84]	; 0x54
 8005e4a:	f001 f9f9 	bl	8007240 <__match>
 8005e4e:	b910      	cbnz	r0, 8005e56 <_strtod_l+0x376>
 8005e50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005e52:	3301      	adds	r3, #1
 8005e54:	9315      	str	r3, [sp, #84]	; 0x54
 8005e56:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8006074 <_strtod_l+0x594>
 8005e5a:	f04f 0800 	mov.w	r8, #0
 8005e5e:	e67a      	b.n	8005b56 <_strtod_l+0x76>
 8005e60:	4881      	ldr	r0, [pc, #516]	; (8006068 <_strtod_l+0x588>)
 8005e62:	f000 ff09 	bl	8006c78 <nan>
 8005e66:	ec59 8b10 	vmov	r8, r9, d0
 8005e6a:	e674      	b.n	8005b56 <_strtod_l+0x76>
 8005e6c:	9b05      	ldr	r3, [sp, #20]
 8005e6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e70:	1afb      	subs	r3, r7, r3
 8005e72:	f1bb 0f00 	cmp.w	fp, #0
 8005e76:	bf08      	it	eq
 8005e78:	46b3      	moveq	fp, r6
 8005e7a:	2e10      	cmp	r6, #16
 8005e7c:	9308      	str	r3, [sp, #32]
 8005e7e:	4635      	mov	r5, r6
 8005e80:	bfa8      	it	ge
 8005e82:	2510      	movge	r5, #16
 8005e84:	f7fa fb3e 	bl	8000504 <__aeabi_ui2d>
 8005e88:	2e09      	cmp	r6, #9
 8005e8a:	4680      	mov	r8, r0
 8005e8c:	4689      	mov	r9, r1
 8005e8e:	dd13      	ble.n	8005eb8 <_strtod_l+0x3d8>
 8005e90:	4b76      	ldr	r3, [pc, #472]	; (800606c <_strtod_l+0x58c>)
 8005e92:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005e96:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005e9a:	f7fa fbad 	bl	80005f8 <__aeabi_dmul>
 8005e9e:	4680      	mov	r8, r0
 8005ea0:	4650      	mov	r0, sl
 8005ea2:	4689      	mov	r9, r1
 8005ea4:	f7fa fb2e 	bl	8000504 <__aeabi_ui2d>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	460b      	mov	r3, r1
 8005eac:	4640      	mov	r0, r8
 8005eae:	4649      	mov	r1, r9
 8005eb0:	f7fa f9ec 	bl	800028c <__adddf3>
 8005eb4:	4680      	mov	r8, r0
 8005eb6:	4689      	mov	r9, r1
 8005eb8:	2e0f      	cmp	r6, #15
 8005eba:	dc38      	bgt.n	8005f2e <_strtod_l+0x44e>
 8005ebc:	9b08      	ldr	r3, [sp, #32]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f43f ae49 	beq.w	8005b56 <_strtod_l+0x76>
 8005ec4:	dd24      	ble.n	8005f10 <_strtod_l+0x430>
 8005ec6:	2b16      	cmp	r3, #22
 8005ec8:	dc0b      	bgt.n	8005ee2 <_strtod_l+0x402>
 8005eca:	4968      	ldr	r1, [pc, #416]	; (800606c <_strtod_l+0x58c>)
 8005ecc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005ed0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ed4:	4642      	mov	r2, r8
 8005ed6:	464b      	mov	r3, r9
 8005ed8:	f7fa fb8e 	bl	80005f8 <__aeabi_dmul>
 8005edc:	4680      	mov	r8, r0
 8005ede:	4689      	mov	r9, r1
 8005ee0:	e639      	b.n	8005b56 <_strtod_l+0x76>
 8005ee2:	9a08      	ldr	r2, [sp, #32]
 8005ee4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	db20      	blt.n	8005f2e <_strtod_l+0x44e>
 8005eec:	4c5f      	ldr	r4, [pc, #380]	; (800606c <_strtod_l+0x58c>)
 8005eee:	f1c6 060f 	rsb	r6, r6, #15
 8005ef2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8005ef6:	4642      	mov	r2, r8
 8005ef8:	464b      	mov	r3, r9
 8005efa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005efe:	f7fa fb7b 	bl	80005f8 <__aeabi_dmul>
 8005f02:	9b08      	ldr	r3, [sp, #32]
 8005f04:	1b9e      	subs	r6, r3, r6
 8005f06:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8005f0a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005f0e:	e7e3      	b.n	8005ed8 <_strtod_l+0x3f8>
 8005f10:	9b08      	ldr	r3, [sp, #32]
 8005f12:	3316      	adds	r3, #22
 8005f14:	db0b      	blt.n	8005f2e <_strtod_l+0x44e>
 8005f16:	9b05      	ldr	r3, [sp, #20]
 8005f18:	1bdf      	subs	r7, r3, r7
 8005f1a:	4b54      	ldr	r3, [pc, #336]	; (800606c <_strtod_l+0x58c>)
 8005f1c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f24:	4640      	mov	r0, r8
 8005f26:	4649      	mov	r1, r9
 8005f28:	f7fa fc90 	bl	800084c <__aeabi_ddiv>
 8005f2c:	e7d6      	b.n	8005edc <_strtod_l+0x3fc>
 8005f2e:	9b08      	ldr	r3, [sp, #32]
 8005f30:	1b75      	subs	r5, r6, r5
 8005f32:	441d      	add	r5, r3
 8005f34:	2d00      	cmp	r5, #0
 8005f36:	dd70      	ble.n	800601a <_strtod_l+0x53a>
 8005f38:	f015 030f 	ands.w	r3, r5, #15
 8005f3c:	d00a      	beq.n	8005f54 <_strtod_l+0x474>
 8005f3e:	494b      	ldr	r1, [pc, #300]	; (800606c <_strtod_l+0x58c>)
 8005f40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005f44:	4642      	mov	r2, r8
 8005f46:	464b      	mov	r3, r9
 8005f48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f4c:	f7fa fb54 	bl	80005f8 <__aeabi_dmul>
 8005f50:	4680      	mov	r8, r0
 8005f52:	4689      	mov	r9, r1
 8005f54:	f035 050f 	bics.w	r5, r5, #15
 8005f58:	d04d      	beq.n	8005ff6 <_strtod_l+0x516>
 8005f5a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8005f5e:	dd22      	ble.n	8005fa6 <_strtod_l+0x4c6>
 8005f60:	2500      	movs	r5, #0
 8005f62:	46ab      	mov	fp, r5
 8005f64:	9509      	str	r5, [sp, #36]	; 0x24
 8005f66:	9505      	str	r5, [sp, #20]
 8005f68:	2322      	movs	r3, #34	; 0x22
 8005f6a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8006074 <_strtod_l+0x594>
 8005f6e:	6023      	str	r3, [r4, #0]
 8005f70:	f04f 0800 	mov.w	r8, #0
 8005f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f43f aded 	beq.w	8005b56 <_strtod_l+0x76>
 8005f7c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005f7e:	4620      	mov	r0, r4
 8005f80:	f7ff f924 	bl	80051cc <_Bfree>
 8005f84:	9905      	ldr	r1, [sp, #20]
 8005f86:	4620      	mov	r0, r4
 8005f88:	f7ff f920 	bl	80051cc <_Bfree>
 8005f8c:	4659      	mov	r1, fp
 8005f8e:	4620      	mov	r0, r4
 8005f90:	f7ff f91c 	bl	80051cc <_Bfree>
 8005f94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f96:	4620      	mov	r0, r4
 8005f98:	f7ff f918 	bl	80051cc <_Bfree>
 8005f9c:	4629      	mov	r1, r5
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	f7ff f914 	bl	80051cc <_Bfree>
 8005fa4:	e5d7      	b.n	8005b56 <_strtod_l+0x76>
 8005fa6:	4b32      	ldr	r3, [pc, #200]	; (8006070 <_strtod_l+0x590>)
 8005fa8:	9304      	str	r3, [sp, #16]
 8005faa:	2300      	movs	r3, #0
 8005fac:	112d      	asrs	r5, r5, #4
 8005fae:	4640      	mov	r0, r8
 8005fb0:	4649      	mov	r1, r9
 8005fb2:	469a      	mov	sl, r3
 8005fb4:	2d01      	cmp	r5, #1
 8005fb6:	dc21      	bgt.n	8005ffc <_strtod_l+0x51c>
 8005fb8:	b10b      	cbz	r3, 8005fbe <_strtod_l+0x4de>
 8005fba:	4680      	mov	r8, r0
 8005fbc:	4689      	mov	r9, r1
 8005fbe:	492c      	ldr	r1, [pc, #176]	; (8006070 <_strtod_l+0x590>)
 8005fc0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005fc4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005fc8:	4642      	mov	r2, r8
 8005fca:	464b      	mov	r3, r9
 8005fcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fd0:	f7fa fb12 	bl	80005f8 <__aeabi_dmul>
 8005fd4:	4b27      	ldr	r3, [pc, #156]	; (8006074 <_strtod_l+0x594>)
 8005fd6:	460a      	mov	r2, r1
 8005fd8:	400b      	ands	r3, r1
 8005fda:	4927      	ldr	r1, [pc, #156]	; (8006078 <_strtod_l+0x598>)
 8005fdc:	428b      	cmp	r3, r1
 8005fde:	4680      	mov	r8, r0
 8005fe0:	d8be      	bhi.n	8005f60 <_strtod_l+0x480>
 8005fe2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005fe6:	428b      	cmp	r3, r1
 8005fe8:	bf86      	itte	hi
 8005fea:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800607c <_strtod_l+0x59c>
 8005fee:	f04f 38ff 	movhi.w	r8, #4294967295
 8005ff2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	9304      	str	r3, [sp, #16]
 8005ffa:	e07b      	b.n	80060f4 <_strtod_l+0x614>
 8005ffc:	07ea      	lsls	r2, r5, #31
 8005ffe:	d505      	bpl.n	800600c <_strtod_l+0x52c>
 8006000:	9b04      	ldr	r3, [sp, #16]
 8006002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006006:	f7fa faf7 	bl	80005f8 <__aeabi_dmul>
 800600a:	2301      	movs	r3, #1
 800600c:	9a04      	ldr	r2, [sp, #16]
 800600e:	3208      	adds	r2, #8
 8006010:	f10a 0a01 	add.w	sl, sl, #1
 8006014:	106d      	asrs	r5, r5, #1
 8006016:	9204      	str	r2, [sp, #16]
 8006018:	e7cc      	b.n	8005fb4 <_strtod_l+0x4d4>
 800601a:	d0ec      	beq.n	8005ff6 <_strtod_l+0x516>
 800601c:	426d      	negs	r5, r5
 800601e:	f015 020f 	ands.w	r2, r5, #15
 8006022:	d00a      	beq.n	800603a <_strtod_l+0x55a>
 8006024:	4b11      	ldr	r3, [pc, #68]	; (800606c <_strtod_l+0x58c>)
 8006026:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800602a:	4640      	mov	r0, r8
 800602c:	4649      	mov	r1, r9
 800602e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006032:	f7fa fc0b 	bl	800084c <__aeabi_ddiv>
 8006036:	4680      	mov	r8, r0
 8006038:	4689      	mov	r9, r1
 800603a:	112d      	asrs	r5, r5, #4
 800603c:	d0db      	beq.n	8005ff6 <_strtod_l+0x516>
 800603e:	2d1f      	cmp	r5, #31
 8006040:	dd1e      	ble.n	8006080 <_strtod_l+0x5a0>
 8006042:	2500      	movs	r5, #0
 8006044:	46ab      	mov	fp, r5
 8006046:	9509      	str	r5, [sp, #36]	; 0x24
 8006048:	9505      	str	r5, [sp, #20]
 800604a:	2322      	movs	r3, #34	; 0x22
 800604c:	f04f 0800 	mov.w	r8, #0
 8006050:	f04f 0900 	mov.w	r9, #0
 8006054:	6023      	str	r3, [r4, #0]
 8006056:	e78d      	b.n	8005f74 <_strtod_l+0x494>
 8006058:	08007a24 	.word	0x08007a24
 800605c:	08007c4c 	.word	0x08007c4c
 8006060:	08007a1c 	.word	0x08007a1c
 8006064:	08007a53 	.word	0x08007a53
 8006068:	08007ddd 	.word	0x08007ddd
 800606c:	08007b60 	.word	0x08007b60
 8006070:	08007b38 	.word	0x08007b38
 8006074:	7ff00000 	.word	0x7ff00000
 8006078:	7ca00000 	.word	0x7ca00000
 800607c:	7fefffff 	.word	0x7fefffff
 8006080:	f015 0310 	ands.w	r3, r5, #16
 8006084:	bf18      	it	ne
 8006086:	236a      	movne	r3, #106	; 0x6a
 8006088:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800642c <_strtod_l+0x94c>
 800608c:	9304      	str	r3, [sp, #16]
 800608e:	4640      	mov	r0, r8
 8006090:	4649      	mov	r1, r9
 8006092:	2300      	movs	r3, #0
 8006094:	07ea      	lsls	r2, r5, #31
 8006096:	d504      	bpl.n	80060a2 <_strtod_l+0x5c2>
 8006098:	e9da 2300 	ldrd	r2, r3, [sl]
 800609c:	f7fa faac 	bl	80005f8 <__aeabi_dmul>
 80060a0:	2301      	movs	r3, #1
 80060a2:	106d      	asrs	r5, r5, #1
 80060a4:	f10a 0a08 	add.w	sl, sl, #8
 80060a8:	d1f4      	bne.n	8006094 <_strtod_l+0x5b4>
 80060aa:	b10b      	cbz	r3, 80060b0 <_strtod_l+0x5d0>
 80060ac:	4680      	mov	r8, r0
 80060ae:	4689      	mov	r9, r1
 80060b0:	9b04      	ldr	r3, [sp, #16]
 80060b2:	b1bb      	cbz	r3, 80060e4 <_strtod_l+0x604>
 80060b4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80060b8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80060bc:	2b00      	cmp	r3, #0
 80060be:	4649      	mov	r1, r9
 80060c0:	dd10      	ble.n	80060e4 <_strtod_l+0x604>
 80060c2:	2b1f      	cmp	r3, #31
 80060c4:	f340 811e 	ble.w	8006304 <_strtod_l+0x824>
 80060c8:	2b34      	cmp	r3, #52	; 0x34
 80060ca:	bfde      	ittt	le
 80060cc:	f04f 33ff 	movle.w	r3, #4294967295
 80060d0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80060d4:	4093      	lslle	r3, r2
 80060d6:	f04f 0800 	mov.w	r8, #0
 80060da:	bfcc      	ite	gt
 80060dc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80060e0:	ea03 0901 	andle.w	r9, r3, r1
 80060e4:	2200      	movs	r2, #0
 80060e6:	2300      	movs	r3, #0
 80060e8:	4640      	mov	r0, r8
 80060ea:	4649      	mov	r1, r9
 80060ec:	f7fa fcec 	bl	8000ac8 <__aeabi_dcmpeq>
 80060f0:	2800      	cmp	r0, #0
 80060f2:	d1a6      	bne.n	8006042 <_strtod_l+0x562>
 80060f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060f6:	9300      	str	r3, [sp, #0]
 80060f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80060fa:	4633      	mov	r3, r6
 80060fc:	465a      	mov	r2, fp
 80060fe:	4620      	mov	r0, r4
 8006100:	f7ff f8cc 	bl	800529c <__s2b>
 8006104:	9009      	str	r0, [sp, #36]	; 0x24
 8006106:	2800      	cmp	r0, #0
 8006108:	f43f af2a 	beq.w	8005f60 <_strtod_l+0x480>
 800610c:	9a08      	ldr	r2, [sp, #32]
 800610e:	9b05      	ldr	r3, [sp, #20]
 8006110:	2a00      	cmp	r2, #0
 8006112:	eba3 0307 	sub.w	r3, r3, r7
 8006116:	bfa8      	it	ge
 8006118:	2300      	movge	r3, #0
 800611a:	930c      	str	r3, [sp, #48]	; 0x30
 800611c:	2500      	movs	r5, #0
 800611e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006122:	9312      	str	r3, [sp, #72]	; 0x48
 8006124:	46ab      	mov	fp, r5
 8006126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006128:	4620      	mov	r0, r4
 800612a:	6859      	ldr	r1, [r3, #4]
 800612c:	f7ff f80e 	bl	800514c <_Balloc>
 8006130:	9005      	str	r0, [sp, #20]
 8006132:	2800      	cmp	r0, #0
 8006134:	f43f af18 	beq.w	8005f68 <_strtod_l+0x488>
 8006138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800613a:	691a      	ldr	r2, [r3, #16]
 800613c:	3202      	adds	r2, #2
 800613e:	f103 010c 	add.w	r1, r3, #12
 8006142:	0092      	lsls	r2, r2, #2
 8006144:	300c      	adds	r0, #12
 8006146:	f000 fd87 	bl	8006c58 <memcpy>
 800614a:	ec49 8b10 	vmov	d0, r8, r9
 800614e:	aa18      	add	r2, sp, #96	; 0x60
 8006150:	a917      	add	r1, sp, #92	; 0x5c
 8006152:	4620      	mov	r0, r4
 8006154:	f7ff fbd6 	bl	8005904 <__d2b>
 8006158:	ec49 8b18 	vmov	d8, r8, r9
 800615c:	9016      	str	r0, [sp, #88]	; 0x58
 800615e:	2800      	cmp	r0, #0
 8006160:	f43f af02 	beq.w	8005f68 <_strtod_l+0x488>
 8006164:	2101      	movs	r1, #1
 8006166:	4620      	mov	r0, r4
 8006168:	f7ff f930 	bl	80053cc <__i2b>
 800616c:	4683      	mov	fp, r0
 800616e:	2800      	cmp	r0, #0
 8006170:	f43f aefa 	beq.w	8005f68 <_strtod_l+0x488>
 8006174:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006176:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006178:	2e00      	cmp	r6, #0
 800617a:	bfab      	itete	ge
 800617c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800617e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8006180:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006182:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8006186:	bfac      	ite	ge
 8006188:	eb06 0a03 	addge.w	sl, r6, r3
 800618c:	1b9f      	sublt	r7, r3, r6
 800618e:	9b04      	ldr	r3, [sp, #16]
 8006190:	1af6      	subs	r6, r6, r3
 8006192:	4416      	add	r6, r2
 8006194:	4ba0      	ldr	r3, [pc, #640]	; (8006418 <_strtod_l+0x938>)
 8006196:	3e01      	subs	r6, #1
 8006198:	429e      	cmp	r6, r3
 800619a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800619e:	f280 80c4 	bge.w	800632a <_strtod_l+0x84a>
 80061a2:	1b9b      	subs	r3, r3, r6
 80061a4:	2b1f      	cmp	r3, #31
 80061a6:	eba2 0203 	sub.w	r2, r2, r3
 80061aa:	f04f 0101 	mov.w	r1, #1
 80061ae:	f300 80b0 	bgt.w	8006312 <_strtod_l+0x832>
 80061b2:	fa01 f303 	lsl.w	r3, r1, r3
 80061b6:	930e      	str	r3, [sp, #56]	; 0x38
 80061b8:	2300      	movs	r3, #0
 80061ba:	930d      	str	r3, [sp, #52]	; 0x34
 80061bc:	eb0a 0602 	add.w	r6, sl, r2
 80061c0:	9b04      	ldr	r3, [sp, #16]
 80061c2:	45b2      	cmp	sl, r6
 80061c4:	4417      	add	r7, r2
 80061c6:	441f      	add	r7, r3
 80061c8:	4653      	mov	r3, sl
 80061ca:	bfa8      	it	ge
 80061cc:	4633      	movge	r3, r6
 80061ce:	42bb      	cmp	r3, r7
 80061d0:	bfa8      	it	ge
 80061d2:	463b      	movge	r3, r7
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	bfc2      	ittt	gt
 80061d8:	1af6      	subgt	r6, r6, r3
 80061da:	1aff      	subgt	r7, r7, r3
 80061dc:	ebaa 0a03 	subgt.w	sl, sl, r3
 80061e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	dd17      	ble.n	8006216 <_strtod_l+0x736>
 80061e6:	4659      	mov	r1, fp
 80061e8:	461a      	mov	r2, r3
 80061ea:	4620      	mov	r0, r4
 80061ec:	f7ff f9ae 	bl	800554c <__pow5mult>
 80061f0:	4683      	mov	fp, r0
 80061f2:	2800      	cmp	r0, #0
 80061f4:	f43f aeb8 	beq.w	8005f68 <_strtod_l+0x488>
 80061f8:	4601      	mov	r1, r0
 80061fa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80061fc:	4620      	mov	r0, r4
 80061fe:	f7ff f8fb 	bl	80053f8 <__multiply>
 8006202:	900b      	str	r0, [sp, #44]	; 0x2c
 8006204:	2800      	cmp	r0, #0
 8006206:	f43f aeaf 	beq.w	8005f68 <_strtod_l+0x488>
 800620a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800620c:	4620      	mov	r0, r4
 800620e:	f7fe ffdd 	bl	80051cc <_Bfree>
 8006212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006214:	9316      	str	r3, [sp, #88]	; 0x58
 8006216:	2e00      	cmp	r6, #0
 8006218:	f300 808c 	bgt.w	8006334 <_strtod_l+0x854>
 800621c:	9b08      	ldr	r3, [sp, #32]
 800621e:	2b00      	cmp	r3, #0
 8006220:	dd08      	ble.n	8006234 <_strtod_l+0x754>
 8006222:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006224:	9905      	ldr	r1, [sp, #20]
 8006226:	4620      	mov	r0, r4
 8006228:	f7ff f990 	bl	800554c <__pow5mult>
 800622c:	9005      	str	r0, [sp, #20]
 800622e:	2800      	cmp	r0, #0
 8006230:	f43f ae9a 	beq.w	8005f68 <_strtod_l+0x488>
 8006234:	2f00      	cmp	r7, #0
 8006236:	dd08      	ble.n	800624a <_strtod_l+0x76a>
 8006238:	9905      	ldr	r1, [sp, #20]
 800623a:	463a      	mov	r2, r7
 800623c:	4620      	mov	r0, r4
 800623e:	f7ff f9df 	bl	8005600 <__lshift>
 8006242:	9005      	str	r0, [sp, #20]
 8006244:	2800      	cmp	r0, #0
 8006246:	f43f ae8f 	beq.w	8005f68 <_strtod_l+0x488>
 800624a:	f1ba 0f00 	cmp.w	sl, #0
 800624e:	dd08      	ble.n	8006262 <_strtod_l+0x782>
 8006250:	4659      	mov	r1, fp
 8006252:	4652      	mov	r2, sl
 8006254:	4620      	mov	r0, r4
 8006256:	f7ff f9d3 	bl	8005600 <__lshift>
 800625a:	4683      	mov	fp, r0
 800625c:	2800      	cmp	r0, #0
 800625e:	f43f ae83 	beq.w	8005f68 <_strtod_l+0x488>
 8006262:	9a05      	ldr	r2, [sp, #20]
 8006264:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006266:	4620      	mov	r0, r4
 8006268:	f7ff fa52 	bl	8005710 <__mdiff>
 800626c:	4605      	mov	r5, r0
 800626e:	2800      	cmp	r0, #0
 8006270:	f43f ae7a 	beq.w	8005f68 <_strtod_l+0x488>
 8006274:	68c3      	ldr	r3, [r0, #12]
 8006276:	930b      	str	r3, [sp, #44]	; 0x2c
 8006278:	2300      	movs	r3, #0
 800627a:	60c3      	str	r3, [r0, #12]
 800627c:	4659      	mov	r1, fp
 800627e:	f7ff fa2b 	bl	80056d8 <__mcmp>
 8006282:	2800      	cmp	r0, #0
 8006284:	da60      	bge.n	8006348 <_strtod_l+0x868>
 8006286:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006288:	ea53 0308 	orrs.w	r3, r3, r8
 800628c:	f040 8084 	bne.w	8006398 <_strtod_l+0x8b8>
 8006290:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006294:	2b00      	cmp	r3, #0
 8006296:	d17f      	bne.n	8006398 <_strtod_l+0x8b8>
 8006298:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800629c:	0d1b      	lsrs	r3, r3, #20
 800629e:	051b      	lsls	r3, r3, #20
 80062a0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80062a4:	d978      	bls.n	8006398 <_strtod_l+0x8b8>
 80062a6:	696b      	ldr	r3, [r5, #20]
 80062a8:	b913      	cbnz	r3, 80062b0 <_strtod_l+0x7d0>
 80062aa:	692b      	ldr	r3, [r5, #16]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	dd73      	ble.n	8006398 <_strtod_l+0x8b8>
 80062b0:	4629      	mov	r1, r5
 80062b2:	2201      	movs	r2, #1
 80062b4:	4620      	mov	r0, r4
 80062b6:	f7ff f9a3 	bl	8005600 <__lshift>
 80062ba:	4659      	mov	r1, fp
 80062bc:	4605      	mov	r5, r0
 80062be:	f7ff fa0b 	bl	80056d8 <__mcmp>
 80062c2:	2800      	cmp	r0, #0
 80062c4:	dd68      	ble.n	8006398 <_strtod_l+0x8b8>
 80062c6:	9904      	ldr	r1, [sp, #16]
 80062c8:	4a54      	ldr	r2, [pc, #336]	; (800641c <_strtod_l+0x93c>)
 80062ca:	464b      	mov	r3, r9
 80062cc:	2900      	cmp	r1, #0
 80062ce:	f000 8084 	beq.w	80063da <_strtod_l+0x8fa>
 80062d2:	ea02 0109 	and.w	r1, r2, r9
 80062d6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80062da:	dc7e      	bgt.n	80063da <_strtod_l+0x8fa>
 80062dc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80062e0:	f77f aeb3 	ble.w	800604a <_strtod_l+0x56a>
 80062e4:	4b4e      	ldr	r3, [pc, #312]	; (8006420 <_strtod_l+0x940>)
 80062e6:	4640      	mov	r0, r8
 80062e8:	4649      	mov	r1, r9
 80062ea:	2200      	movs	r2, #0
 80062ec:	f7fa f984 	bl	80005f8 <__aeabi_dmul>
 80062f0:	4b4a      	ldr	r3, [pc, #296]	; (800641c <_strtod_l+0x93c>)
 80062f2:	400b      	ands	r3, r1
 80062f4:	4680      	mov	r8, r0
 80062f6:	4689      	mov	r9, r1
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f47f ae3f 	bne.w	8005f7c <_strtod_l+0x49c>
 80062fe:	2322      	movs	r3, #34	; 0x22
 8006300:	6023      	str	r3, [r4, #0]
 8006302:	e63b      	b.n	8005f7c <_strtod_l+0x49c>
 8006304:	f04f 32ff 	mov.w	r2, #4294967295
 8006308:	fa02 f303 	lsl.w	r3, r2, r3
 800630c:	ea03 0808 	and.w	r8, r3, r8
 8006310:	e6e8      	b.n	80060e4 <_strtod_l+0x604>
 8006312:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8006316:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800631a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800631e:	36e2      	adds	r6, #226	; 0xe2
 8006320:	fa01 f306 	lsl.w	r3, r1, r6
 8006324:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8006328:	e748      	b.n	80061bc <_strtod_l+0x6dc>
 800632a:	2100      	movs	r1, #0
 800632c:	2301      	movs	r3, #1
 800632e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8006332:	e743      	b.n	80061bc <_strtod_l+0x6dc>
 8006334:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006336:	4632      	mov	r2, r6
 8006338:	4620      	mov	r0, r4
 800633a:	f7ff f961 	bl	8005600 <__lshift>
 800633e:	9016      	str	r0, [sp, #88]	; 0x58
 8006340:	2800      	cmp	r0, #0
 8006342:	f47f af6b 	bne.w	800621c <_strtod_l+0x73c>
 8006346:	e60f      	b.n	8005f68 <_strtod_l+0x488>
 8006348:	46ca      	mov	sl, r9
 800634a:	d171      	bne.n	8006430 <_strtod_l+0x950>
 800634c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800634e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006352:	b352      	cbz	r2, 80063aa <_strtod_l+0x8ca>
 8006354:	4a33      	ldr	r2, [pc, #204]	; (8006424 <_strtod_l+0x944>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d12a      	bne.n	80063b0 <_strtod_l+0x8d0>
 800635a:	9b04      	ldr	r3, [sp, #16]
 800635c:	4641      	mov	r1, r8
 800635e:	b1fb      	cbz	r3, 80063a0 <_strtod_l+0x8c0>
 8006360:	4b2e      	ldr	r3, [pc, #184]	; (800641c <_strtod_l+0x93c>)
 8006362:	ea09 0303 	and.w	r3, r9, r3
 8006366:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800636a:	f04f 32ff 	mov.w	r2, #4294967295
 800636e:	d81a      	bhi.n	80063a6 <_strtod_l+0x8c6>
 8006370:	0d1b      	lsrs	r3, r3, #20
 8006372:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006376:	fa02 f303 	lsl.w	r3, r2, r3
 800637a:	4299      	cmp	r1, r3
 800637c:	d118      	bne.n	80063b0 <_strtod_l+0x8d0>
 800637e:	4b2a      	ldr	r3, [pc, #168]	; (8006428 <_strtod_l+0x948>)
 8006380:	459a      	cmp	sl, r3
 8006382:	d102      	bne.n	800638a <_strtod_l+0x8aa>
 8006384:	3101      	adds	r1, #1
 8006386:	f43f adef 	beq.w	8005f68 <_strtod_l+0x488>
 800638a:	4b24      	ldr	r3, [pc, #144]	; (800641c <_strtod_l+0x93c>)
 800638c:	ea0a 0303 	and.w	r3, sl, r3
 8006390:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8006394:	f04f 0800 	mov.w	r8, #0
 8006398:	9b04      	ldr	r3, [sp, #16]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1a2      	bne.n	80062e4 <_strtod_l+0x804>
 800639e:	e5ed      	b.n	8005f7c <_strtod_l+0x49c>
 80063a0:	f04f 33ff 	mov.w	r3, #4294967295
 80063a4:	e7e9      	b.n	800637a <_strtod_l+0x89a>
 80063a6:	4613      	mov	r3, r2
 80063a8:	e7e7      	b.n	800637a <_strtod_l+0x89a>
 80063aa:	ea53 0308 	orrs.w	r3, r3, r8
 80063ae:	d08a      	beq.n	80062c6 <_strtod_l+0x7e6>
 80063b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063b2:	b1e3      	cbz	r3, 80063ee <_strtod_l+0x90e>
 80063b4:	ea13 0f0a 	tst.w	r3, sl
 80063b8:	d0ee      	beq.n	8006398 <_strtod_l+0x8b8>
 80063ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063bc:	9a04      	ldr	r2, [sp, #16]
 80063be:	4640      	mov	r0, r8
 80063c0:	4649      	mov	r1, r9
 80063c2:	b1c3      	cbz	r3, 80063f6 <_strtod_l+0x916>
 80063c4:	f7ff fb6f 	bl	8005aa6 <sulp>
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
 80063cc:	ec51 0b18 	vmov	r0, r1, d8
 80063d0:	f7f9 ff5c 	bl	800028c <__adddf3>
 80063d4:	4680      	mov	r8, r0
 80063d6:	4689      	mov	r9, r1
 80063d8:	e7de      	b.n	8006398 <_strtod_l+0x8b8>
 80063da:	4013      	ands	r3, r2
 80063dc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80063e0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80063e4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80063e8:	f04f 38ff 	mov.w	r8, #4294967295
 80063ec:	e7d4      	b.n	8006398 <_strtod_l+0x8b8>
 80063ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063f0:	ea13 0f08 	tst.w	r3, r8
 80063f4:	e7e0      	b.n	80063b8 <_strtod_l+0x8d8>
 80063f6:	f7ff fb56 	bl	8005aa6 <sulp>
 80063fa:	4602      	mov	r2, r0
 80063fc:	460b      	mov	r3, r1
 80063fe:	ec51 0b18 	vmov	r0, r1, d8
 8006402:	f7f9 ff41 	bl	8000288 <__aeabi_dsub>
 8006406:	2200      	movs	r2, #0
 8006408:	2300      	movs	r3, #0
 800640a:	4680      	mov	r8, r0
 800640c:	4689      	mov	r9, r1
 800640e:	f7fa fb5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006412:	2800      	cmp	r0, #0
 8006414:	d0c0      	beq.n	8006398 <_strtod_l+0x8b8>
 8006416:	e618      	b.n	800604a <_strtod_l+0x56a>
 8006418:	fffffc02 	.word	0xfffffc02
 800641c:	7ff00000 	.word	0x7ff00000
 8006420:	39500000 	.word	0x39500000
 8006424:	000fffff 	.word	0x000fffff
 8006428:	7fefffff 	.word	0x7fefffff
 800642c:	08007c60 	.word	0x08007c60
 8006430:	4659      	mov	r1, fp
 8006432:	4628      	mov	r0, r5
 8006434:	f7ff fac0 	bl	80059b8 <__ratio>
 8006438:	ec57 6b10 	vmov	r6, r7, d0
 800643c:	ee10 0a10 	vmov	r0, s0
 8006440:	2200      	movs	r2, #0
 8006442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006446:	4639      	mov	r1, r7
 8006448:	f7fa fb52 	bl	8000af0 <__aeabi_dcmple>
 800644c:	2800      	cmp	r0, #0
 800644e:	d071      	beq.n	8006534 <_strtod_l+0xa54>
 8006450:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006452:	2b00      	cmp	r3, #0
 8006454:	d17c      	bne.n	8006550 <_strtod_l+0xa70>
 8006456:	f1b8 0f00 	cmp.w	r8, #0
 800645a:	d15a      	bne.n	8006512 <_strtod_l+0xa32>
 800645c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006460:	2b00      	cmp	r3, #0
 8006462:	d15d      	bne.n	8006520 <_strtod_l+0xa40>
 8006464:	4b90      	ldr	r3, [pc, #576]	; (80066a8 <_strtod_l+0xbc8>)
 8006466:	2200      	movs	r2, #0
 8006468:	4630      	mov	r0, r6
 800646a:	4639      	mov	r1, r7
 800646c:	f7fa fb36 	bl	8000adc <__aeabi_dcmplt>
 8006470:	2800      	cmp	r0, #0
 8006472:	d15c      	bne.n	800652e <_strtod_l+0xa4e>
 8006474:	4630      	mov	r0, r6
 8006476:	4639      	mov	r1, r7
 8006478:	4b8c      	ldr	r3, [pc, #560]	; (80066ac <_strtod_l+0xbcc>)
 800647a:	2200      	movs	r2, #0
 800647c:	f7fa f8bc 	bl	80005f8 <__aeabi_dmul>
 8006480:	4606      	mov	r6, r0
 8006482:	460f      	mov	r7, r1
 8006484:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006488:	9606      	str	r6, [sp, #24]
 800648a:	9307      	str	r3, [sp, #28]
 800648c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006490:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006494:	4b86      	ldr	r3, [pc, #536]	; (80066b0 <_strtod_l+0xbd0>)
 8006496:	ea0a 0303 	and.w	r3, sl, r3
 800649a:	930d      	str	r3, [sp, #52]	; 0x34
 800649c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800649e:	4b85      	ldr	r3, [pc, #532]	; (80066b4 <_strtod_l+0xbd4>)
 80064a0:	429a      	cmp	r2, r3
 80064a2:	f040 8090 	bne.w	80065c6 <_strtod_l+0xae6>
 80064a6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80064aa:	ec49 8b10 	vmov	d0, r8, r9
 80064ae:	f7ff f9b9 	bl	8005824 <__ulp>
 80064b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80064b6:	ec51 0b10 	vmov	r0, r1, d0
 80064ba:	f7fa f89d 	bl	80005f8 <__aeabi_dmul>
 80064be:	4642      	mov	r2, r8
 80064c0:	464b      	mov	r3, r9
 80064c2:	f7f9 fee3 	bl	800028c <__adddf3>
 80064c6:	460b      	mov	r3, r1
 80064c8:	4979      	ldr	r1, [pc, #484]	; (80066b0 <_strtod_l+0xbd0>)
 80064ca:	4a7b      	ldr	r2, [pc, #492]	; (80066b8 <_strtod_l+0xbd8>)
 80064cc:	4019      	ands	r1, r3
 80064ce:	4291      	cmp	r1, r2
 80064d0:	4680      	mov	r8, r0
 80064d2:	d944      	bls.n	800655e <_strtod_l+0xa7e>
 80064d4:	ee18 2a90 	vmov	r2, s17
 80064d8:	4b78      	ldr	r3, [pc, #480]	; (80066bc <_strtod_l+0xbdc>)
 80064da:	429a      	cmp	r2, r3
 80064dc:	d104      	bne.n	80064e8 <_strtod_l+0xa08>
 80064de:	ee18 3a10 	vmov	r3, s16
 80064e2:	3301      	adds	r3, #1
 80064e4:	f43f ad40 	beq.w	8005f68 <_strtod_l+0x488>
 80064e8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80066bc <_strtod_l+0xbdc>
 80064ec:	f04f 38ff 	mov.w	r8, #4294967295
 80064f0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80064f2:	4620      	mov	r0, r4
 80064f4:	f7fe fe6a 	bl	80051cc <_Bfree>
 80064f8:	9905      	ldr	r1, [sp, #20]
 80064fa:	4620      	mov	r0, r4
 80064fc:	f7fe fe66 	bl	80051cc <_Bfree>
 8006500:	4659      	mov	r1, fp
 8006502:	4620      	mov	r0, r4
 8006504:	f7fe fe62 	bl	80051cc <_Bfree>
 8006508:	4629      	mov	r1, r5
 800650a:	4620      	mov	r0, r4
 800650c:	f7fe fe5e 	bl	80051cc <_Bfree>
 8006510:	e609      	b.n	8006126 <_strtod_l+0x646>
 8006512:	f1b8 0f01 	cmp.w	r8, #1
 8006516:	d103      	bne.n	8006520 <_strtod_l+0xa40>
 8006518:	f1b9 0f00 	cmp.w	r9, #0
 800651c:	f43f ad95 	beq.w	800604a <_strtod_l+0x56a>
 8006520:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8006678 <_strtod_l+0xb98>
 8006524:	4f60      	ldr	r7, [pc, #384]	; (80066a8 <_strtod_l+0xbc8>)
 8006526:	ed8d 7b06 	vstr	d7, [sp, #24]
 800652a:	2600      	movs	r6, #0
 800652c:	e7ae      	b.n	800648c <_strtod_l+0x9ac>
 800652e:	4f5f      	ldr	r7, [pc, #380]	; (80066ac <_strtod_l+0xbcc>)
 8006530:	2600      	movs	r6, #0
 8006532:	e7a7      	b.n	8006484 <_strtod_l+0x9a4>
 8006534:	4b5d      	ldr	r3, [pc, #372]	; (80066ac <_strtod_l+0xbcc>)
 8006536:	4630      	mov	r0, r6
 8006538:	4639      	mov	r1, r7
 800653a:	2200      	movs	r2, #0
 800653c:	f7fa f85c 	bl	80005f8 <__aeabi_dmul>
 8006540:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006542:	4606      	mov	r6, r0
 8006544:	460f      	mov	r7, r1
 8006546:	2b00      	cmp	r3, #0
 8006548:	d09c      	beq.n	8006484 <_strtod_l+0x9a4>
 800654a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800654e:	e79d      	b.n	800648c <_strtod_l+0x9ac>
 8006550:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8006680 <_strtod_l+0xba0>
 8006554:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006558:	ec57 6b17 	vmov	r6, r7, d7
 800655c:	e796      	b.n	800648c <_strtod_l+0x9ac>
 800655e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8006562:	9b04      	ldr	r3, [sp, #16]
 8006564:	46ca      	mov	sl, r9
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1c2      	bne.n	80064f0 <_strtod_l+0xa10>
 800656a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800656e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006570:	0d1b      	lsrs	r3, r3, #20
 8006572:	051b      	lsls	r3, r3, #20
 8006574:	429a      	cmp	r2, r3
 8006576:	d1bb      	bne.n	80064f0 <_strtod_l+0xa10>
 8006578:	4630      	mov	r0, r6
 800657a:	4639      	mov	r1, r7
 800657c:	f7fa fb84 	bl	8000c88 <__aeabi_d2lz>
 8006580:	f7fa f80c 	bl	800059c <__aeabi_l2d>
 8006584:	4602      	mov	r2, r0
 8006586:	460b      	mov	r3, r1
 8006588:	4630      	mov	r0, r6
 800658a:	4639      	mov	r1, r7
 800658c:	f7f9 fe7c 	bl	8000288 <__aeabi_dsub>
 8006590:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006592:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006596:	ea43 0308 	orr.w	r3, r3, r8
 800659a:	4313      	orrs	r3, r2
 800659c:	4606      	mov	r6, r0
 800659e:	460f      	mov	r7, r1
 80065a0:	d054      	beq.n	800664c <_strtod_l+0xb6c>
 80065a2:	a339      	add	r3, pc, #228	; (adr r3, 8006688 <_strtod_l+0xba8>)
 80065a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a8:	f7fa fa98 	bl	8000adc <__aeabi_dcmplt>
 80065ac:	2800      	cmp	r0, #0
 80065ae:	f47f ace5 	bne.w	8005f7c <_strtod_l+0x49c>
 80065b2:	a337      	add	r3, pc, #220	; (adr r3, 8006690 <_strtod_l+0xbb0>)
 80065b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b8:	4630      	mov	r0, r6
 80065ba:	4639      	mov	r1, r7
 80065bc:	f7fa faac 	bl	8000b18 <__aeabi_dcmpgt>
 80065c0:	2800      	cmp	r0, #0
 80065c2:	d095      	beq.n	80064f0 <_strtod_l+0xa10>
 80065c4:	e4da      	b.n	8005f7c <_strtod_l+0x49c>
 80065c6:	9b04      	ldr	r3, [sp, #16]
 80065c8:	b333      	cbz	r3, 8006618 <_strtod_l+0xb38>
 80065ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80065d0:	d822      	bhi.n	8006618 <_strtod_l+0xb38>
 80065d2:	a331      	add	r3, pc, #196	; (adr r3, 8006698 <_strtod_l+0xbb8>)
 80065d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d8:	4630      	mov	r0, r6
 80065da:	4639      	mov	r1, r7
 80065dc:	f7fa fa88 	bl	8000af0 <__aeabi_dcmple>
 80065e0:	b1a0      	cbz	r0, 800660c <_strtod_l+0xb2c>
 80065e2:	4639      	mov	r1, r7
 80065e4:	4630      	mov	r0, r6
 80065e6:	f7fa fadf 	bl	8000ba8 <__aeabi_d2uiz>
 80065ea:	2801      	cmp	r0, #1
 80065ec:	bf38      	it	cc
 80065ee:	2001      	movcc	r0, #1
 80065f0:	f7f9 ff88 	bl	8000504 <__aeabi_ui2d>
 80065f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065f6:	4606      	mov	r6, r0
 80065f8:	460f      	mov	r7, r1
 80065fa:	bb23      	cbnz	r3, 8006646 <_strtod_l+0xb66>
 80065fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006600:	9010      	str	r0, [sp, #64]	; 0x40
 8006602:	9311      	str	r3, [sp, #68]	; 0x44
 8006604:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006608:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800660c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800660e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006610:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006614:	1a9b      	subs	r3, r3, r2
 8006616:	930f      	str	r3, [sp, #60]	; 0x3c
 8006618:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800661c:	eeb0 0a48 	vmov.f32	s0, s16
 8006620:	eef0 0a68 	vmov.f32	s1, s17
 8006624:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006628:	f7ff f8fc 	bl	8005824 <__ulp>
 800662c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006630:	ec53 2b10 	vmov	r2, r3, d0
 8006634:	f7f9 ffe0 	bl	80005f8 <__aeabi_dmul>
 8006638:	ec53 2b18 	vmov	r2, r3, d8
 800663c:	f7f9 fe26 	bl	800028c <__adddf3>
 8006640:	4680      	mov	r8, r0
 8006642:	4689      	mov	r9, r1
 8006644:	e78d      	b.n	8006562 <_strtod_l+0xa82>
 8006646:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800664a:	e7db      	b.n	8006604 <_strtod_l+0xb24>
 800664c:	a314      	add	r3, pc, #80	; (adr r3, 80066a0 <_strtod_l+0xbc0>)
 800664e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006652:	f7fa fa43 	bl	8000adc <__aeabi_dcmplt>
 8006656:	e7b3      	b.n	80065c0 <_strtod_l+0xae0>
 8006658:	2300      	movs	r3, #0
 800665a:	930a      	str	r3, [sp, #40]	; 0x28
 800665c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800665e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006660:	6013      	str	r3, [r2, #0]
 8006662:	f7ff ba7c 	b.w	8005b5e <_strtod_l+0x7e>
 8006666:	2a65      	cmp	r2, #101	; 0x65
 8006668:	f43f ab75 	beq.w	8005d56 <_strtod_l+0x276>
 800666c:	2a45      	cmp	r2, #69	; 0x45
 800666e:	f43f ab72 	beq.w	8005d56 <_strtod_l+0x276>
 8006672:	2301      	movs	r3, #1
 8006674:	f7ff bbaa 	b.w	8005dcc <_strtod_l+0x2ec>
 8006678:	00000000 	.word	0x00000000
 800667c:	bff00000 	.word	0xbff00000
 8006680:	00000000 	.word	0x00000000
 8006684:	3ff00000 	.word	0x3ff00000
 8006688:	94a03595 	.word	0x94a03595
 800668c:	3fdfffff 	.word	0x3fdfffff
 8006690:	35afe535 	.word	0x35afe535
 8006694:	3fe00000 	.word	0x3fe00000
 8006698:	ffc00000 	.word	0xffc00000
 800669c:	41dfffff 	.word	0x41dfffff
 80066a0:	94a03595 	.word	0x94a03595
 80066a4:	3fcfffff 	.word	0x3fcfffff
 80066a8:	3ff00000 	.word	0x3ff00000
 80066ac:	3fe00000 	.word	0x3fe00000
 80066b0:	7ff00000 	.word	0x7ff00000
 80066b4:	7fe00000 	.word	0x7fe00000
 80066b8:	7c9fffff 	.word	0x7c9fffff
 80066bc:	7fefffff 	.word	0x7fefffff

080066c0 <_strtod_r>:
 80066c0:	4b01      	ldr	r3, [pc, #4]	; (80066c8 <_strtod_r+0x8>)
 80066c2:	f7ff ba0d 	b.w	8005ae0 <_strtod_l>
 80066c6:	bf00      	nop
 80066c8:	20000064 	.word	0x20000064

080066cc <_strtol_l.constprop.0>:
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066d2:	d001      	beq.n	80066d8 <_strtol_l.constprop.0+0xc>
 80066d4:	2b24      	cmp	r3, #36	; 0x24
 80066d6:	d906      	bls.n	80066e6 <_strtol_l.constprop.0+0x1a>
 80066d8:	f7fd fd88 	bl	80041ec <__errno>
 80066dc:	2316      	movs	r3, #22
 80066de:	6003      	str	r3, [r0, #0]
 80066e0:	2000      	movs	r0, #0
 80066e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066e6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80067cc <_strtol_l.constprop.0+0x100>
 80066ea:	460d      	mov	r5, r1
 80066ec:	462e      	mov	r6, r5
 80066ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80066f2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80066f6:	f017 0708 	ands.w	r7, r7, #8
 80066fa:	d1f7      	bne.n	80066ec <_strtol_l.constprop.0+0x20>
 80066fc:	2c2d      	cmp	r4, #45	; 0x2d
 80066fe:	d132      	bne.n	8006766 <_strtol_l.constprop.0+0x9a>
 8006700:	782c      	ldrb	r4, [r5, #0]
 8006702:	2701      	movs	r7, #1
 8006704:	1cb5      	adds	r5, r6, #2
 8006706:	2b00      	cmp	r3, #0
 8006708:	d05b      	beq.n	80067c2 <_strtol_l.constprop.0+0xf6>
 800670a:	2b10      	cmp	r3, #16
 800670c:	d109      	bne.n	8006722 <_strtol_l.constprop.0+0x56>
 800670e:	2c30      	cmp	r4, #48	; 0x30
 8006710:	d107      	bne.n	8006722 <_strtol_l.constprop.0+0x56>
 8006712:	782c      	ldrb	r4, [r5, #0]
 8006714:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006718:	2c58      	cmp	r4, #88	; 0x58
 800671a:	d14d      	bne.n	80067b8 <_strtol_l.constprop.0+0xec>
 800671c:	786c      	ldrb	r4, [r5, #1]
 800671e:	2310      	movs	r3, #16
 8006720:	3502      	adds	r5, #2
 8006722:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006726:	f108 38ff 	add.w	r8, r8, #4294967295
 800672a:	f04f 0e00 	mov.w	lr, #0
 800672e:	fbb8 f9f3 	udiv	r9, r8, r3
 8006732:	4676      	mov	r6, lr
 8006734:	fb03 8a19 	mls	sl, r3, r9, r8
 8006738:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800673c:	f1bc 0f09 	cmp.w	ip, #9
 8006740:	d816      	bhi.n	8006770 <_strtol_l.constprop.0+0xa4>
 8006742:	4664      	mov	r4, ip
 8006744:	42a3      	cmp	r3, r4
 8006746:	dd24      	ble.n	8006792 <_strtol_l.constprop.0+0xc6>
 8006748:	f1be 3fff 	cmp.w	lr, #4294967295
 800674c:	d008      	beq.n	8006760 <_strtol_l.constprop.0+0x94>
 800674e:	45b1      	cmp	r9, r6
 8006750:	d31c      	bcc.n	800678c <_strtol_l.constprop.0+0xc0>
 8006752:	d101      	bne.n	8006758 <_strtol_l.constprop.0+0x8c>
 8006754:	45a2      	cmp	sl, r4
 8006756:	db19      	blt.n	800678c <_strtol_l.constprop.0+0xc0>
 8006758:	fb06 4603 	mla	r6, r6, r3, r4
 800675c:	f04f 0e01 	mov.w	lr, #1
 8006760:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006764:	e7e8      	b.n	8006738 <_strtol_l.constprop.0+0x6c>
 8006766:	2c2b      	cmp	r4, #43	; 0x2b
 8006768:	bf04      	itt	eq
 800676a:	782c      	ldrbeq	r4, [r5, #0]
 800676c:	1cb5      	addeq	r5, r6, #2
 800676e:	e7ca      	b.n	8006706 <_strtol_l.constprop.0+0x3a>
 8006770:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006774:	f1bc 0f19 	cmp.w	ip, #25
 8006778:	d801      	bhi.n	800677e <_strtol_l.constprop.0+0xb2>
 800677a:	3c37      	subs	r4, #55	; 0x37
 800677c:	e7e2      	b.n	8006744 <_strtol_l.constprop.0+0x78>
 800677e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006782:	f1bc 0f19 	cmp.w	ip, #25
 8006786:	d804      	bhi.n	8006792 <_strtol_l.constprop.0+0xc6>
 8006788:	3c57      	subs	r4, #87	; 0x57
 800678a:	e7db      	b.n	8006744 <_strtol_l.constprop.0+0x78>
 800678c:	f04f 3eff 	mov.w	lr, #4294967295
 8006790:	e7e6      	b.n	8006760 <_strtol_l.constprop.0+0x94>
 8006792:	f1be 3fff 	cmp.w	lr, #4294967295
 8006796:	d105      	bne.n	80067a4 <_strtol_l.constprop.0+0xd8>
 8006798:	2322      	movs	r3, #34	; 0x22
 800679a:	6003      	str	r3, [r0, #0]
 800679c:	4646      	mov	r6, r8
 800679e:	b942      	cbnz	r2, 80067b2 <_strtol_l.constprop.0+0xe6>
 80067a0:	4630      	mov	r0, r6
 80067a2:	e79e      	b.n	80066e2 <_strtol_l.constprop.0+0x16>
 80067a4:	b107      	cbz	r7, 80067a8 <_strtol_l.constprop.0+0xdc>
 80067a6:	4276      	negs	r6, r6
 80067a8:	2a00      	cmp	r2, #0
 80067aa:	d0f9      	beq.n	80067a0 <_strtol_l.constprop.0+0xd4>
 80067ac:	f1be 0f00 	cmp.w	lr, #0
 80067b0:	d000      	beq.n	80067b4 <_strtol_l.constprop.0+0xe8>
 80067b2:	1e69      	subs	r1, r5, #1
 80067b4:	6011      	str	r1, [r2, #0]
 80067b6:	e7f3      	b.n	80067a0 <_strtol_l.constprop.0+0xd4>
 80067b8:	2430      	movs	r4, #48	; 0x30
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1b1      	bne.n	8006722 <_strtol_l.constprop.0+0x56>
 80067be:	2308      	movs	r3, #8
 80067c0:	e7af      	b.n	8006722 <_strtol_l.constprop.0+0x56>
 80067c2:	2c30      	cmp	r4, #48	; 0x30
 80067c4:	d0a5      	beq.n	8006712 <_strtol_l.constprop.0+0x46>
 80067c6:	230a      	movs	r3, #10
 80067c8:	e7ab      	b.n	8006722 <_strtol_l.constprop.0+0x56>
 80067ca:	bf00      	nop
 80067cc:	08007c89 	.word	0x08007c89

080067d0 <_strtol_r>:
 80067d0:	f7ff bf7c 	b.w	80066cc <_strtol_l.constprop.0>

080067d4 <__ssputs_r>:
 80067d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067d8:	688e      	ldr	r6, [r1, #8]
 80067da:	461f      	mov	r7, r3
 80067dc:	42be      	cmp	r6, r7
 80067de:	680b      	ldr	r3, [r1, #0]
 80067e0:	4682      	mov	sl, r0
 80067e2:	460c      	mov	r4, r1
 80067e4:	4690      	mov	r8, r2
 80067e6:	d82c      	bhi.n	8006842 <__ssputs_r+0x6e>
 80067e8:	898a      	ldrh	r2, [r1, #12]
 80067ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80067ee:	d026      	beq.n	800683e <__ssputs_r+0x6a>
 80067f0:	6965      	ldr	r5, [r4, #20]
 80067f2:	6909      	ldr	r1, [r1, #16]
 80067f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067f8:	eba3 0901 	sub.w	r9, r3, r1
 80067fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006800:	1c7b      	adds	r3, r7, #1
 8006802:	444b      	add	r3, r9
 8006804:	106d      	asrs	r5, r5, #1
 8006806:	429d      	cmp	r5, r3
 8006808:	bf38      	it	cc
 800680a:	461d      	movcc	r5, r3
 800680c:	0553      	lsls	r3, r2, #21
 800680e:	d527      	bpl.n	8006860 <__ssputs_r+0x8c>
 8006810:	4629      	mov	r1, r5
 8006812:	f7fe fc0f 	bl	8005034 <_malloc_r>
 8006816:	4606      	mov	r6, r0
 8006818:	b360      	cbz	r0, 8006874 <__ssputs_r+0xa0>
 800681a:	6921      	ldr	r1, [r4, #16]
 800681c:	464a      	mov	r2, r9
 800681e:	f000 fa1b 	bl	8006c58 <memcpy>
 8006822:	89a3      	ldrh	r3, [r4, #12]
 8006824:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800682c:	81a3      	strh	r3, [r4, #12]
 800682e:	6126      	str	r6, [r4, #16]
 8006830:	6165      	str	r5, [r4, #20]
 8006832:	444e      	add	r6, r9
 8006834:	eba5 0509 	sub.w	r5, r5, r9
 8006838:	6026      	str	r6, [r4, #0]
 800683a:	60a5      	str	r5, [r4, #8]
 800683c:	463e      	mov	r6, r7
 800683e:	42be      	cmp	r6, r7
 8006840:	d900      	bls.n	8006844 <__ssputs_r+0x70>
 8006842:	463e      	mov	r6, r7
 8006844:	6820      	ldr	r0, [r4, #0]
 8006846:	4632      	mov	r2, r6
 8006848:	4641      	mov	r1, r8
 800684a:	f000 f9c9 	bl	8006be0 <memmove>
 800684e:	68a3      	ldr	r3, [r4, #8]
 8006850:	1b9b      	subs	r3, r3, r6
 8006852:	60a3      	str	r3, [r4, #8]
 8006854:	6823      	ldr	r3, [r4, #0]
 8006856:	4433      	add	r3, r6
 8006858:	6023      	str	r3, [r4, #0]
 800685a:	2000      	movs	r0, #0
 800685c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006860:	462a      	mov	r2, r5
 8006862:	f000 fdae 	bl	80073c2 <_realloc_r>
 8006866:	4606      	mov	r6, r0
 8006868:	2800      	cmp	r0, #0
 800686a:	d1e0      	bne.n	800682e <__ssputs_r+0x5a>
 800686c:	6921      	ldr	r1, [r4, #16]
 800686e:	4650      	mov	r0, sl
 8006870:	f7fe fb6c 	bl	8004f4c <_free_r>
 8006874:	230c      	movs	r3, #12
 8006876:	f8ca 3000 	str.w	r3, [sl]
 800687a:	89a3      	ldrh	r3, [r4, #12]
 800687c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006880:	81a3      	strh	r3, [r4, #12]
 8006882:	f04f 30ff 	mov.w	r0, #4294967295
 8006886:	e7e9      	b.n	800685c <__ssputs_r+0x88>

08006888 <_svfiprintf_r>:
 8006888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800688c:	4698      	mov	r8, r3
 800688e:	898b      	ldrh	r3, [r1, #12]
 8006890:	061b      	lsls	r3, r3, #24
 8006892:	b09d      	sub	sp, #116	; 0x74
 8006894:	4607      	mov	r7, r0
 8006896:	460d      	mov	r5, r1
 8006898:	4614      	mov	r4, r2
 800689a:	d50e      	bpl.n	80068ba <_svfiprintf_r+0x32>
 800689c:	690b      	ldr	r3, [r1, #16]
 800689e:	b963      	cbnz	r3, 80068ba <_svfiprintf_r+0x32>
 80068a0:	2140      	movs	r1, #64	; 0x40
 80068a2:	f7fe fbc7 	bl	8005034 <_malloc_r>
 80068a6:	6028      	str	r0, [r5, #0]
 80068a8:	6128      	str	r0, [r5, #16]
 80068aa:	b920      	cbnz	r0, 80068b6 <_svfiprintf_r+0x2e>
 80068ac:	230c      	movs	r3, #12
 80068ae:	603b      	str	r3, [r7, #0]
 80068b0:	f04f 30ff 	mov.w	r0, #4294967295
 80068b4:	e0d0      	b.n	8006a58 <_svfiprintf_r+0x1d0>
 80068b6:	2340      	movs	r3, #64	; 0x40
 80068b8:	616b      	str	r3, [r5, #20]
 80068ba:	2300      	movs	r3, #0
 80068bc:	9309      	str	r3, [sp, #36]	; 0x24
 80068be:	2320      	movs	r3, #32
 80068c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80068c8:	2330      	movs	r3, #48	; 0x30
 80068ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006a70 <_svfiprintf_r+0x1e8>
 80068ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068d2:	f04f 0901 	mov.w	r9, #1
 80068d6:	4623      	mov	r3, r4
 80068d8:	469a      	mov	sl, r3
 80068da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068de:	b10a      	cbz	r2, 80068e4 <_svfiprintf_r+0x5c>
 80068e0:	2a25      	cmp	r2, #37	; 0x25
 80068e2:	d1f9      	bne.n	80068d8 <_svfiprintf_r+0x50>
 80068e4:	ebba 0b04 	subs.w	fp, sl, r4
 80068e8:	d00b      	beq.n	8006902 <_svfiprintf_r+0x7a>
 80068ea:	465b      	mov	r3, fp
 80068ec:	4622      	mov	r2, r4
 80068ee:	4629      	mov	r1, r5
 80068f0:	4638      	mov	r0, r7
 80068f2:	f7ff ff6f 	bl	80067d4 <__ssputs_r>
 80068f6:	3001      	adds	r0, #1
 80068f8:	f000 80a9 	beq.w	8006a4e <_svfiprintf_r+0x1c6>
 80068fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068fe:	445a      	add	r2, fp
 8006900:	9209      	str	r2, [sp, #36]	; 0x24
 8006902:	f89a 3000 	ldrb.w	r3, [sl]
 8006906:	2b00      	cmp	r3, #0
 8006908:	f000 80a1 	beq.w	8006a4e <_svfiprintf_r+0x1c6>
 800690c:	2300      	movs	r3, #0
 800690e:	f04f 32ff 	mov.w	r2, #4294967295
 8006912:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006916:	f10a 0a01 	add.w	sl, sl, #1
 800691a:	9304      	str	r3, [sp, #16]
 800691c:	9307      	str	r3, [sp, #28]
 800691e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006922:	931a      	str	r3, [sp, #104]	; 0x68
 8006924:	4654      	mov	r4, sl
 8006926:	2205      	movs	r2, #5
 8006928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800692c:	4850      	ldr	r0, [pc, #320]	; (8006a70 <_svfiprintf_r+0x1e8>)
 800692e:	f7f9 fc4f 	bl	80001d0 <memchr>
 8006932:	9a04      	ldr	r2, [sp, #16]
 8006934:	b9d8      	cbnz	r0, 800696e <_svfiprintf_r+0xe6>
 8006936:	06d0      	lsls	r0, r2, #27
 8006938:	bf44      	itt	mi
 800693a:	2320      	movmi	r3, #32
 800693c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006940:	0711      	lsls	r1, r2, #28
 8006942:	bf44      	itt	mi
 8006944:	232b      	movmi	r3, #43	; 0x2b
 8006946:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800694a:	f89a 3000 	ldrb.w	r3, [sl]
 800694e:	2b2a      	cmp	r3, #42	; 0x2a
 8006950:	d015      	beq.n	800697e <_svfiprintf_r+0xf6>
 8006952:	9a07      	ldr	r2, [sp, #28]
 8006954:	4654      	mov	r4, sl
 8006956:	2000      	movs	r0, #0
 8006958:	f04f 0c0a 	mov.w	ip, #10
 800695c:	4621      	mov	r1, r4
 800695e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006962:	3b30      	subs	r3, #48	; 0x30
 8006964:	2b09      	cmp	r3, #9
 8006966:	d94d      	bls.n	8006a04 <_svfiprintf_r+0x17c>
 8006968:	b1b0      	cbz	r0, 8006998 <_svfiprintf_r+0x110>
 800696a:	9207      	str	r2, [sp, #28]
 800696c:	e014      	b.n	8006998 <_svfiprintf_r+0x110>
 800696e:	eba0 0308 	sub.w	r3, r0, r8
 8006972:	fa09 f303 	lsl.w	r3, r9, r3
 8006976:	4313      	orrs	r3, r2
 8006978:	9304      	str	r3, [sp, #16]
 800697a:	46a2      	mov	sl, r4
 800697c:	e7d2      	b.n	8006924 <_svfiprintf_r+0x9c>
 800697e:	9b03      	ldr	r3, [sp, #12]
 8006980:	1d19      	adds	r1, r3, #4
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	9103      	str	r1, [sp, #12]
 8006986:	2b00      	cmp	r3, #0
 8006988:	bfbb      	ittet	lt
 800698a:	425b      	neglt	r3, r3
 800698c:	f042 0202 	orrlt.w	r2, r2, #2
 8006990:	9307      	strge	r3, [sp, #28]
 8006992:	9307      	strlt	r3, [sp, #28]
 8006994:	bfb8      	it	lt
 8006996:	9204      	strlt	r2, [sp, #16]
 8006998:	7823      	ldrb	r3, [r4, #0]
 800699a:	2b2e      	cmp	r3, #46	; 0x2e
 800699c:	d10c      	bne.n	80069b8 <_svfiprintf_r+0x130>
 800699e:	7863      	ldrb	r3, [r4, #1]
 80069a0:	2b2a      	cmp	r3, #42	; 0x2a
 80069a2:	d134      	bne.n	8006a0e <_svfiprintf_r+0x186>
 80069a4:	9b03      	ldr	r3, [sp, #12]
 80069a6:	1d1a      	adds	r2, r3, #4
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	9203      	str	r2, [sp, #12]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	bfb8      	it	lt
 80069b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80069b4:	3402      	adds	r4, #2
 80069b6:	9305      	str	r3, [sp, #20]
 80069b8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006a80 <_svfiprintf_r+0x1f8>
 80069bc:	7821      	ldrb	r1, [r4, #0]
 80069be:	2203      	movs	r2, #3
 80069c0:	4650      	mov	r0, sl
 80069c2:	f7f9 fc05 	bl	80001d0 <memchr>
 80069c6:	b138      	cbz	r0, 80069d8 <_svfiprintf_r+0x150>
 80069c8:	9b04      	ldr	r3, [sp, #16]
 80069ca:	eba0 000a 	sub.w	r0, r0, sl
 80069ce:	2240      	movs	r2, #64	; 0x40
 80069d0:	4082      	lsls	r2, r0
 80069d2:	4313      	orrs	r3, r2
 80069d4:	3401      	adds	r4, #1
 80069d6:	9304      	str	r3, [sp, #16]
 80069d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069dc:	4825      	ldr	r0, [pc, #148]	; (8006a74 <_svfiprintf_r+0x1ec>)
 80069de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069e2:	2206      	movs	r2, #6
 80069e4:	f7f9 fbf4 	bl	80001d0 <memchr>
 80069e8:	2800      	cmp	r0, #0
 80069ea:	d038      	beq.n	8006a5e <_svfiprintf_r+0x1d6>
 80069ec:	4b22      	ldr	r3, [pc, #136]	; (8006a78 <_svfiprintf_r+0x1f0>)
 80069ee:	bb1b      	cbnz	r3, 8006a38 <_svfiprintf_r+0x1b0>
 80069f0:	9b03      	ldr	r3, [sp, #12]
 80069f2:	3307      	adds	r3, #7
 80069f4:	f023 0307 	bic.w	r3, r3, #7
 80069f8:	3308      	adds	r3, #8
 80069fa:	9303      	str	r3, [sp, #12]
 80069fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069fe:	4433      	add	r3, r6
 8006a00:	9309      	str	r3, [sp, #36]	; 0x24
 8006a02:	e768      	b.n	80068d6 <_svfiprintf_r+0x4e>
 8006a04:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a08:	460c      	mov	r4, r1
 8006a0a:	2001      	movs	r0, #1
 8006a0c:	e7a6      	b.n	800695c <_svfiprintf_r+0xd4>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	3401      	adds	r4, #1
 8006a12:	9305      	str	r3, [sp, #20]
 8006a14:	4619      	mov	r1, r3
 8006a16:	f04f 0c0a 	mov.w	ip, #10
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a20:	3a30      	subs	r2, #48	; 0x30
 8006a22:	2a09      	cmp	r2, #9
 8006a24:	d903      	bls.n	8006a2e <_svfiprintf_r+0x1a6>
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d0c6      	beq.n	80069b8 <_svfiprintf_r+0x130>
 8006a2a:	9105      	str	r1, [sp, #20]
 8006a2c:	e7c4      	b.n	80069b8 <_svfiprintf_r+0x130>
 8006a2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a32:	4604      	mov	r4, r0
 8006a34:	2301      	movs	r3, #1
 8006a36:	e7f0      	b.n	8006a1a <_svfiprintf_r+0x192>
 8006a38:	ab03      	add	r3, sp, #12
 8006a3a:	9300      	str	r3, [sp, #0]
 8006a3c:	462a      	mov	r2, r5
 8006a3e:	4b0f      	ldr	r3, [pc, #60]	; (8006a7c <_svfiprintf_r+0x1f4>)
 8006a40:	a904      	add	r1, sp, #16
 8006a42:	4638      	mov	r0, r7
 8006a44:	f7fc fc84 	bl	8003350 <_printf_float>
 8006a48:	1c42      	adds	r2, r0, #1
 8006a4a:	4606      	mov	r6, r0
 8006a4c:	d1d6      	bne.n	80069fc <_svfiprintf_r+0x174>
 8006a4e:	89ab      	ldrh	r3, [r5, #12]
 8006a50:	065b      	lsls	r3, r3, #25
 8006a52:	f53f af2d 	bmi.w	80068b0 <_svfiprintf_r+0x28>
 8006a56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a58:	b01d      	add	sp, #116	; 0x74
 8006a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a5e:	ab03      	add	r3, sp, #12
 8006a60:	9300      	str	r3, [sp, #0]
 8006a62:	462a      	mov	r2, r5
 8006a64:	4b05      	ldr	r3, [pc, #20]	; (8006a7c <_svfiprintf_r+0x1f4>)
 8006a66:	a904      	add	r1, sp, #16
 8006a68:	4638      	mov	r0, r7
 8006a6a:	f7fc ff15 	bl	8003898 <_printf_i>
 8006a6e:	e7eb      	b.n	8006a48 <_svfiprintf_r+0x1c0>
 8006a70:	08007d89 	.word	0x08007d89
 8006a74:	08007d93 	.word	0x08007d93
 8006a78:	08003351 	.word	0x08003351
 8006a7c:	080067d5 	.word	0x080067d5
 8006a80:	08007d8f 	.word	0x08007d8f

08006a84 <__sflush_r>:
 8006a84:	898a      	ldrh	r2, [r1, #12]
 8006a86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a8a:	4605      	mov	r5, r0
 8006a8c:	0710      	lsls	r0, r2, #28
 8006a8e:	460c      	mov	r4, r1
 8006a90:	d458      	bmi.n	8006b44 <__sflush_r+0xc0>
 8006a92:	684b      	ldr	r3, [r1, #4]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	dc05      	bgt.n	8006aa4 <__sflush_r+0x20>
 8006a98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	dc02      	bgt.n	8006aa4 <__sflush_r+0x20>
 8006a9e:	2000      	movs	r0, #0
 8006aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006aa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006aa6:	2e00      	cmp	r6, #0
 8006aa8:	d0f9      	beq.n	8006a9e <__sflush_r+0x1a>
 8006aaa:	2300      	movs	r3, #0
 8006aac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ab0:	682f      	ldr	r7, [r5, #0]
 8006ab2:	6a21      	ldr	r1, [r4, #32]
 8006ab4:	602b      	str	r3, [r5, #0]
 8006ab6:	d032      	beq.n	8006b1e <__sflush_r+0x9a>
 8006ab8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006aba:	89a3      	ldrh	r3, [r4, #12]
 8006abc:	075a      	lsls	r2, r3, #29
 8006abe:	d505      	bpl.n	8006acc <__sflush_r+0x48>
 8006ac0:	6863      	ldr	r3, [r4, #4]
 8006ac2:	1ac0      	subs	r0, r0, r3
 8006ac4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ac6:	b10b      	cbz	r3, 8006acc <__sflush_r+0x48>
 8006ac8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006aca:	1ac0      	subs	r0, r0, r3
 8006acc:	2300      	movs	r3, #0
 8006ace:	4602      	mov	r2, r0
 8006ad0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ad2:	6a21      	ldr	r1, [r4, #32]
 8006ad4:	4628      	mov	r0, r5
 8006ad6:	47b0      	blx	r6
 8006ad8:	1c43      	adds	r3, r0, #1
 8006ada:	89a3      	ldrh	r3, [r4, #12]
 8006adc:	d106      	bne.n	8006aec <__sflush_r+0x68>
 8006ade:	6829      	ldr	r1, [r5, #0]
 8006ae0:	291d      	cmp	r1, #29
 8006ae2:	d82b      	bhi.n	8006b3c <__sflush_r+0xb8>
 8006ae4:	4a29      	ldr	r2, [pc, #164]	; (8006b8c <__sflush_r+0x108>)
 8006ae6:	410a      	asrs	r2, r1
 8006ae8:	07d6      	lsls	r6, r2, #31
 8006aea:	d427      	bmi.n	8006b3c <__sflush_r+0xb8>
 8006aec:	2200      	movs	r2, #0
 8006aee:	6062      	str	r2, [r4, #4]
 8006af0:	04d9      	lsls	r1, r3, #19
 8006af2:	6922      	ldr	r2, [r4, #16]
 8006af4:	6022      	str	r2, [r4, #0]
 8006af6:	d504      	bpl.n	8006b02 <__sflush_r+0x7e>
 8006af8:	1c42      	adds	r2, r0, #1
 8006afa:	d101      	bne.n	8006b00 <__sflush_r+0x7c>
 8006afc:	682b      	ldr	r3, [r5, #0]
 8006afe:	b903      	cbnz	r3, 8006b02 <__sflush_r+0x7e>
 8006b00:	6560      	str	r0, [r4, #84]	; 0x54
 8006b02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b04:	602f      	str	r7, [r5, #0]
 8006b06:	2900      	cmp	r1, #0
 8006b08:	d0c9      	beq.n	8006a9e <__sflush_r+0x1a>
 8006b0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b0e:	4299      	cmp	r1, r3
 8006b10:	d002      	beq.n	8006b18 <__sflush_r+0x94>
 8006b12:	4628      	mov	r0, r5
 8006b14:	f7fe fa1a 	bl	8004f4c <_free_r>
 8006b18:	2000      	movs	r0, #0
 8006b1a:	6360      	str	r0, [r4, #52]	; 0x34
 8006b1c:	e7c0      	b.n	8006aa0 <__sflush_r+0x1c>
 8006b1e:	2301      	movs	r3, #1
 8006b20:	4628      	mov	r0, r5
 8006b22:	47b0      	blx	r6
 8006b24:	1c41      	adds	r1, r0, #1
 8006b26:	d1c8      	bne.n	8006aba <__sflush_r+0x36>
 8006b28:	682b      	ldr	r3, [r5, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d0c5      	beq.n	8006aba <__sflush_r+0x36>
 8006b2e:	2b1d      	cmp	r3, #29
 8006b30:	d001      	beq.n	8006b36 <__sflush_r+0xb2>
 8006b32:	2b16      	cmp	r3, #22
 8006b34:	d101      	bne.n	8006b3a <__sflush_r+0xb6>
 8006b36:	602f      	str	r7, [r5, #0]
 8006b38:	e7b1      	b.n	8006a9e <__sflush_r+0x1a>
 8006b3a:	89a3      	ldrh	r3, [r4, #12]
 8006b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b40:	81a3      	strh	r3, [r4, #12]
 8006b42:	e7ad      	b.n	8006aa0 <__sflush_r+0x1c>
 8006b44:	690f      	ldr	r7, [r1, #16]
 8006b46:	2f00      	cmp	r7, #0
 8006b48:	d0a9      	beq.n	8006a9e <__sflush_r+0x1a>
 8006b4a:	0793      	lsls	r3, r2, #30
 8006b4c:	680e      	ldr	r6, [r1, #0]
 8006b4e:	bf08      	it	eq
 8006b50:	694b      	ldreq	r3, [r1, #20]
 8006b52:	600f      	str	r7, [r1, #0]
 8006b54:	bf18      	it	ne
 8006b56:	2300      	movne	r3, #0
 8006b58:	eba6 0807 	sub.w	r8, r6, r7
 8006b5c:	608b      	str	r3, [r1, #8]
 8006b5e:	f1b8 0f00 	cmp.w	r8, #0
 8006b62:	dd9c      	ble.n	8006a9e <__sflush_r+0x1a>
 8006b64:	6a21      	ldr	r1, [r4, #32]
 8006b66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b68:	4643      	mov	r3, r8
 8006b6a:	463a      	mov	r2, r7
 8006b6c:	4628      	mov	r0, r5
 8006b6e:	47b0      	blx	r6
 8006b70:	2800      	cmp	r0, #0
 8006b72:	dc06      	bgt.n	8006b82 <__sflush_r+0xfe>
 8006b74:	89a3      	ldrh	r3, [r4, #12]
 8006b76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b7a:	81a3      	strh	r3, [r4, #12]
 8006b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b80:	e78e      	b.n	8006aa0 <__sflush_r+0x1c>
 8006b82:	4407      	add	r7, r0
 8006b84:	eba8 0800 	sub.w	r8, r8, r0
 8006b88:	e7e9      	b.n	8006b5e <__sflush_r+0xda>
 8006b8a:	bf00      	nop
 8006b8c:	dfbffffe 	.word	0xdfbffffe

08006b90 <_fflush_r>:
 8006b90:	b538      	push	{r3, r4, r5, lr}
 8006b92:	690b      	ldr	r3, [r1, #16]
 8006b94:	4605      	mov	r5, r0
 8006b96:	460c      	mov	r4, r1
 8006b98:	b913      	cbnz	r3, 8006ba0 <_fflush_r+0x10>
 8006b9a:	2500      	movs	r5, #0
 8006b9c:	4628      	mov	r0, r5
 8006b9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ba0:	b118      	cbz	r0, 8006baa <_fflush_r+0x1a>
 8006ba2:	6a03      	ldr	r3, [r0, #32]
 8006ba4:	b90b      	cbnz	r3, 8006baa <_fflush_r+0x1a>
 8006ba6:	f7fd fa35 	bl	8004014 <__sinit>
 8006baa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d0f3      	beq.n	8006b9a <_fflush_r+0xa>
 8006bb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006bb4:	07d0      	lsls	r0, r2, #31
 8006bb6:	d404      	bmi.n	8006bc2 <_fflush_r+0x32>
 8006bb8:	0599      	lsls	r1, r3, #22
 8006bba:	d402      	bmi.n	8006bc2 <_fflush_r+0x32>
 8006bbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bbe:	f7fd fb40 	bl	8004242 <__retarget_lock_acquire_recursive>
 8006bc2:	4628      	mov	r0, r5
 8006bc4:	4621      	mov	r1, r4
 8006bc6:	f7ff ff5d 	bl	8006a84 <__sflush_r>
 8006bca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bcc:	07da      	lsls	r2, r3, #31
 8006bce:	4605      	mov	r5, r0
 8006bd0:	d4e4      	bmi.n	8006b9c <_fflush_r+0xc>
 8006bd2:	89a3      	ldrh	r3, [r4, #12]
 8006bd4:	059b      	lsls	r3, r3, #22
 8006bd6:	d4e1      	bmi.n	8006b9c <_fflush_r+0xc>
 8006bd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bda:	f7fd fb33 	bl	8004244 <__retarget_lock_release_recursive>
 8006bde:	e7dd      	b.n	8006b9c <_fflush_r+0xc>

08006be0 <memmove>:
 8006be0:	4288      	cmp	r0, r1
 8006be2:	b510      	push	{r4, lr}
 8006be4:	eb01 0402 	add.w	r4, r1, r2
 8006be8:	d902      	bls.n	8006bf0 <memmove+0x10>
 8006bea:	4284      	cmp	r4, r0
 8006bec:	4623      	mov	r3, r4
 8006bee:	d807      	bhi.n	8006c00 <memmove+0x20>
 8006bf0:	1e43      	subs	r3, r0, #1
 8006bf2:	42a1      	cmp	r1, r4
 8006bf4:	d008      	beq.n	8006c08 <memmove+0x28>
 8006bf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006bfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006bfe:	e7f8      	b.n	8006bf2 <memmove+0x12>
 8006c00:	4402      	add	r2, r0
 8006c02:	4601      	mov	r1, r0
 8006c04:	428a      	cmp	r2, r1
 8006c06:	d100      	bne.n	8006c0a <memmove+0x2a>
 8006c08:	bd10      	pop	{r4, pc}
 8006c0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c12:	e7f7      	b.n	8006c04 <memmove+0x24>

08006c14 <strncmp>:
 8006c14:	b510      	push	{r4, lr}
 8006c16:	b16a      	cbz	r2, 8006c34 <strncmp+0x20>
 8006c18:	3901      	subs	r1, #1
 8006c1a:	1884      	adds	r4, r0, r2
 8006c1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c20:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d103      	bne.n	8006c30 <strncmp+0x1c>
 8006c28:	42a0      	cmp	r0, r4
 8006c2a:	d001      	beq.n	8006c30 <strncmp+0x1c>
 8006c2c:	2a00      	cmp	r2, #0
 8006c2e:	d1f5      	bne.n	8006c1c <strncmp+0x8>
 8006c30:	1ad0      	subs	r0, r2, r3
 8006c32:	bd10      	pop	{r4, pc}
 8006c34:	4610      	mov	r0, r2
 8006c36:	e7fc      	b.n	8006c32 <strncmp+0x1e>

08006c38 <_sbrk_r>:
 8006c38:	b538      	push	{r3, r4, r5, lr}
 8006c3a:	4d06      	ldr	r5, [pc, #24]	; (8006c54 <_sbrk_r+0x1c>)
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	4604      	mov	r4, r0
 8006c40:	4608      	mov	r0, r1
 8006c42:	602b      	str	r3, [r5, #0]
 8006c44:	f7fa ffce 	bl	8001be4 <_sbrk>
 8006c48:	1c43      	adds	r3, r0, #1
 8006c4a:	d102      	bne.n	8006c52 <_sbrk_r+0x1a>
 8006c4c:	682b      	ldr	r3, [r5, #0]
 8006c4e:	b103      	cbz	r3, 8006c52 <_sbrk_r+0x1a>
 8006c50:	6023      	str	r3, [r4, #0]
 8006c52:	bd38      	pop	{r3, r4, r5, pc}
 8006c54:	20000334 	.word	0x20000334

08006c58 <memcpy>:
 8006c58:	440a      	add	r2, r1
 8006c5a:	4291      	cmp	r1, r2
 8006c5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c60:	d100      	bne.n	8006c64 <memcpy+0xc>
 8006c62:	4770      	bx	lr
 8006c64:	b510      	push	{r4, lr}
 8006c66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c6e:	4291      	cmp	r1, r2
 8006c70:	d1f9      	bne.n	8006c66 <memcpy+0xe>
 8006c72:	bd10      	pop	{r4, pc}
 8006c74:	0000      	movs	r0, r0
	...

08006c78 <nan>:
 8006c78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006c80 <nan+0x8>
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	00000000 	.word	0x00000000
 8006c84:	7ff80000 	.word	0x7ff80000

08006c88 <__assert_func>:
 8006c88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c8a:	4614      	mov	r4, r2
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	4b09      	ldr	r3, [pc, #36]	; (8006cb4 <__assert_func+0x2c>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4605      	mov	r5, r0
 8006c94:	68d8      	ldr	r0, [r3, #12]
 8006c96:	b14c      	cbz	r4, 8006cac <__assert_func+0x24>
 8006c98:	4b07      	ldr	r3, [pc, #28]	; (8006cb8 <__assert_func+0x30>)
 8006c9a:	9100      	str	r1, [sp, #0]
 8006c9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ca0:	4906      	ldr	r1, [pc, #24]	; (8006cbc <__assert_func+0x34>)
 8006ca2:	462b      	mov	r3, r5
 8006ca4:	f000 fbca 	bl	800743c <fiprintf>
 8006ca8:	f000 fbda 	bl	8007460 <abort>
 8006cac:	4b04      	ldr	r3, [pc, #16]	; (8006cc0 <__assert_func+0x38>)
 8006cae:	461c      	mov	r4, r3
 8006cb0:	e7f3      	b.n	8006c9a <__assert_func+0x12>
 8006cb2:	bf00      	nop
 8006cb4:	20000060 	.word	0x20000060
 8006cb8:	08007da2 	.word	0x08007da2
 8006cbc:	08007daf 	.word	0x08007daf
 8006cc0:	08007ddd 	.word	0x08007ddd

08006cc4 <_calloc_r>:
 8006cc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cc6:	fba1 2402 	umull	r2, r4, r1, r2
 8006cca:	b94c      	cbnz	r4, 8006ce0 <_calloc_r+0x1c>
 8006ccc:	4611      	mov	r1, r2
 8006cce:	9201      	str	r2, [sp, #4]
 8006cd0:	f7fe f9b0 	bl	8005034 <_malloc_r>
 8006cd4:	9a01      	ldr	r2, [sp, #4]
 8006cd6:	4605      	mov	r5, r0
 8006cd8:	b930      	cbnz	r0, 8006ce8 <_calloc_r+0x24>
 8006cda:	4628      	mov	r0, r5
 8006cdc:	b003      	add	sp, #12
 8006cde:	bd30      	pop	{r4, r5, pc}
 8006ce0:	220c      	movs	r2, #12
 8006ce2:	6002      	str	r2, [r0, #0]
 8006ce4:	2500      	movs	r5, #0
 8006ce6:	e7f8      	b.n	8006cda <_calloc_r+0x16>
 8006ce8:	4621      	mov	r1, r4
 8006cea:	f7fd fa2c 	bl	8004146 <memset>
 8006cee:	e7f4      	b.n	8006cda <_calloc_r+0x16>

08006cf0 <rshift>:
 8006cf0:	6903      	ldr	r3, [r0, #16]
 8006cf2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006cf6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006cfa:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006cfe:	f100 0414 	add.w	r4, r0, #20
 8006d02:	dd45      	ble.n	8006d90 <rshift+0xa0>
 8006d04:	f011 011f 	ands.w	r1, r1, #31
 8006d08:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006d0c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006d10:	d10c      	bne.n	8006d2c <rshift+0x3c>
 8006d12:	f100 0710 	add.w	r7, r0, #16
 8006d16:	4629      	mov	r1, r5
 8006d18:	42b1      	cmp	r1, r6
 8006d1a:	d334      	bcc.n	8006d86 <rshift+0x96>
 8006d1c:	1a9b      	subs	r3, r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	1eea      	subs	r2, r5, #3
 8006d22:	4296      	cmp	r6, r2
 8006d24:	bf38      	it	cc
 8006d26:	2300      	movcc	r3, #0
 8006d28:	4423      	add	r3, r4
 8006d2a:	e015      	b.n	8006d58 <rshift+0x68>
 8006d2c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006d30:	f1c1 0820 	rsb	r8, r1, #32
 8006d34:	40cf      	lsrs	r7, r1
 8006d36:	f105 0e04 	add.w	lr, r5, #4
 8006d3a:	46a1      	mov	r9, r4
 8006d3c:	4576      	cmp	r6, lr
 8006d3e:	46f4      	mov	ip, lr
 8006d40:	d815      	bhi.n	8006d6e <rshift+0x7e>
 8006d42:	1a9a      	subs	r2, r3, r2
 8006d44:	0092      	lsls	r2, r2, #2
 8006d46:	3a04      	subs	r2, #4
 8006d48:	3501      	adds	r5, #1
 8006d4a:	42ae      	cmp	r6, r5
 8006d4c:	bf38      	it	cc
 8006d4e:	2200      	movcc	r2, #0
 8006d50:	18a3      	adds	r3, r4, r2
 8006d52:	50a7      	str	r7, [r4, r2]
 8006d54:	b107      	cbz	r7, 8006d58 <rshift+0x68>
 8006d56:	3304      	adds	r3, #4
 8006d58:	1b1a      	subs	r2, r3, r4
 8006d5a:	42a3      	cmp	r3, r4
 8006d5c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006d60:	bf08      	it	eq
 8006d62:	2300      	moveq	r3, #0
 8006d64:	6102      	str	r2, [r0, #16]
 8006d66:	bf08      	it	eq
 8006d68:	6143      	streq	r3, [r0, #20]
 8006d6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d6e:	f8dc c000 	ldr.w	ip, [ip]
 8006d72:	fa0c fc08 	lsl.w	ip, ip, r8
 8006d76:	ea4c 0707 	orr.w	r7, ip, r7
 8006d7a:	f849 7b04 	str.w	r7, [r9], #4
 8006d7e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006d82:	40cf      	lsrs	r7, r1
 8006d84:	e7da      	b.n	8006d3c <rshift+0x4c>
 8006d86:	f851 cb04 	ldr.w	ip, [r1], #4
 8006d8a:	f847 cf04 	str.w	ip, [r7, #4]!
 8006d8e:	e7c3      	b.n	8006d18 <rshift+0x28>
 8006d90:	4623      	mov	r3, r4
 8006d92:	e7e1      	b.n	8006d58 <rshift+0x68>

08006d94 <__hexdig_fun>:
 8006d94:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006d98:	2b09      	cmp	r3, #9
 8006d9a:	d802      	bhi.n	8006da2 <__hexdig_fun+0xe>
 8006d9c:	3820      	subs	r0, #32
 8006d9e:	b2c0      	uxtb	r0, r0
 8006da0:	4770      	bx	lr
 8006da2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006da6:	2b05      	cmp	r3, #5
 8006da8:	d801      	bhi.n	8006dae <__hexdig_fun+0x1a>
 8006daa:	3847      	subs	r0, #71	; 0x47
 8006dac:	e7f7      	b.n	8006d9e <__hexdig_fun+0xa>
 8006dae:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006db2:	2b05      	cmp	r3, #5
 8006db4:	d801      	bhi.n	8006dba <__hexdig_fun+0x26>
 8006db6:	3827      	subs	r0, #39	; 0x27
 8006db8:	e7f1      	b.n	8006d9e <__hexdig_fun+0xa>
 8006dba:	2000      	movs	r0, #0
 8006dbc:	4770      	bx	lr
	...

08006dc0 <__gethex>:
 8006dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dc4:	4617      	mov	r7, r2
 8006dc6:	680a      	ldr	r2, [r1, #0]
 8006dc8:	b085      	sub	sp, #20
 8006dca:	f102 0b02 	add.w	fp, r2, #2
 8006dce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006dd2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006dd6:	4681      	mov	r9, r0
 8006dd8:	468a      	mov	sl, r1
 8006dda:	9302      	str	r3, [sp, #8]
 8006ddc:	32fe      	adds	r2, #254	; 0xfe
 8006dde:	eb02 030b 	add.w	r3, r2, fp
 8006de2:	46d8      	mov	r8, fp
 8006de4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8006de8:	9301      	str	r3, [sp, #4]
 8006dea:	2830      	cmp	r0, #48	; 0x30
 8006dec:	d0f7      	beq.n	8006dde <__gethex+0x1e>
 8006dee:	f7ff ffd1 	bl	8006d94 <__hexdig_fun>
 8006df2:	4604      	mov	r4, r0
 8006df4:	2800      	cmp	r0, #0
 8006df6:	d138      	bne.n	8006e6a <__gethex+0xaa>
 8006df8:	49a7      	ldr	r1, [pc, #668]	; (8007098 <__gethex+0x2d8>)
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	4640      	mov	r0, r8
 8006dfe:	f7ff ff09 	bl	8006c14 <strncmp>
 8006e02:	4606      	mov	r6, r0
 8006e04:	2800      	cmp	r0, #0
 8006e06:	d169      	bne.n	8006edc <__gethex+0x11c>
 8006e08:	f898 0001 	ldrb.w	r0, [r8, #1]
 8006e0c:	465d      	mov	r5, fp
 8006e0e:	f7ff ffc1 	bl	8006d94 <__hexdig_fun>
 8006e12:	2800      	cmp	r0, #0
 8006e14:	d064      	beq.n	8006ee0 <__gethex+0x120>
 8006e16:	465a      	mov	r2, fp
 8006e18:	7810      	ldrb	r0, [r2, #0]
 8006e1a:	2830      	cmp	r0, #48	; 0x30
 8006e1c:	4690      	mov	r8, r2
 8006e1e:	f102 0201 	add.w	r2, r2, #1
 8006e22:	d0f9      	beq.n	8006e18 <__gethex+0x58>
 8006e24:	f7ff ffb6 	bl	8006d94 <__hexdig_fun>
 8006e28:	2301      	movs	r3, #1
 8006e2a:	fab0 f480 	clz	r4, r0
 8006e2e:	0964      	lsrs	r4, r4, #5
 8006e30:	465e      	mov	r6, fp
 8006e32:	9301      	str	r3, [sp, #4]
 8006e34:	4642      	mov	r2, r8
 8006e36:	4615      	mov	r5, r2
 8006e38:	3201      	adds	r2, #1
 8006e3a:	7828      	ldrb	r0, [r5, #0]
 8006e3c:	f7ff ffaa 	bl	8006d94 <__hexdig_fun>
 8006e40:	2800      	cmp	r0, #0
 8006e42:	d1f8      	bne.n	8006e36 <__gethex+0x76>
 8006e44:	4994      	ldr	r1, [pc, #592]	; (8007098 <__gethex+0x2d8>)
 8006e46:	2201      	movs	r2, #1
 8006e48:	4628      	mov	r0, r5
 8006e4a:	f7ff fee3 	bl	8006c14 <strncmp>
 8006e4e:	b978      	cbnz	r0, 8006e70 <__gethex+0xb0>
 8006e50:	b946      	cbnz	r6, 8006e64 <__gethex+0xa4>
 8006e52:	1c6e      	adds	r6, r5, #1
 8006e54:	4632      	mov	r2, r6
 8006e56:	4615      	mov	r5, r2
 8006e58:	3201      	adds	r2, #1
 8006e5a:	7828      	ldrb	r0, [r5, #0]
 8006e5c:	f7ff ff9a 	bl	8006d94 <__hexdig_fun>
 8006e60:	2800      	cmp	r0, #0
 8006e62:	d1f8      	bne.n	8006e56 <__gethex+0x96>
 8006e64:	1b73      	subs	r3, r6, r5
 8006e66:	009e      	lsls	r6, r3, #2
 8006e68:	e004      	b.n	8006e74 <__gethex+0xb4>
 8006e6a:	2400      	movs	r4, #0
 8006e6c:	4626      	mov	r6, r4
 8006e6e:	e7e1      	b.n	8006e34 <__gethex+0x74>
 8006e70:	2e00      	cmp	r6, #0
 8006e72:	d1f7      	bne.n	8006e64 <__gethex+0xa4>
 8006e74:	782b      	ldrb	r3, [r5, #0]
 8006e76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006e7a:	2b50      	cmp	r3, #80	; 0x50
 8006e7c:	d13d      	bne.n	8006efa <__gethex+0x13a>
 8006e7e:	786b      	ldrb	r3, [r5, #1]
 8006e80:	2b2b      	cmp	r3, #43	; 0x2b
 8006e82:	d02f      	beq.n	8006ee4 <__gethex+0x124>
 8006e84:	2b2d      	cmp	r3, #45	; 0x2d
 8006e86:	d031      	beq.n	8006eec <__gethex+0x12c>
 8006e88:	1c69      	adds	r1, r5, #1
 8006e8a:	f04f 0b00 	mov.w	fp, #0
 8006e8e:	7808      	ldrb	r0, [r1, #0]
 8006e90:	f7ff ff80 	bl	8006d94 <__hexdig_fun>
 8006e94:	1e42      	subs	r2, r0, #1
 8006e96:	b2d2      	uxtb	r2, r2
 8006e98:	2a18      	cmp	r2, #24
 8006e9a:	d82e      	bhi.n	8006efa <__gethex+0x13a>
 8006e9c:	f1a0 0210 	sub.w	r2, r0, #16
 8006ea0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006ea4:	f7ff ff76 	bl	8006d94 <__hexdig_fun>
 8006ea8:	f100 3cff 	add.w	ip, r0, #4294967295
 8006eac:	fa5f fc8c 	uxtb.w	ip, ip
 8006eb0:	f1bc 0f18 	cmp.w	ip, #24
 8006eb4:	d91d      	bls.n	8006ef2 <__gethex+0x132>
 8006eb6:	f1bb 0f00 	cmp.w	fp, #0
 8006eba:	d000      	beq.n	8006ebe <__gethex+0xfe>
 8006ebc:	4252      	negs	r2, r2
 8006ebe:	4416      	add	r6, r2
 8006ec0:	f8ca 1000 	str.w	r1, [sl]
 8006ec4:	b1dc      	cbz	r4, 8006efe <__gethex+0x13e>
 8006ec6:	9b01      	ldr	r3, [sp, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	bf14      	ite	ne
 8006ecc:	f04f 0800 	movne.w	r8, #0
 8006ed0:	f04f 0806 	moveq.w	r8, #6
 8006ed4:	4640      	mov	r0, r8
 8006ed6:	b005      	add	sp, #20
 8006ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006edc:	4645      	mov	r5, r8
 8006ede:	4626      	mov	r6, r4
 8006ee0:	2401      	movs	r4, #1
 8006ee2:	e7c7      	b.n	8006e74 <__gethex+0xb4>
 8006ee4:	f04f 0b00 	mov.w	fp, #0
 8006ee8:	1ca9      	adds	r1, r5, #2
 8006eea:	e7d0      	b.n	8006e8e <__gethex+0xce>
 8006eec:	f04f 0b01 	mov.w	fp, #1
 8006ef0:	e7fa      	b.n	8006ee8 <__gethex+0x128>
 8006ef2:	230a      	movs	r3, #10
 8006ef4:	fb03 0002 	mla	r0, r3, r2, r0
 8006ef8:	e7d0      	b.n	8006e9c <__gethex+0xdc>
 8006efa:	4629      	mov	r1, r5
 8006efc:	e7e0      	b.n	8006ec0 <__gethex+0x100>
 8006efe:	eba5 0308 	sub.w	r3, r5, r8
 8006f02:	3b01      	subs	r3, #1
 8006f04:	4621      	mov	r1, r4
 8006f06:	2b07      	cmp	r3, #7
 8006f08:	dc0a      	bgt.n	8006f20 <__gethex+0x160>
 8006f0a:	4648      	mov	r0, r9
 8006f0c:	f7fe f91e 	bl	800514c <_Balloc>
 8006f10:	4604      	mov	r4, r0
 8006f12:	b940      	cbnz	r0, 8006f26 <__gethex+0x166>
 8006f14:	4b61      	ldr	r3, [pc, #388]	; (800709c <__gethex+0x2dc>)
 8006f16:	4602      	mov	r2, r0
 8006f18:	21e4      	movs	r1, #228	; 0xe4
 8006f1a:	4861      	ldr	r0, [pc, #388]	; (80070a0 <__gethex+0x2e0>)
 8006f1c:	f7ff feb4 	bl	8006c88 <__assert_func>
 8006f20:	3101      	adds	r1, #1
 8006f22:	105b      	asrs	r3, r3, #1
 8006f24:	e7ef      	b.n	8006f06 <__gethex+0x146>
 8006f26:	f100 0a14 	add.w	sl, r0, #20
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	495a      	ldr	r1, [pc, #360]	; (8007098 <__gethex+0x2d8>)
 8006f2e:	f8cd a004 	str.w	sl, [sp, #4]
 8006f32:	469b      	mov	fp, r3
 8006f34:	45a8      	cmp	r8, r5
 8006f36:	d342      	bcc.n	8006fbe <__gethex+0x1fe>
 8006f38:	9801      	ldr	r0, [sp, #4]
 8006f3a:	f840 bb04 	str.w	fp, [r0], #4
 8006f3e:	eba0 000a 	sub.w	r0, r0, sl
 8006f42:	1080      	asrs	r0, r0, #2
 8006f44:	6120      	str	r0, [r4, #16]
 8006f46:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8006f4a:	4658      	mov	r0, fp
 8006f4c:	f7fe f9f0 	bl	8005330 <__hi0bits>
 8006f50:	683d      	ldr	r5, [r7, #0]
 8006f52:	eba8 0000 	sub.w	r0, r8, r0
 8006f56:	42a8      	cmp	r0, r5
 8006f58:	dd59      	ble.n	800700e <__gethex+0x24e>
 8006f5a:	eba0 0805 	sub.w	r8, r0, r5
 8006f5e:	4641      	mov	r1, r8
 8006f60:	4620      	mov	r0, r4
 8006f62:	f7fe fd7f 	bl	8005a64 <__any_on>
 8006f66:	4683      	mov	fp, r0
 8006f68:	b1b8      	cbz	r0, 8006f9a <__gethex+0x1da>
 8006f6a:	f108 33ff 	add.w	r3, r8, #4294967295
 8006f6e:	1159      	asrs	r1, r3, #5
 8006f70:	f003 021f 	and.w	r2, r3, #31
 8006f74:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8006f78:	f04f 0b01 	mov.w	fp, #1
 8006f7c:	fa0b f202 	lsl.w	r2, fp, r2
 8006f80:	420a      	tst	r2, r1
 8006f82:	d00a      	beq.n	8006f9a <__gethex+0x1da>
 8006f84:	455b      	cmp	r3, fp
 8006f86:	dd06      	ble.n	8006f96 <__gethex+0x1d6>
 8006f88:	f1a8 0102 	sub.w	r1, r8, #2
 8006f8c:	4620      	mov	r0, r4
 8006f8e:	f7fe fd69 	bl	8005a64 <__any_on>
 8006f92:	2800      	cmp	r0, #0
 8006f94:	d138      	bne.n	8007008 <__gethex+0x248>
 8006f96:	f04f 0b02 	mov.w	fp, #2
 8006f9a:	4641      	mov	r1, r8
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	f7ff fea7 	bl	8006cf0 <rshift>
 8006fa2:	4446      	add	r6, r8
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	42b3      	cmp	r3, r6
 8006fa8:	da41      	bge.n	800702e <__gethex+0x26e>
 8006faa:	4621      	mov	r1, r4
 8006fac:	4648      	mov	r0, r9
 8006fae:	f7fe f90d 	bl	80051cc <_Bfree>
 8006fb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	6013      	str	r3, [r2, #0]
 8006fb8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8006fbc:	e78a      	b.n	8006ed4 <__gethex+0x114>
 8006fbe:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8006fc2:	2a2e      	cmp	r2, #46	; 0x2e
 8006fc4:	d014      	beq.n	8006ff0 <__gethex+0x230>
 8006fc6:	2b20      	cmp	r3, #32
 8006fc8:	d106      	bne.n	8006fd8 <__gethex+0x218>
 8006fca:	9b01      	ldr	r3, [sp, #4]
 8006fcc:	f843 bb04 	str.w	fp, [r3], #4
 8006fd0:	f04f 0b00 	mov.w	fp, #0
 8006fd4:	9301      	str	r3, [sp, #4]
 8006fd6:	465b      	mov	r3, fp
 8006fd8:	7828      	ldrb	r0, [r5, #0]
 8006fda:	9303      	str	r3, [sp, #12]
 8006fdc:	f7ff feda 	bl	8006d94 <__hexdig_fun>
 8006fe0:	9b03      	ldr	r3, [sp, #12]
 8006fe2:	f000 000f 	and.w	r0, r0, #15
 8006fe6:	4098      	lsls	r0, r3
 8006fe8:	ea4b 0b00 	orr.w	fp, fp, r0
 8006fec:	3304      	adds	r3, #4
 8006fee:	e7a1      	b.n	8006f34 <__gethex+0x174>
 8006ff0:	45a8      	cmp	r8, r5
 8006ff2:	d8e8      	bhi.n	8006fc6 <__gethex+0x206>
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	9303      	str	r3, [sp, #12]
 8006ffa:	f7ff fe0b 	bl	8006c14 <strncmp>
 8006ffe:	4926      	ldr	r1, [pc, #152]	; (8007098 <__gethex+0x2d8>)
 8007000:	9b03      	ldr	r3, [sp, #12]
 8007002:	2800      	cmp	r0, #0
 8007004:	d1df      	bne.n	8006fc6 <__gethex+0x206>
 8007006:	e795      	b.n	8006f34 <__gethex+0x174>
 8007008:	f04f 0b03 	mov.w	fp, #3
 800700c:	e7c5      	b.n	8006f9a <__gethex+0x1da>
 800700e:	da0b      	bge.n	8007028 <__gethex+0x268>
 8007010:	eba5 0800 	sub.w	r8, r5, r0
 8007014:	4621      	mov	r1, r4
 8007016:	4642      	mov	r2, r8
 8007018:	4648      	mov	r0, r9
 800701a:	f7fe faf1 	bl	8005600 <__lshift>
 800701e:	eba6 0608 	sub.w	r6, r6, r8
 8007022:	4604      	mov	r4, r0
 8007024:	f100 0a14 	add.w	sl, r0, #20
 8007028:	f04f 0b00 	mov.w	fp, #0
 800702c:	e7ba      	b.n	8006fa4 <__gethex+0x1e4>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	42b3      	cmp	r3, r6
 8007032:	dd73      	ble.n	800711c <__gethex+0x35c>
 8007034:	1b9e      	subs	r6, r3, r6
 8007036:	42b5      	cmp	r5, r6
 8007038:	dc34      	bgt.n	80070a4 <__gethex+0x2e4>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2b02      	cmp	r3, #2
 800703e:	d023      	beq.n	8007088 <__gethex+0x2c8>
 8007040:	2b03      	cmp	r3, #3
 8007042:	d025      	beq.n	8007090 <__gethex+0x2d0>
 8007044:	2b01      	cmp	r3, #1
 8007046:	d115      	bne.n	8007074 <__gethex+0x2b4>
 8007048:	42b5      	cmp	r5, r6
 800704a:	d113      	bne.n	8007074 <__gethex+0x2b4>
 800704c:	2d01      	cmp	r5, #1
 800704e:	d10b      	bne.n	8007068 <__gethex+0x2a8>
 8007050:	9a02      	ldr	r2, [sp, #8]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6013      	str	r3, [r2, #0]
 8007056:	2301      	movs	r3, #1
 8007058:	6123      	str	r3, [r4, #16]
 800705a:	f8ca 3000 	str.w	r3, [sl]
 800705e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007060:	f04f 0862 	mov.w	r8, #98	; 0x62
 8007064:	601c      	str	r4, [r3, #0]
 8007066:	e735      	b.n	8006ed4 <__gethex+0x114>
 8007068:	1e69      	subs	r1, r5, #1
 800706a:	4620      	mov	r0, r4
 800706c:	f7fe fcfa 	bl	8005a64 <__any_on>
 8007070:	2800      	cmp	r0, #0
 8007072:	d1ed      	bne.n	8007050 <__gethex+0x290>
 8007074:	4621      	mov	r1, r4
 8007076:	4648      	mov	r0, r9
 8007078:	f7fe f8a8 	bl	80051cc <_Bfree>
 800707c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800707e:	2300      	movs	r3, #0
 8007080:	6013      	str	r3, [r2, #0]
 8007082:	f04f 0850 	mov.w	r8, #80	; 0x50
 8007086:	e725      	b.n	8006ed4 <__gethex+0x114>
 8007088:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1f2      	bne.n	8007074 <__gethex+0x2b4>
 800708e:	e7df      	b.n	8007050 <__gethex+0x290>
 8007090:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1dc      	bne.n	8007050 <__gethex+0x290>
 8007096:	e7ed      	b.n	8007074 <__gethex+0x2b4>
 8007098:	08007c34 	.word	0x08007c34
 800709c:	08007acc 	.word	0x08007acc
 80070a0:	08007dde 	.word	0x08007dde
 80070a4:	f106 38ff 	add.w	r8, r6, #4294967295
 80070a8:	f1bb 0f00 	cmp.w	fp, #0
 80070ac:	d133      	bne.n	8007116 <__gethex+0x356>
 80070ae:	f1b8 0f00 	cmp.w	r8, #0
 80070b2:	d004      	beq.n	80070be <__gethex+0x2fe>
 80070b4:	4641      	mov	r1, r8
 80070b6:	4620      	mov	r0, r4
 80070b8:	f7fe fcd4 	bl	8005a64 <__any_on>
 80070bc:	4683      	mov	fp, r0
 80070be:	ea4f 1268 	mov.w	r2, r8, asr #5
 80070c2:	2301      	movs	r3, #1
 80070c4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80070c8:	f008 081f 	and.w	r8, r8, #31
 80070cc:	fa03 f308 	lsl.w	r3, r3, r8
 80070d0:	4213      	tst	r3, r2
 80070d2:	4631      	mov	r1, r6
 80070d4:	4620      	mov	r0, r4
 80070d6:	bf18      	it	ne
 80070d8:	f04b 0b02 	orrne.w	fp, fp, #2
 80070dc:	1bad      	subs	r5, r5, r6
 80070de:	f7ff fe07 	bl	8006cf0 <rshift>
 80070e2:	687e      	ldr	r6, [r7, #4]
 80070e4:	f04f 0802 	mov.w	r8, #2
 80070e8:	f1bb 0f00 	cmp.w	fp, #0
 80070ec:	d04a      	beq.n	8007184 <__gethex+0x3c4>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d016      	beq.n	8007122 <__gethex+0x362>
 80070f4:	2b03      	cmp	r3, #3
 80070f6:	d018      	beq.n	800712a <__gethex+0x36a>
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d109      	bne.n	8007110 <__gethex+0x350>
 80070fc:	f01b 0f02 	tst.w	fp, #2
 8007100:	d006      	beq.n	8007110 <__gethex+0x350>
 8007102:	f8da 3000 	ldr.w	r3, [sl]
 8007106:	ea4b 0b03 	orr.w	fp, fp, r3
 800710a:	f01b 0f01 	tst.w	fp, #1
 800710e:	d10f      	bne.n	8007130 <__gethex+0x370>
 8007110:	f048 0810 	orr.w	r8, r8, #16
 8007114:	e036      	b.n	8007184 <__gethex+0x3c4>
 8007116:	f04f 0b01 	mov.w	fp, #1
 800711a:	e7d0      	b.n	80070be <__gethex+0x2fe>
 800711c:	f04f 0801 	mov.w	r8, #1
 8007120:	e7e2      	b.n	80070e8 <__gethex+0x328>
 8007122:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007124:	f1c3 0301 	rsb	r3, r3, #1
 8007128:	930f      	str	r3, [sp, #60]	; 0x3c
 800712a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800712c:	2b00      	cmp	r3, #0
 800712e:	d0ef      	beq.n	8007110 <__gethex+0x350>
 8007130:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007134:	f104 0214 	add.w	r2, r4, #20
 8007138:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800713c:	9301      	str	r3, [sp, #4]
 800713e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8007142:	2300      	movs	r3, #0
 8007144:	4694      	mov	ip, r2
 8007146:	f852 1b04 	ldr.w	r1, [r2], #4
 800714a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800714e:	d01e      	beq.n	800718e <__gethex+0x3ce>
 8007150:	3101      	adds	r1, #1
 8007152:	f8cc 1000 	str.w	r1, [ip]
 8007156:	f1b8 0f02 	cmp.w	r8, #2
 800715a:	f104 0214 	add.w	r2, r4, #20
 800715e:	d13d      	bne.n	80071dc <__gethex+0x41c>
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	3b01      	subs	r3, #1
 8007164:	42ab      	cmp	r3, r5
 8007166:	d10b      	bne.n	8007180 <__gethex+0x3c0>
 8007168:	1169      	asrs	r1, r5, #5
 800716a:	2301      	movs	r3, #1
 800716c:	f005 051f 	and.w	r5, r5, #31
 8007170:	fa03 f505 	lsl.w	r5, r3, r5
 8007174:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007178:	421d      	tst	r5, r3
 800717a:	bf18      	it	ne
 800717c:	f04f 0801 	movne.w	r8, #1
 8007180:	f048 0820 	orr.w	r8, r8, #32
 8007184:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007186:	601c      	str	r4, [r3, #0]
 8007188:	9b02      	ldr	r3, [sp, #8]
 800718a:	601e      	str	r6, [r3, #0]
 800718c:	e6a2      	b.n	8006ed4 <__gethex+0x114>
 800718e:	4290      	cmp	r0, r2
 8007190:	f842 3c04 	str.w	r3, [r2, #-4]
 8007194:	d8d6      	bhi.n	8007144 <__gethex+0x384>
 8007196:	68a2      	ldr	r2, [r4, #8]
 8007198:	4593      	cmp	fp, r2
 800719a:	db17      	blt.n	80071cc <__gethex+0x40c>
 800719c:	6861      	ldr	r1, [r4, #4]
 800719e:	4648      	mov	r0, r9
 80071a0:	3101      	adds	r1, #1
 80071a2:	f7fd ffd3 	bl	800514c <_Balloc>
 80071a6:	4682      	mov	sl, r0
 80071a8:	b918      	cbnz	r0, 80071b2 <__gethex+0x3f2>
 80071aa:	4b1b      	ldr	r3, [pc, #108]	; (8007218 <__gethex+0x458>)
 80071ac:	4602      	mov	r2, r0
 80071ae:	2184      	movs	r1, #132	; 0x84
 80071b0:	e6b3      	b.n	8006f1a <__gethex+0x15a>
 80071b2:	6922      	ldr	r2, [r4, #16]
 80071b4:	3202      	adds	r2, #2
 80071b6:	f104 010c 	add.w	r1, r4, #12
 80071ba:	0092      	lsls	r2, r2, #2
 80071bc:	300c      	adds	r0, #12
 80071be:	f7ff fd4b 	bl	8006c58 <memcpy>
 80071c2:	4621      	mov	r1, r4
 80071c4:	4648      	mov	r0, r9
 80071c6:	f7fe f801 	bl	80051cc <_Bfree>
 80071ca:	4654      	mov	r4, sl
 80071cc:	6922      	ldr	r2, [r4, #16]
 80071ce:	1c51      	adds	r1, r2, #1
 80071d0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80071d4:	6121      	str	r1, [r4, #16]
 80071d6:	2101      	movs	r1, #1
 80071d8:	6151      	str	r1, [r2, #20]
 80071da:	e7bc      	b.n	8007156 <__gethex+0x396>
 80071dc:	6921      	ldr	r1, [r4, #16]
 80071de:	4559      	cmp	r1, fp
 80071e0:	dd0b      	ble.n	80071fa <__gethex+0x43a>
 80071e2:	2101      	movs	r1, #1
 80071e4:	4620      	mov	r0, r4
 80071e6:	f7ff fd83 	bl	8006cf0 <rshift>
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	3601      	adds	r6, #1
 80071ee:	42b3      	cmp	r3, r6
 80071f0:	f6ff aedb 	blt.w	8006faa <__gethex+0x1ea>
 80071f4:	f04f 0801 	mov.w	r8, #1
 80071f8:	e7c2      	b.n	8007180 <__gethex+0x3c0>
 80071fa:	f015 051f 	ands.w	r5, r5, #31
 80071fe:	d0f9      	beq.n	80071f4 <__gethex+0x434>
 8007200:	9b01      	ldr	r3, [sp, #4]
 8007202:	441a      	add	r2, r3
 8007204:	f1c5 0520 	rsb	r5, r5, #32
 8007208:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800720c:	f7fe f890 	bl	8005330 <__hi0bits>
 8007210:	42a8      	cmp	r0, r5
 8007212:	dbe6      	blt.n	80071e2 <__gethex+0x422>
 8007214:	e7ee      	b.n	80071f4 <__gethex+0x434>
 8007216:	bf00      	nop
 8007218:	08007acc 	.word	0x08007acc

0800721c <L_shift>:
 800721c:	f1c2 0208 	rsb	r2, r2, #8
 8007220:	0092      	lsls	r2, r2, #2
 8007222:	b570      	push	{r4, r5, r6, lr}
 8007224:	f1c2 0620 	rsb	r6, r2, #32
 8007228:	6843      	ldr	r3, [r0, #4]
 800722a:	6804      	ldr	r4, [r0, #0]
 800722c:	fa03 f506 	lsl.w	r5, r3, r6
 8007230:	432c      	orrs	r4, r5
 8007232:	40d3      	lsrs	r3, r2
 8007234:	6004      	str	r4, [r0, #0]
 8007236:	f840 3f04 	str.w	r3, [r0, #4]!
 800723a:	4288      	cmp	r0, r1
 800723c:	d3f4      	bcc.n	8007228 <L_shift+0xc>
 800723e:	bd70      	pop	{r4, r5, r6, pc}

08007240 <__match>:
 8007240:	b530      	push	{r4, r5, lr}
 8007242:	6803      	ldr	r3, [r0, #0]
 8007244:	3301      	adds	r3, #1
 8007246:	f811 4b01 	ldrb.w	r4, [r1], #1
 800724a:	b914      	cbnz	r4, 8007252 <__match+0x12>
 800724c:	6003      	str	r3, [r0, #0]
 800724e:	2001      	movs	r0, #1
 8007250:	bd30      	pop	{r4, r5, pc}
 8007252:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007256:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800725a:	2d19      	cmp	r5, #25
 800725c:	bf98      	it	ls
 800725e:	3220      	addls	r2, #32
 8007260:	42a2      	cmp	r2, r4
 8007262:	d0f0      	beq.n	8007246 <__match+0x6>
 8007264:	2000      	movs	r0, #0
 8007266:	e7f3      	b.n	8007250 <__match+0x10>

08007268 <__hexnan>:
 8007268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800726c:	680b      	ldr	r3, [r1, #0]
 800726e:	6801      	ldr	r1, [r0, #0]
 8007270:	115e      	asrs	r6, r3, #5
 8007272:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007276:	f013 031f 	ands.w	r3, r3, #31
 800727a:	b087      	sub	sp, #28
 800727c:	bf18      	it	ne
 800727e:	3604      	addne	r6, #4
 8007280:	2500      	movs	r5, #0
 8007282:	1f37      	subs	r7, r6, #4
 8007284:	4682      	mov	sl, r0
 8007286:	4690      	mov	r8, r2
 8007288:	9301      	str	r3, [sp, #4]
 800728a:	f846 5c04 	str.w	r5, [r6, #-4]
 800728e:	46b9      	mov	r9, r7
 8007290:	463c      	mov	r4, r7
 8007292:	9502      	str	r5, [sp, #8]
 8007294:	46ab      	mov	fp, r5
 8007296:	784a      	ldrb	r2, [r1, #1]
 8007298:	1c4b      	adds	r3, r1, #1
 800729a:	9303      	str	r3, [sp, #12]
 800729c:	b342      	cbz	r2, 80072f0 <__hexnan+0x88>
 800729e:	4610      	mov	r0, r2
 80072a0:	9105      	str	r1, [sp, #20]
 80072a2:	9204      	str	r2, [sp, #16]
 80072a4:	f7ff fd76 	bl	8006d94 <__hexdig_fun>
 80072a8:	2800      	cmp	r0, #0
 80072aa:	d14f      	bne.n	800734c <__hexnan+0xe4>
 80072ac:	9a04      	ldr	r2, [sp, #16]
 80072ae:	9905      	ldr	r1, [sp, #20]
 80072b0:	2a20      	cmp	r2, #32
 80072b2:	d818      	bhi.n	80072e6 <__hexnan+0x7e>
 80072b4:	9b02      	ldr	r3, [sp, #8]
 80072b6:	459b      	cmp	fp, r3
 80072b8:	dd13      	ble.n	80072e2 <__hexnan+0x7a>
 80072ba:	454c      	cmp	r4, r9
 80072bc:	d206      	bcs.n	80072cc <__hexnan+0x64>
 80072be:	2d07      	cmp	r5, #7
 80072c0:	dc04      	bgt.n	80072cc <__hexnan+0x64>
 80072c2:	462a      	mov	r2, r5
 80072c4:	4649      	mov	r1, r9
 80072c6:	4620      	mov	r0, r4
 80072c8:	f7ff ffa8 	bl	800721c <L_shift>
 80072cc:	4544      	cmp	r4, r8
 80072ce:	d950      	bls.n	8007372 <__hexnan+0x10a>
 80072d0:	2300      	movs	r3, #0
 80072d2:	f1a4 0904 	sub.w	r9, r4, #4
 80072d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80072da:	f8cd b008 	str.w	fp, [sp, #8]
 80072de:	464c      	mov	r4, r9
 80072e0:	461d      	mov	r5, r3
 80072e2:	9903      	ldr	r1, [sp, #12]
 80072e4:	e7d7      	b.n	8007296 <__hexnan+0x2e>
 80072e6:	2a29      	cmp	r2, #41	; 0x29
 80072e8:	d155      	bne.n	8007396 <__hexnan+0x12e>
 80072ea:	3102      	adds	r1, #2
 80072ec:	f8ca 1000 	str.w	r1, [sl]
 80072f0:	f1bb 0f00 	cmp.w	fp, #0
 80072f4:	d04f      	beq.n	8007396 <__hexnan+0x12e>
 80072f6:	454c      	cmp	r4, r9
 80072f8:	d206      	bcs.n	8007308 <__hexnan+0xa0>
 80072fa:	2d07      	cmp	r5, #7
 80072fc:	dc04      	bgt.n	8007308 <__hexnan+0xa0>
 80072fe:	462a      	mov	r2, r5
 8007300:	4649      	mov	r1, r9
 8007302:	4620      	mov	r0, r4
 8007304:	f7ff ff8a 	bl	800721c <L_shift>
 8007308:	4544      	cmp	r4, r8
 800730a:	d934      	bls.n	8007376 <__hexnan+0x10e>
 800730c:	f1a8 0204 	sub.w	r2, r8, #4
 8007310:	4623      	mov	r3, r4
 8007312:	f853 1b04 	ldr.w	r1, [r3], #4
 8007316:	f842 1f04 	str.w	r1, [r2, #4]!
 800731a:	429f      	cmp	r7, r3
 800731c:	d2f9      	bcs.n	8007312 <__hexnan+0xaa>
 800731e:	1b3b      	subs	r3, r7, r4
 8007320:	f023 0303 	bic.w	r3, r3, #3
 8007324:	3304      	adds	r3, #4
 8007326:	3e03      	subs	r6, #3
 8007328:	3401      	adds	r4, #1
 800732a:	42a6      	cmp	r6, r4
 800732c:	bf38      	it	cc
 800732e:	2304      	movcc	r3, #4
 8007330:	4443      	add	r3, r8
 8007332:	2200      	movs	r2, #0
 8007334:	f843 2b04 	str.w	r2, [r3], #4
 8007338:	429f      	cmp	r7, r3
 800733a:	d2fb      	bcs.n	8007334 <__hexnan+0xcc>
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	b91b      	cbnz	r3, 8007348 <__hexnan+0xe0>
 8007340:	4547      	cmp	r7, r8
 8007342:	d126      	bne.n	8007392 <__hexnan+0x12a>
 8007344:	2301      	movs	r3, #1
 8007346:	603b      	str	r3, [r7, #0]
 8007348:	2005      	movs	r0, #5
 800734a:	e025      	b.n	8007398 <__hexnan+0x130>
 800734c:	3501      	adds	r5, #1
 800734e:	2d08      	cmp	r5, #8
 8007350:	f10b 0b01 	add.w	fp, fp, #1
 8007354:	dd06      	ble.n	8007364 <__hexnan+0xfc>
 8007356:	4544      	cmp	r4, r8
 8007358:	d9c3      	bls.n	80072e2 <__hexnan+0x7a>
 800735a:	2300      	movs	r3, #0
 800735c:	f844 3c04 	str.w	r3, [r4, #-4]
 8007360:	2501      	movs	r5, #1
 8007362:	3c04      	subs	r4, #4
 8007364:	6822      	ldr	r2, [r4, #0]
 8007366:	f000 000f 	and.w	r0, r0, #15
 800736a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800736e:	6020      	str	r0, [r4, #0]
 8007370:	e7b7      	b.n	80072e2 <__hexnan+0x7a>
 8007372:	2508      	movs	r5, #8
 8007374:	e7b5      	b.n	80072e2 <__hexnan+0x7a>
 8007376:	9b01      	ldr	r3, [sp, #4]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d0df      	beq.n	800733c <__hexnan+0xd4>
 800737c:	f1c3 0320 	rsb	r3, r3, #32
 8007380:	f04f 32ff 	mov.w	r2, #4294967295
 8007384:	40da      	lsrs	r2, r3
 8007386:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800738a:	4013      	ands	r3, r2
 800738c:	f846 3c04 	str.w	r3, [r6, #-4]
 8007390:	e7d4      	b.n	800733c <__hexnan+0xd4>
 8007392:	3f04      	subs	r7, #4
 8007394:	e7d2      	b.n	800733c <__hexnan+0xd4>
 8007396:	2004      	movs	r0, #4
 8007398:	b007      	add	sp, #28
 800739a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800739e <__ascii_mbtowc>:
 800739e:	b082      	sub	sp, #8
 80073a0:	b901      	cbnz	r1, 80073a4 <__ascii_mbtowc+0x6>
 80073a2:	a901      	add	r1, sp, #4
 80073a4:	b142      	cbz	r2, 80073b8 <__ascii_mbtowc+0x1a>
 80073a6:	b14b      	cbz	r3, 80073bc <__ascii_mbtowc+0x1e>
 80073a8:	7813      	ldrb	r3, [r2, #0]
 80073aa:	600b      	str	r3, [r1, #0]
 80073ac:	7812      	ldrb	r2, [r2, #0]
 80073ae:	1e10      	subs	r0, r2, #0
 80073b0:	bf18      	it	ne
 80073b2:	2001      	movne	r0, #1
 80073b4:	b002      	add	sp, #8
 80073b6:	4770      	bx	lr
 80073b8:	4610      	mov	r0, r2
 80073ba:	e7fb      	b.n	80073b4 <__ascii_mbtowc+0x16>
 80073bc:	f06f 0001 	mvn.w	r0, #1
 80073c0:	e7f8      	b.n	80073b4 <__ascii_mbtowc+0x16>

080073c2 <_realloc_r>:
 80073c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073c6:	4680      	mov	r8, r0
 80073c8:	4614      	mov	r4, r2
 80073ca:	460e      	mov	r6, r1
 80073cc:	b921      	cbnz	r1, 80073d8 <_realloc_r+0x16>
 80073ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073d2:	4611      	mov	r1, r2
 80073d4:	f7fd be2e 	b.w	8005034 <_malloc_r>
 80073d8:	b92a      	cbnz	r2, 80073e6 <_realloc_r+0x24>
 80073da:	f7fd fdb7 	bl	8004f4c <_free_r>
 80073de:	4625      	mov	r5, r4
 80073e0:	4628      	mov	r0, r5
 80073e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073e6:	f000 f842 	bl	800746e <_malloc_usable_size_r>
 80073ea:	4284      	cmp	r4, r0
 80073ec:	4607      	mov	r7, r0
 80073ee:	d802      	bhi.n	80073f6 <_realloc_r+0x34>
 80073f0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80073f4:	d812      	bhi.n	800741c <_realloc_r+0x5a>
 80073f6:	4621      	mov	r1, r4
 80073f8:	4640      	mov	r0, r8
 80073fa:	f7fd fe1b 	bl	8005034 <_malloc_r>
 80073fe:	4605      	mov	r5, r0
 8007400:	2800      	cmp	r0, #0
 8007402:	d0ed      	beq.n	80073e0 <_realloc_r+0x1e>
 8007404:	42bc      	cmp	r4, r7
 8007406:	4622      	mov	r2, r4
 8007408:	4631      	mov	r1, r6
 800740a:	bf28      	it	cs
 800740c:	463a      	movcs	r2, r7
 800740e:	f7ff fc23 	bl	8006c58 <memcpy>
 8007412:	4631      	mov	r1, r6
 8007414:	4640      	mov	r0, r8
 8007416:	f7fd fd99 	bl	8004f4c <_free_r>
 800741a:	e7e1      	b.n	80073e0 <_realloc_r+0x1e>
 800741c:	4635      	mov	r5, r6
 800741e:	e7df      	b.n	80073e0 <_realloc_r+0x1e>

08007420 <__ascii_wctomb>:
 8007420:	b149      	cbz	r1, 8007436 <__ascii_wctomb+0x16>
 8007422:	2aff      	cmp	r2, #255	; 0xff
 8007424:	bf85      	ittet	hi
 8007426:	238a      	movhi	r3, #138	; 0x8a
 8007428:	6003      	strhi	r3, [r0, #0]
 800742a:	700a      	strbls	r2, [r1, #0]
 800742c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007430:	bf98      	it	ls
 8007432:	2001      	movls	r0, #1
 8007434:	4770      	bx	lr
 8007436:	4608      	mov	r0, r1
 8007438:	4770      	bx	lr
	...

0800743c <fiprintf>:
 800743c:	b40e      	push	{r1, r2, r3}
 800743e:	b503      	push	{r0, r1, lr}
 8007440:	4601      	mov	r1, r0
 8007442:	ab03      	add	r3, sp, #12
 8007444:	4805      	ldr	r0, [pc, #20]	; (800745c <fiprintf+0x20>)
 8007446:	f853 2b04 	ldr.w	r2, [r3], #4
 800744a:	6800      	ldr	r0, [r0, #0]
 800744c:	9301      	str	r3, [sp, #4]
 800744e:	f000 f83f 	bl	80074d0 <_vfiprintf_r>
 8007452:	b002      	add	sp, #8
 8007454:	f85d eb04 	ldr.w	lr, [sp], #4
 8007458:	b003      	add	sp, #12
 800745a:	4770      	bx	lr
 800745c:	20000060 	.word	0x20000060

08007460 <abort>:
 8007460:	b508      	push	{r3, lr}
 8007462:	2006      	movs	r0, #6
 8007464:	f000 fa0c 	bl	8007880 <raise>
 8007468:	2001      	movs	r0, #1
 800746a:	f7fa fb43 	bl	8001af4 <_exit>

0800746e <_malloc_usable_size_r>:
 800746e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007472:	1f18      	subs	r0, r3, #4
 8007474:	2b00      	cmp	r3, #0
 8007476:	bfbc      	itt	lt
 8007478:	580b      	ldrlt	r3, [r1, r0]
 800747a:	18c0      	addlt	r0, r0, r3
 800747c:	4770      	bx	lr

0800747e <__sfputc_r>:
 800747e:	6893      	ldr	r3, [r2, #8]
 8007480:	3b01      	subs	r3, #1
 8007482:	2b00      	cmp	r3, #0
 8007484:	b410      	push	{r4}
 8007486:	6093      	str	r3, [r2, #8]
 8007488:	da08      	bge.n	800749c <__sfputc_r+0x1e>
 800748a:	6994      	ldr	r4, [r2, #24]
 800748c:	42a3      	cmp	r3, r4
 800748e:	db01      	blt.n	8007494 <__sfputc_r+0x16>
 8007490:	290a      	cmp	r1, #10
 8007492:	d103      	bne.n	800749c <__sfputc_r+0x1e>
 8007494:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007498:	f000 b934 	b.w	8007704 <__swbuf_r>
 800749c:	6813      	ldr	r3, [r2, #0]
 800749e:	1c58      	adds	r0, r3, #1
 80074a0:	6010      	str	r0, [r2, #0]
 80074a2:	7019      	strb	r1, [r3, #0]
 80074a4:	4608      	mov	r0, r1
 80074a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <__sfputs_r>:
 80074ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ae:	4606      	mov	r6, r0
 80074b0:	460f      	mov	r7, r1
 80074b2:	4614      	mov	r4, r2
 80074b4:	18d5      	adds	r5, r2, r3
 80074b6:	42ac      	cmp	r4, r5
 80074b8:	d101      	bne.n	80074be <__sfputs_r+0x12>
 80074ba:	2000      	movs	r0, #0
 80074bc:	e007      	b.n	80074ce <__sfputs_r+0x22>
 80074be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074c2:	463a      	mov	r2, r7
 80074c4:	4630      	mov	r0, r6
 80074c6:	f7ff ffda 	bl	800747e <__sfputc_r>
 80074ca:	1c43      	adds	r3, r0, #1
 80074cc:	d1f3      	bne.n	80074b6 <__sfputs_r+0xa>
 80074ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080074d0 <_vfiprintf_r>:
 80074d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d4:	460d      	mov	r5, r1
 80074d6:	b09d      	sub	sp, #116	; 0x74
 80074d8:	4614      	mov	r4, r2
 80074da:	4698      	mov	r8, r3
 80074dc:	4606      	mov	r6, r0
 80074de:	b118      	cbz	r0, 80074e8 <_vfiprintf_r+0x18>
 80074e0:	6a03      	ldr	r3, [r0, #32]
 80074e2:	b90b      	cbnz	r3, 80074e8 <_vfiprintf_r+0x18>
 80074e4:	f7fc fd96 	bl	8004014 <__sinit>
 80074e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074ea:	07d9      	lsls	r1, r3, #31
 80074ec:	d405      	bmi.n	80074fa <_vfiprintf_r+0x2a>
 80074ee:	89ab      	ldrh	r3, [r5, #12]
 80074f0:	059a      	lsls	r2, r3, #22
 80074f2:	d402      	bmi.n	80074fa <_vfiprintf_r+0x2a>
 80074f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074f6:	f7fc fea4 	bl	8004242 <__retarget_lock_acquire_recursive>
 80074fa:	89ab      	ldrh	r3, [r5, #12]
 80074fc:	071b      	lsls	r3, r3, #28
 80074fe:	d501      	bpl.n	8007504 <_vfiprintf_r+0x34>
 8007500:	692b      	ldr	r3, [r5, #16]
 8007502:	b99b      	cbnz	r3, 800752c <_vfiprintf_r+0x5c>
 8007504:	4629      	mov	r1, r5
 8007506:	4630      	mov	r0, r6
 8007508:	f000 f93a 	bl	8007780 <__swsetup_r>
 800750c:	b170      	cbz	r0, 800752c <_vfiprintf_r+0x5c>
 800750e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007510:	07dc      	lsls	r4, r3, #31
 8007512:	d504      	bpl.n	800751e <_vfiprintf_r+0x4e>
 8007514:	f04f 30ff 	mov.w	r0, #4294967295
 8007518:	b01d      	add	sp, #116	; 0x74
 800751a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800751e:	89ab      	ldrh	r3, [r5, #12]
 8007520:	0598      	lsls	r0, r3, #22
 8007522:	d4f7      	bmi.n	8007514 <_vfiprintf_r+0x44>
 8007524:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007526:	f7fc fe8d 	bl	8004244 <__retarget_lock_release_recursive>
 800752a:	e7f3      	b.n	8007514 <_vfiprintf_r+0x44>
 800752c:	2300      	movs	r3, #0
 800752e:	9309      	str	r3, [sp, #36]	; 0x24
 8007530:	2320      	movs	r3, #32
 8007532:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007536:	f8cd 800c 	str.w	r8, [sp, #12]
 800753a:	2330      	movs	r3, #48	; 0x30
 800753c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80076f0 <_vfiprintf_r+0x220>
 8007540:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007544:	f04f 0901 	mov.w	r9, #1
 8007548:	4623      	mov	r3, r4
 800754a:	469a      	mov	sl, r3
 800754c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007550:	b10a      	cbz	r2, 8007556 <_vfiprintf_r+0x86>
 8007552:	2a25      	cmp	r2, #37	; 0x25
 8007554:	d1f9      	bne.n	800754a <_vfiprintf_r+0x7a>
 8007556:	ebba 0b04 	subs.w	fp, sl, r4
 800755a:	d00b      	beq.n	8007574 <_vfiprintf_r+0xa4>
 800755c:	465b      	mov	r3, fp
 800755e:	4622      	mov	r2, r4
 8007560:	4629      	mov	r1, r5
 8007562:	4630      	mov	r0, r6
 8007564:	f7ff ffa2 	bl	80074ac <__sfputs_r>
 8007568:	3001      	adds	r0, #1
 800756a:	f000 80a9 	beq.w	80076c0 <_vfiprintf_r+0x1f0>
 800756e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007570:	445a      	add	r2, fp
 8007572:	9209      	str	r2, [sp, #36]	; 0x24
 8007574:	f89a 3000 	ldrb.w	r3, [sl]
 8007578:	2b00      	cmp	r3, #0
 800757a:	f000 80a1 	beq.w	80076c0 <_vfiprintf_r+0x1f0>
 800757e:	2300      	movs	r3, #0
 8007580:	f04f 32ff 	mov.w	r2, #4294967295
 8007584:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007588:	f10a 0a01 	add.w	sl, sl, #1
 800758c:	9304      	str	r3, [sp, #16]
 800758e:	9307      	str	r3, [sp, #28]
 8007590:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007594:	931a      	str	r3, [sp, #104]	; 0x68
 8007596:	4654      	mov	r4, sl
 8007598:	2205      	movs	r2, #5
 800759a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800759e:	4854      	ldr	r0, [pc, #336]	; (80076f0 <_vfiprintf_r+0x220>)
 80075a0:	f7f8 fe16 	bl	80001d0 <memchr>
 80075a4:	9a04      	ldr	r2, [sp, #16]
 80075a6:	b9d8      	cbnz	r0, 80075e0 <_vfiprintf_r+0x110>
 80075a8:	06d1      	lsls	r1, r2, #27
 80075aa:	bf44      	itt	mi
 80075ac:	2320      	movmi	r3, #32
 80075ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075b2:	0713      	lsls	r3, r2, #28
 80075b4:	bf44      	itt	mi
 80075b6:	232b      	movmi	r3, #43	; 0x2b
 80075b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075bc:	f89a 3000 	ldrb.w	r3, [sl]
 80075c0:	2b2a      	cmp	r3, #42	; 0x2a
 80075c2:	d015      	beq.n	80075f0 <_vfiprintf_r+0x120>
 80075c4:	9a07      	ldr	r2, [sp, #28]
 80075c6:	4654      	mov	r4, sl
 80075c8:	2000      	movs	r0, #0
 80075ca:	f04f 0c0a 	mov.w	ip, #10
 80075ce:	4621      	mov	r1, r4
 80075d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075d4:	3b30      	subs	r3, #48	; 0x30
 80075d6:	2b09      	cmp	r3, #9
 80075d8:	d94d      	bls.n	8007676 <_vfiprintf_r+0x1a6>
 80075da:	b1b0      	cbz	r0, 800760a <_vfiprintf_r+0x13a>
 80075dc:	9207      	str	r2, [sp, #28]
 80075de:	e014      	b.n	800760a <_vfiprintf_r+0x13a>
 80075e0:	eba0 0308 	sub.w	r3, r0, r8
 80075e4:	fa09 f303 	lsl.w	r3, r9, r3
 80075e8:	4313      	orrs	r3, r2
 80075ea:	9304      	str	r3, [sp, #16]
 80075ec:	46a2      	mov	sl, r4
 80075ee:	e7d2      	b.n	8007596 <_vfiprintf_r+0xc6>
 80075f0:	9b03      	ldr	r3, [sp, #12]
 80075f2:	1d19      	adds	r1, r3, #4
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	9103      	str	r1, [sp, #12]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	bfbb      	ittet	lt
 80075fc:	425b      	neglt	r3, r3
 80075fe:	f042 0202 	orrlt.w	r2, r2, #2
 8007602:	9307      	strge	r3, [sp, #28]
 8007604:	9307      	strlt	r3, [sp, #28]
 8007606:	bfb8      	it	lt
 8007608:	9204      	strlt	r2, [sp, #16]
 800760a:	7823      	ldrb	r3, [r4, #0]
 800760c:	2b2e      	cmp	r3, #46	; 0x2e
 800760e:	d10c      	bne.n	800762a <_vfiprintf_r+0x15a>
 8007610:	7863      	ldrb	r3, [r4, #1]
 8007612:	2b2a      	cmp	r3, #42	; 0x2a
 8007614:	d134      	bne.n	8007680 <_vfiprintf_r+0x1b0>
 8007616:	9b03      	ldr	r3, [sp, #12]
 8007618:	1d1a      	adds	r2, r3, #4
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	9203      	str	r2, [sp, #12]
 800761e:	2b00      	cmp	r3, #0
 8007620:	bfb8      	it	lt
 8007622:	f04f 33ff 	movlt.w	r3, #4294967295
 8007626:	3402      	adds	r4, #2
 8007628:	9305      	str	r3, [sp, #20]
 800762a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007700 <_vfiprintf_r+0x230>
 800762e:	7821      	ldrb	r1, [r4, #0]
 8007630:	2203      	movs	r2, #3
 8007632:	4650      	mov	r0, sl
 8007634:	f7f8 fdcc 	bl	80001d0 <memchr>
 8007638:	b138      	cbz	r0, 800764a <_vfiprintf_r+0x17a>
 800763a:	9b04      	ldr	r3, [sp, #16]
 800763c:	eba0 000a 	sub.w	r0, r0, sl
 8007640:	2240      	movs	r2, #64	; 0x40
 8007642:	4082      	lsls	r2, r0
 8007644:	4313      	orrs	r3, r2
 8007646:	3401      	adds	r4, #1
 8007648:	9304      	str	r3, [sp, #16]
 800764a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800764e:	4829      	ldr	r0, [pc, #164]	; (80076f4 <_vfiprintf_r+0x224>)
 8007650:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007654:	2206      	movs	r2, #6
 8007656:	f7f8 fdbb 	bl	80001d0 <memchr>
 800765a:	2800      	cmp	r0, #0
 800765c:	d03f      	beq.n	80076de <_vfiprintf_r+0x20e>
 800765e:	4b26      	ldr	r3, [pc, #152]	; (80076f8 <_vfiprintf_r+0x228>)
 8007660:	bb1b      	cbnz	r3, 80076aa <_vfiprintf_r+0x1da>
 8007662:	9b03      	ldr	r3, [sp, #12]
 8007664:	3307      	adds	r3, #7
 8007666:	f023 0307 	bic.w	r3, r3, #7
 800766a:	3308      	adds	r3, #8
 800766c:	9303      	str	r3, [sp, #12]
 800766e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007670:	443b      	add	r3, r7
 8007672:	9309      	str	r3, [sp, #36]	; 0x24
 8007674:	e768      	b.n	8007548 <_vfiprintf_r+0x78>
 8007676:	fb0c 3202 	mla	r2, ip, r2, r3
 800767a:	460c      	mov	r4, r1
 800767c:	2001      	movs	r0, #1
 800767e:	e7a6      	b.n	80075ce <_vfiprintf_r+0xfe>
 8007680:	2300      	movs	r3, #0
 8007682:	3401      	adds	r4, #1
 8007684:	9305      	str	r3, [sp, #20]
 8007686:	4619      	mov	r1, r3
 8007688:	f04f 0c0a 	mov.w	ip, #10
 800768c:	4620      	mov	r0, r4
 800768e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007692:	3a30      	subs	r2, #48	; 0x30
 8007694:	2a09      	cmp	r2, #9
 8007696:	d903      	bls.n	80076a0 <_vfiprintf_r+0x1d0>
 8007698:	2b00      	cmp	r3, #0
 800769a:	d0c6      	beq.n	800762a <_vfiprintf_r+0x15a>
 800769c:	9105      	str	r1, [sp, #20]
 800769e:	e7c4      	b.n	800762a <_vfiprintf_r+0x15a>
 80076a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80076a4:	4604      	mov	r4, r0
 80076a6:	2301      	movs	r3, #1
 80076a8:	e7f0      	b.n	800768c <_vfiprintf_r+0x1bc>
 80076aa:	ab03      	add	r3, sp, #12
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	462a      	mov	r2, r5
 80076b0:	4b12      	ldr	r3, [pc, #72]	; (80076fc <_vfiprintf_r+0x22c>)
 80076b2:	a904      	add	r1, sp, #16
 80076b4:	4630      	mov	r0, r6
 80076b6:	f7fb fe4b 	bl	8003350 <_printf_float>
 80076ba:	4607      	mov	r7, r0
 80076bc:	1c78      	adds	r0, r7, #1
 80076be:	d1d6      	bne.n	800766e <_vfiprintf_r+0x19e>
 80076c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076c2:	07d9      	lsls	r1, r3, #31
 80076c4:	d405      	bmi.n	80076d2 <_vfiprintf_r+0x202>
 80076c6:	89ab      	ldrh	r3, [r5, #12]
 80076c8:	059a      	lsls	r2, r3, #22
 80076ca:	d402      	bmi.n	80076d2 <_vfiprintf_r+0x202>
 80076cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076ce:	f7fc fdb9 	bl	8004244 <__retarget_lock_release_recursive>
 80076d2:	89ab      	ldrh	r3, [r5, #12]
 80076d4:	065b      	lsls	r3, r3, #25
 80076d6:	f53f af1d 	bmi.w	8007514 <_vfiprintf_r+0x44>
 80076da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076dc:	e71c      	b.n	8007518 <_vfiprintf_r+0x48>
 80076de:	ab03      	add	r3, sp, #12
 80076e0:	9300      	str	r3, [sp, #0]
 80076e2:	462a      	mov	r2, r5
 80076e4:	4b05      	ldr	r3, [pc, #20]	; (80076fc <_vfiprintf_r+0x22c>)
 80076e6:	a904      	add	r1, sp, #16
 80076e8:	4630      	mov	r0, r6
 80076ea:	f7fc f8d5 	bl	8003898 <_printf_i>
 80076ee:	e7e4      	b.n	80076ba <_vfiprintf_r+0x1ea>
 80076f0:	08007d89 	.word	0x08007d89
 80076f4:	08007d93 	.word	0x08007d93
 80076f8:	08003351 	.word	0x08003351
 80076fc:	080074ad 	.word	0x080074ad
 8007700:	08007d8f 	.word	0x08007d8f

08007704 <__swbuf_r>:
 8007704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007706:	460e      	mov	r6, r1
 8007708:	4614      	mov	r4, r2
 800770a:	4605      	mov	r5, r0
 800770c:	b118      	cbz	r0, 8007716 <__swbuf_r+0x12>
 800770e:	6a03      	ldr	r3, [r0, #32]
 8007710:	b90b      	cbnz	r3, 8007716 <__swbuf_r+0x12>
 8007712:	f7fc fc7f 	bl	8004014 <__sinit>
 8007716:	69a3      	ldr	r3, [r4, #24]
 8007718:	60a3      	str	r3, [r4, #8]
 800771a:	89a3      	ldrh	r3, [r4, #12]
 800771c:	071a      	lsls	r2, r3, #28
 800771e:	d525      	bpl.n	800776c <__swbuf_r+0x68>
 8007720:	6923      	ldr	r3, [r4, #16]
 8007722:	b31b      	cbz	r3, 800776c <__swbuf_r+0x68>
 8007724:	6823      	ldr	r3, [r4, #0]
 8007726:	6922      	ldr	r2, [r4, #16]
 8007728:	1a98      	subs	r0, r3, r2
 800772a:	6963      	ldr	r3, [r4, #20]
 800772c:	b2f6      	uxtb	r6, r6
 800772e:	4283      	cmp	r3, r0
 8007730:	4637      	mov	r7, r6
 8007732:	dc04      	bgt.n	800773e <__swbuf_r+0x3a>
 8007734:	4621      	mov	r1, r4
 8007736:	4628      	mov	r0, r5
 8007738:	f7ff fa2a 	bl	8006b90 <_fflush_r>
 800773c:	b9e0      	cbnz	r0, 8007778 <__swbuf_r+0x74>
 800773e:	68a3      	ldr	r3, [r4, #8]
 8007740:	3b01      	subs	r3, #1
 8007742:	60a3      	str	r3, [r4, #8]
 8007744:	6823      	ldr	r3, [r4, #0]
 8007746:	1c5a      	adds	r2, r3, #1
 8007748:	6022      	str	r2, [r4, #0]
 800774a:	701e      	strb	r6, [r3, #0]
 800774c:	6962      	ldr	r2, [r4, #20]
 800774e:	1c43      	adds	r3, r0, #1
 8007750:	429a      	cmp	r2, r3
 8007752:	d004      	beq.n	800775e <__swbuf_r+0x5a>
 8007754:	89a3      	ldrh	r3, [r4, #12]
 8007756:	07db      	lsls	r3, r3, #31
 8007758:	d506      	bpl.n	8007768 <__swbuf_r+0x64>
 800775a:	2e0a      	cmp	r6, #10
 800775c:	d104      	bne.n	8007768 <__swbuf_r+0x64>
 800775e:	4621      	mov	r1, r4
 8007760:	4628      	mov	r0, r5
 8007762:	f7ff fa15 	bl	8006b90 <_fflush_r>
 8007766:	b938      	cbnz	r0, 8007778 <__swbuf_r+0x74>
 8007768:	4638      	mov	r0, r7
 800776a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800776c:	4621      	mov	r1, r4
 800776e:	4628      	mov	r0, r5
 8007770:	f000 f806 	bl	8007780 <__swsetup_r>
 8007774:	2800      	cmp	r0, #0
 8007776:	d0d5      	beq.n	8007724 <__swbuf_r+0x20>
 8007778:	f04f 37ff 	mov.w	r7, #4294967295
 800777c:	e7f4      	b.n	8007768 <__swbuf_r+0x64>
	...

08007780 <__swsetup_r>:
 8007780:	b538      	push	{r3, r4, r5, lr}
 8007782:	4b2a      	ldr	r3, [pc, #168]	; (800782c <__swsetup_r+0xac>)
 8007784:	4605      	mov	r5, r0
 8007786:	6818      	ldr	r0, [r3, #0]
 8007788:	460c      	mov	r4, r1
 800778a:	b118      	cbz	r0, 8007794 <__swsetup_r+0x14>
 800778c:	6a03      	ldr	r3, [r0, #32]
 800778e:	b90b      	cbnz	r3, 8007794 <__swsetup_r+0x14>
 8007790:	f7fc fc40 	bl	8004014 <__sinit>
 8007794:	89a3      	ldrh	r3, [r4, #12]
 8007796:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800779a:	0718      	lsls	r0, r3, #28
 800779c:	d422      	bmi.n	80077e4 <__swsetup_r+0x64>
 800779e:	06d9      	lsls	r1, r3, #27
 80077a0:	d407      	bmi.n	80077b2 <__swsetup_r+0x32>
 80077a2:	2309      	movs	r3, #9
 80077a4:	602b      	str	r3, [r5, #0]
 80077a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80077aa:	81a3      	strh	r3, [r4, #12]
 80077ac:	f04f 30ff 	mov.w	r0, #4294967295
 80077b0:	e034      	b.n	800781c <__swsetup_r+0x9c>
 80077b2:	0758      	lsls	r0, r3, #29
 80077b4:	d512      	bpl.n	80077dc <__swsetup_r+0x5c>
 80077b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077b8:	b141      	cbz	r1, 80077cc <__swsetup_r+0x4c>
 80077ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077be:	4299      	cmp	r1, r3
 80077c0:	d002      	beq.n	80077c8 <__swsetup_r+0x48>
 80077c2:	4628      	mov	r0, r5
 80077c4:	f7fd fbc2 	bl	8004f4c <_free_r>
 80077c8:	2300      	movs	r3, #0
 80077ca:	6363      	str	r3, [r4, #52]	; 0x34
 80077cc:	89a3      	ldrh	r3, [r4, #12]
 80077ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80077d2:	81a3      	strh	r3, [r4, #12]
 80077d4:	2300      	movs	r3, #0
 80077d6:	6063      	str	r3, [r4, #4]
 80077d8:	6923      	ldr	r3, [r4, #16]
 80077da:	6023      	str	r3, [r4, #0]
 80077dc:	89a3      	ldrh	r3, [r4, #12]
 80077de:	f043 0308 	orr.w	r3, r3, #8
 80077e2:	81a3      	strh	r3, [r4, #12]
 80077e4:	6923      	ldr	r3, [r4, #16]
 80077e6:	b94b      	cbnz	r3, 80077fc <__swsetup_r+0x7c>
 80077e8:	89a3      	ldrh	r3, [r4, #12]
 80077ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80077ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077f2:	d003      	beq.n	80077fc <__swsetup_r+0x7c>
 80077f4:	4621      	mov	r1, r4
 80077f6:	4628      	mov	r0, r5
 80077f8:	f000 f884 	bl	8007904 <__smakebuf_r>
 80077fc:	89a0      	ldrh	r0, [r4, #12]
 80077fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007802:	f010 0301 	ands.w	r3, r0, #1
 8007806:	d00a      	beq.n	800781e <__swsetup_r+0x9e>
 8007808:	2300      	movs	r3, #0
 800780a:	60a3      	str	r3, [r4, #8]
 800780c:	6963      	ldr	r3, [r4, #20]
 800780e:	425b      	negs	r3, r3
 8007810:	61a3      	str	r3, [r4, #24]
 8007812:	6923      	ldr	r3, [r4, #16]
 8007814:	b943      	cbnz	r3, 8007828 <__swsetup_r+0xa8>
 8007816:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800781a:	d1c4      	bne.n	80077a6 <__swsetup_r+0x26>
 800781c:	bd38      	pop	{r3, r4, r5, pc}
 800781e:	0781      	lsls	r1, r0, #30
 8007820:	bf58      	it	pl
 8007822:	6963      	ldrpl	r3, [r4, #20]
 8007824:	60a3      	str	r3, [r4, #8]
 8007826:	e7f4      	b.n	8007812 <__swsetup_r+0x92>
 8007828:	2000      	movs	r0, #0
 800782a:	e7f7      	b.n	800781c <__swsetup_r+0x9c>
 800782c:	20000060 	.word	0x20000060

08007830 <_raise_r>:
 8007830:	291f      	cmp	r1, #31
 8007832:	b538      	push	{r3, r4, r5, lr}
 8007834:	4604      	mov	r4, r0
 8007836:	460d      	mov	r5, r1
 8007838:	d904      	bls.n	8007844 <_raise_r+0x14>
 800783a:	2316      	movs	r3, #22
 800783c:	6003      	str	r3, [r0, #0]
 800783e:	f04f 30ff 	mov.w	r0, #4294967295
 8007842:	bd38      	pop	{r3, r4, r5, pc}
 8007844:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007846:	b112      	cbz	r2, 800784e <_raise_r+0x1e>
 8007848:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800784c:	b94b      	cbnz	r3, 8007862 <_raise_r+0x32>
 800784e:	4620      	mov	r0, r4
 8007850:	f000 f830 	bl	80078b4 <_getpid_r>
 8007854:	462a      	mov	r2, r5
 8007856:	4601      	mov	r1, r0
 8007858:	4620      	mov	r0, r4
 800785a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800785e:	f000 b817 	b.w	8007890 <_kill_r>
 8007862:	2b01      	cmp	r3, #1
 8007864:	d00a      	beq.n	800787c <_raise_r+0x4c>
 8007866:	1c59      	adds	r1, r3, #1
 8007868:	d103      	bne.n	8007872 <_raise_r+0x42>
 800786a:	2316      	movs	r3, #22
 800786c:	6003      	str	r3, [r0, #0]
 800786e:	2001      	movs	r0, #1
 8007870:	e7e7      	b.n	8007842 <_raise_r+0x12>
 8007872:	2400      	movs	r4, #0
 8007874:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007878:	4628      	mov	r0, r5
 800787a:	4798      	blx	r3
 800787c:	2000      	movs	r0, #0
 800787e:	e7e0      	b.n	8007842 <_raise_r+0x12>

08007880 <raise>:
 8007880:	4b02      	ldr	r3, [pc, #8]	; (800788c <raise+0xc>)
 8007882:	4601      	mov	r1, r0
 8007884:	6818      	ldr	r0, [r3, #0]
 8007886:	f7ff bfd3 	b.w	8007830 <_raise_r>
 800788a:	bf00      	nop
 800788c:	20000060 	.word	0x20000060

08007890 <_kill_r>:
 8007890:	b538      	push	{r3, r4, r5, lr}
 8007892:	4d07      	ldr	r5, [pc, #28]	; (80078b0 <_kill_r+0x20>)
 8007894:	2300      	movs	r3, #0
 8007896:	4604      	mov	r4, r0
 8007898:	4608      	mov	r0, r1
 800789a:	4611      	mov	r1, r2
 800789c:	602b      	str	r3, [r5, #0]
 800789e:	f7fa f919 	bl	8001ad4 <_kill>
 80078a2:	1c43      	adds	r3, r0, #1
 80078a4:	d102      	bne.n	80078ac <_kill_r+0x1c>
 80078a6:	682b      	ldr	r3, [r5, #0]
 80078a8:	b103      	cbz	r3, 80078ac <_kill_r+0x1c>
 80078aa:	6023      	str	r3, [r4, #0]
 80078ac:	bd38      	pop	{r3, r4, r5, pc}
 80078ae:	bf00      	nop
 80078b0:	20000334 	.word	0x20000334

080078b4 <_getpid_r>:
 80078b4:	f7fa b906 	b.w	8001ac4 <_getpid>

080078b8 <__swhatbuf_r>:
 80078b8:	b570      	push	{r4, r5, r6, lr}
 80078ba:	460c      	mov	r4, r1
 80078bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078c0:	2900      	cmp	r1, #0
 80078c2:	b096      	sub	sp, #88	; 0x58
 80078c4:	4615      	mov	r5, r2
 80078c6:	461e      	mov	r6, r3
 80078c8:	da0d      	bge.n	80078e6 <__swhatbuf_r+0x2e>
 80078ca:	89a3      	ldrh	r3, [r4, #12]
 80078cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80078d0:	f04f 0100 	mov.w	r1, #0
 80078d4:	bf0c      	ite	eq
 80078d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80078da:	2340      	movne	r3, #64	; 0x40
 80078dc:	2000      	movs	r0, #0
 80078de:	6031      	str	r1, [r6, #0]
 80078e0:	602b      	str	r3, [r5, #0]
 80078e2:	b016      	add	sp, #88	; 0x58
 80078e4:	bd70      	pop	{r4, r5, r6, pc}
 80078e6:	466a      	mov	r2, sp
 80078e8:	f000 f848 	bl	800797c <_fstat_r>
 80078ec:	2800      	cmp	r0, #0
 80078ee:	dbec      	blt.n	80078ca <__swhatbuf_r+0x12>
 80078f0:	9901      	ldr	r1, [sp, #4]
 80078f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80078f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80078fa:	4259      	negs	r1, r3
 80078fc:	4159      	adcs	r1, r3
 80078fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007902:	e7eb      	b.n	80078dc <__swhatbuf_r+0x24>

08007904 <__smakebuf_r>:
 8007904:	898b      	ldrh	r3, [r1, #12]
 8007906:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007908:	079d      	lsls	r5, r3, #30
 800790a:	4606      	mov	r6, r0
 800790c:	460c      	mov	r4, r1
 800790e:	d507      	bpl.n	8007920 <__smakebuf_r+0x1c>
 8007910:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007914:	6023      	str	r3, [r4, #0]
 8007916:	6123      	str	r3, [r4, #16]
 8007918:	2301      	movs	r3, #1
 800791a:	6163      	str	r3, [r4, #20]
 800791c:	b002      	add	sp, #8
 800791e:	bd70      	pop	{r4, r5, r6, pc}
 8007920:	ab01      	add	r3, sp, #4
 8007922:	466a      	mov	r2, sp
 8007924:	f7ff ffc8 	bl	80078b8 <__swhatbuf_r>
 8007928:	9900      	ldr	r1, [sp, #0]
 800792a:	4605      	mov	r5, r0
 800792c:	4630      	mov	r0, r6
 800792e:	f7fd fb81 	bl	8005034 <_malloc_r>
 8007932:	b948      	cbnz	r0, 8007948 <__smakebuf_r+0x44>
 8007934:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007938:	059a      	lsls	r2, r3, #22
 800793a:	d4ef      	bmi.n	800791c <__smakebuf_r+0x18>
 800793c:	f023 0303 	bic.w	r3, r3, #3
 8007940:	f043 0302 	orr.w	r3, r3, #2
 8007944:	81a3      	strh	r3, [r4, #12]
 8007946:	e7e3      	b.n	8007910 <__smakebuf_r+0xc>
 8007948:	89a3      	ldrh	r3, [r4, #12]
 800794a:	6020      	str	r0, [r4, #0]
 800794c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007950:	81a3      	strh	r3, [r4, #12]
 8007952:	9b00      	ldr	r3, [sp, #0]
 8007954:	6163      	str	r3, [r4, #20]
 8007956:	9b01      	ldr	r3, [sp, #4]
 8007958:	6120      	str	r0, [r4, #16]
 800795a:	b15b      	cbz	r3, 8007974 <__smakebuf_r+0x70>
 800795c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007960:	4630      	mov	r0, r6
 8007962:	f000 f81d 	bl	80079a0 <_isatty_r>
 8007966:	b128      	cbz	r0, 8007974 <__smakebuf_r+0x70>
 8007968:	89a3      	ldrh	r3, [r4, #12]
 800796a:	f023 0303 	bic.w	r3, r3, #3
 800796e:	f043 0301 	orr.w	r3, r3, #1
 8007972:	81a3      	strh	r3, [r4, #12]
 8007974:	89a3      	ldrh	r3, [r4, #12]
 8007976:	431d      	orrs	r5, r3
 8007978:	81a5      	strh	r5, [r4, #12]
 800797a:	e7cf      	b.n	800791c <__smakebuf_r+0x18>

0800797c <_fstat_r>:
 800797c:	b538      	push	{r3, r4, r5, lr}
 800797e:	4d07      	ldr	r5, [pc, #28]	; (800799c <_fstat_r+0x20>)
 8007980:	2300      	movs	r3, #0
 8007982:	4604      	mov	r4, r0
 8007984:	4608      	mov	r0, r1
 8007986:	4611      	mov	r1, r2
 8007988:	602b      	str	r3, [r5, #0]
 800798a:	f7fa f902 	bl	8001b92 <_fstat>
 800798e:	1c43      	adds	r3, r0, #1
 8007990:	d102      	bne.n	8007998 <_fstat_r+0x1c>
 8007992:	682b      	ldr	r3, [r5, #0]
 8007994:	b103      	cbz	r3, 8007998 <_fstat_r+0x1c>
 8007996:	6023      	str	r3, [r4, #0]
 8007998:	bd38      	pop	{r3, r4, r5, pc}
 800799a:	bf00      	nop
 800799c:	20000334 	.word	0x20000334

080079a0 <_isatty_r>:
 80079a0:	b538      	push	{r3, r4, r5, lr}
 80079a2:	4d06      	ldr	r5, [pc, #24]	; (80079bc <_isatty_r+0x1c>)
 80079a4:	2300      	movs	r3, #0
 80079a6:	4604      	mov	r4, r0
 80079a8:	4608      	mov	r0, r1
 80079aa:	602b      	str	r3, [r5, #0]
 80079ac:	f7fa f901 	bl	8001bb2 <_isatty>
 80079b0:	1c43      	adds	r3, r0, #1
 80079b2:	d102      	bne.n	80079ba <_isatty_r+0x1a>
 80079b4:	682b      	ldr	r3, [r5, #0]
 80079b6:	b103      	cbz	r3, 80079ba <_isatty_r+0x1a>
 80079b8:	6023      	str	r3, [r4, #0]
 80079ba:	bd38      	pop	{r3, r4, r5, pc}
 80079bc:	20000334 	.word	0x20000334

080079c0 <_init>:
 80079c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c2:	bf00      	nop
 80079c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079c6:	bc08      	pop	{r3}
 80079c8:	469e      	mov	lr, r3
 80079ca:	4770      	bx	lr

080079cc <_fini>:
 80079cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ce:	bf00      	nop
 80079d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079d2:	bc08      	pop	{r3}
 80079d4:	469e      	mov	lr, r3
 80079d6:	4770      	bx	lr
